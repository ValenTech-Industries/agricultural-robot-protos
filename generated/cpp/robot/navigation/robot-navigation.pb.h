// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot/navigation/robot-navigation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_2fnavigation_2frobot_2dnavigation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_2fnavigation_2frobot_2dnavigation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[66]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto;
namespace agricultural {
namespace robot {
namespace navigation {
namespace v1 {
class CameraControlCommand;
class CameraControlCommandDefaultTypeInternal;
extern CameraControlCommandDefaultTypeInternal _CameraControlCommand_default_instance_;
class CameraControlCommand_ParametersEntry_DoNotUse;
class CameraControlCommand_ParametersEntry_DoNotUseDefaultTypeInternal;
extern CameraControlCommand_ParametersEntry_DoNotUseDefaultTypeInternal _CameraControlCommand_ParametersEntry_DoNotUse_default_instance_;
class CameraControlRequest;
class CameraControlRequestDefaultTypeInternal;
extern CameraControlRequestDefaultTypeInternal _CameraControlRequest_default_instance_;
class CameraControlResponse;
class CameraControlResponseDefaultTypeInternal;
extern CameraControlResponseDefaultTypeInternal _CameraControlResponse_default_instance_;
class CameraControlResponse_CurrentSettingsEntry_DoNotUse;
class CameraControlResponse_CurrentSettingsEntry_DoNotUseDefaultTypeInternal;
extern CameraControlResponse_CurrentSettingsEntry_DoNotUseDefaultTypeInternal _CameraControlResponse_CurrentSettingsEntry_DoNotUse_default_instance_;
class CameraDistortion;
class CameraDistortionDefaultTypeInternal;
extern CameraDistortionDefaultTypeInternal _CameraDistortion_default_instance_;
class CameraInfo;
class CameraInfoDefaultTypeInternal;
extern CameraInfoDefaultTypeInternal _CameraInfo_default_instance_;
class CameraInfoResponse;
class CameraInfoResponseDefaultTypeInternal;
extern CameraInfoResponseDefaultTypeInternal _CameraInfoResponse_default_instance_;
class CameraIntrinsics;
class CameraIntrinsicsDefaultTypeInternal;
extern CameraIntrinsicsDefaultTypeInternal _CameraIntrinsics_default_instance_;
class CancelGoalRequest;
class CancelGoalRequestDefaultTypeInternal;
extern CancelGoalRequestDefaultTypeInternal _CancelGoalRequest_default_instance_;
class ClearMapRequest;
class ClearMapRequestDefaultTypeInternal;
extern ClearMapRequestDefaultTypeInternal _ClearMapRequest_default_instance_;
class FrameMetadata;
class FrameMetadataDefaultTypeInternal;
extern FrameMetadataDefaultTypeInternal _FrameMetadata_default_instance_;
class GetCameraInfoRequest;
class GetCameraInfoRequestDefaultTypeInternal;
extern GetCameraInfoRequestDefaultTypeInternal _GetCameraInfoRequest_default_instance_;
class GetLocalizationStatusRequest;
class GetLocalizationStatusRequestDefaultTypeInternal;
extern GetLocalizationStatusRequestDefaultTypeInternal _GetLocalizationStatusRequest_default_instance_;
class GetMapRequest;
class GetMapRequestDefaultTypeInternal;
extern GetMapRequestDefaultTypeInternal _GetMapRequest_default_instance_;
class GetNavigationStatusRequest;
class GetNavigationStatusRequestDefaultTypeInternal;
extern GetNavigationStatusRequestDefaultTypeInternal _GetNavigationStatusRequest_default_instance_;
class GetPositionRequest;
class GetPositionRequestDefaultTypeInternal;
extern GetPositionRequestDefaultTypeInternal _GetPositionRequest_default_instance_;
class InitializeLocalizationRequest;
class InitializeLocalizationRequestDefaultTypeInternal;
extern InitializeLocalizationRequestDefaultTypeInternal _InitializeLocalizationRequest_default_instance_;
class InitializeLocalizationRequest_ParametersEntry_DoNotUse;
class InitializeLocalizationRequest_ParametersEntry_DoNotUseDefaultTypeInternal;
extern InitializeLocalizationRequest_ParametersEntry_DoNotUseDefaultTypeInternal _InitializeLocalizationRequest_ParametersEntry_DoNotUse_default_instance_;
class JoystickInput;
class JoystickInputDefaultTypeInternal;
extern JoystickInputDefaultTypeInternal _JoystickInput_default_instance_;
class LocalizationMetrics;
class LocalizationMetricsDefaultTypeInternal;
extern LocalizationMetricsDefaultTypeInternal _LocalizationMetrics_default_instance_;
class LocalizationQuality;
class LocalizationQualityDefaultTypeInternal;
extern LocalizationQualityDefaultTypeInternal _LocalizationQuality_default_instance_;
class LocalizationResponse;
class LocalizationResponseDefaultTypeInternal;
extern LocalizationResponseDefaultTypeInternal _LocalizationResponse_default_instance_;
class LocalizationStatusResponse;
class LocalizationStatusResponseDefaultTypeInternal;
extern LocalizationStatusResponseDefaultTypeInternal _LocalizationStatusResponse_default_instance_;
class MapMetadata;
class MapMetadataDefaultTypeInternal;
extern MapMetadataDefaultTypeInternal _MapMetadata_default_instance_;
class MapResponse;
class MapResponseDefaultTypeInternal;
extern MapResponseDefaultTypeInternal _MapResponse_default_instance_;
class MapUpdate;
class MapUpdateDefaultTypeInternal;
extern MapUpdateDefaultTypeInternal _MapUpdate_default_instance_;
class NavigationError;
class NavigationErrorDefaultTypeInternal;
extern NavigationErrorDefaultTypeInternal _NavigationError_default_instance_;
class NavigationGoal;
class NavigationGoalDefaultTypeInternal;
extern NavigationGoalDefaultTypeInternal _NavigationGoal_default_instance_;
class NavigationOptions;
class NavigationOptionsDefaultTypeInternal;
extern NavigationOptionsDefaultTypeInternal _NavigationOptions_default_instance_;
class NavigationProgress;
class NavigationProgressDefaultTypeInternal;
extern NavigationProgressDefaultTypeInternal _NavigationProgress_default_instance_;
class NavigationResponse;
class NavigationResponseDefaultTypeInternal;
extern NavigationResponseDefaultTypeInternal _NavigationResponse_default_instance_;
class NavigationStatusResponse;
class NavigationStatusResponseDefaultTypeInternal;
extern NavigationStatusResponseDefaultTypeInternal _NavigationStatusResponse_default_instance_;
class NavigationStatusUpdate;
class NavigationStatusUpdateDefaultTypeInternal;
extern NavigationStatusUpdateDefaultTypeInternal _NavigationStatusUpdate_default_instance_;
class OccupancyGridMap;
class OccupancyGridMapDefaultTypeInternal;
extern OccupancyGridMapDefaultTypeInternal _OccupancyGridMap_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PoseWithCovariance;
class PoseWithCovarianceDefaultTypeInternal;
extern PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;
class PositionResponse;
class PositionResponseDefaultTypeInternal;
extern PositionResponseDefaultTypeInternal _PositionResponse_default_instance_;
class PositionUpdate;
class PositionUpdateDefaultTypeInternal;
extern PositionUpdateDefaultTypeInternal _PositionUpdate_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class ResetLocalizationRequest;
class ResetLocalizationRequestDefaultTypeInternal;
extern ResetLocalizationRequestDefaultTypeInternal _ResetLocalizationRequest_default_instance_;
class Resolution;
class ResolutionDefaultTypeInternal;
extern ResolutionDefaultTypeInternal _Resolution_default_instance_;
class SafetyConstraints;
class SafetyConstraintsDefaultTypeInternal;
extern SafetyConstraintsDefaultTypeInternal _SafetyConstraints_default_instance_;
class SafetyViolation;
class SafetyViolationDefaultTypeInternal;
extern SafetyViolationDefaultTypeInternal _SafetyViolation_default_instance_;
class SetMapRequest;
class SetMapRequestDefaultTypeInternal;
extern SetMapRequestDefaultTypeInternal _SetMapRequest_default_instance_;
class SetPositionRequest;
class SetPositionRequestDefaultTypeInternal;
extern SetPositionRequestDefaultTypeInternal _SetPositionRequest_default_instance_;
class StopMovementRequest;
class StopMovementRequestDefaultTypeInternal;
extern StopMovementRequestDefaultTypeInternal _StopMovementRequest_default_instance_;
class StreamNavigationStatusRequest;
class StreamNavigationStatusRequestDefaultTypeInternal;
extern StreamNavigationStatusRequestDefaultTypeInternal _StreamNavigationStatusRequest_default_instance_;
class StreamPositionRequest;
class StreamPositionRequestDefaultTypeInternal;
extern StreamPositionRequestDefaultTypeInternal _StreamPositionRequest_default_instance_;
class StreamVideoRequest;
class StreamVideoRequestDefaultTypeInternal;
extern StreamVideoRequestDefaultTypeInternal _StreamVideoRequest_default_instance_;
class TrajectoryCommand;
class TrajectoryCommandDefaultTypeInternal;
extern TrajectoryCommandDefaultTypeInternal _TrajectoryCommand_default_instance_;
class TrajectoryOptions;
class TrajectoryOptionsDefaultTypeInternal;
extern TrajectoryOptionsDefaultTypeInternal _TrajectoryOptions_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
class UpdateMapRequest;
class UpdateMapRequestDefaultTypeInternal;
extern UpdateMapRequestDefaultTypeInternal _UpdateMapRequest_default_instance_;
class Vector3;
class Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class VelocityCommand;
class VelocityCommandDefaultTypeInternal;
extern VelocityCommandDefaultTypeInternal _VelocityCommand_default_instance_;
class VelocityResponse;
class VelocityResponseDefaultTypeInternal;
extern VelocityResponseDefaultTypeInternal _VelocityResponse_default_instance_;
class VideoFrame;
class VideoFrameDefaultTypeInternal;
extern VideoFrameDefaultTypeInternal _VideoFrame_default_instance_;
class VideoStreamOptions;
class VideoStreamOptionsDefaultTypeInternal;
extern VideoStreamOptionsDefaultTypeInternal _VideoStreamOptions_default_instance_;
class Waypoint;
class WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
class WaypointAction;
class WaypointActionDefaultTypeInternal;
extern WaypointActionDefaultTypeInternal _WaypointAction_default_instance_;
class WaypointAction_ParametersEntry_DoNotUse;
class WaypointAction_ParametersEntry_DoNotUseDefaultTypeInternal;
extern WaypointAction_ParametersEntry_DoNotUseDefaultTypeInternal _WaypointAction_ParametersEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace navigation
}  // namespace robot
}  // namespace agricultural
PROTOBUF_NAMESPACE_OPEN
template<> ::agricultural::robot::navigation::v1::CameraControlCommand* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraControlCommand>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraControlRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraControlRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraControlResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraControlResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraDistortion* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraDistortion>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraInfo* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraInfo>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraInfoResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraInfoResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::CameraIntrinsics* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraIntrinsics>(Arena*);
template<> ::agricultural::robot::navigation::v1::CancelGoalRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::CancelGoalRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::ClearMapRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::ClearMapRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::FrameMetadata* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::FrameMetadata>(Arena*);
template<> ::agricultural::robot::navigation::v1::GetCameraInfoRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::GetCameraInfoRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::GetLocalizationStatusRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::GetMapRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::GetMapRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::GetNavigationStatusRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::GetPositionRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::GetPositionRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::InitializeLocalizationRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse>(Arena*);
template<> ::agricultural::robot::navigation::v1::JoystickInput* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::JoystickInput>(Arena*);
template<> ::agricultural::robot::navigation::v1::LocalizationMetrics* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationMetrics>(Arena*);
template<> ::agricultural::robot::navigation::v1::LocalizationQuality* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationQuality>(Arena*);
template<> ::agricultural::robot::navigation::v1::LocalizationResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::LocalizationStatusResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationStatusResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::MapMetadata* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::MapMetadata>(Arena*);
template<> ::agricultural::robot::navigation::v1::MapResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::MapResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::MapUpdate* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::MapUpdate>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationError* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationError>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationGoal* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationGoal>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationOptions* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationOptions>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationProgress* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationProgress>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationStatusResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationStatusResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::NavigationStatusUpdate* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationStatusUpdate>(Arena*);
template<> ::agricultural::robot::navigation::v1::OccupancyGridMap* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::OccupancyGridMap>(Arena*);
template<> ::agricultural::robot::navigation::v1::Point2D* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Point2D>(Arena*);
template<> ::agricultural::robot::navigation::v1::Point3D* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Point3D>(Arena*);
template<> ::agricultural::robot::navigation::v1::Pose* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Pose>(Arena*);
template<> ::agricultural::robot::navigation::v1::PoseWithCovariance* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(Arena*);
template<> ::agricultural::robot::navigation::v1::PositionResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::PositionResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::PositionUpdate* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::PositionUpdate>(Arena*);
template<> ::agricultural::robot::navigation::v1::Quaternion* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Quaternion>(Arena*);
template<> ::agricultural::robot::navigation::v1::Rectangle* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Rectangle>(Arena*);
template<> ::agricultural::robot::navigation::v1::ResetLocalizationRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::ResetLocalizationRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::Resolution* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Resolution>(Arena*);
template<> ::agricultural::robot::navigation::v1::SafetyConstraints* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::SafetyConstraints>(Arena*);
template<> ::agricultural::robot::navigation::v1::SafetyViolation* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::SafetyViolation>(Arena*);
template<> ::agricultural::robot::navigation::v1::SetMapRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::SetMapRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::SetPositionRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::SetPositionRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::StopMovementRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::StopMovementRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::StreamNavigationStatusRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::StreamPositionRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::StreamPositionRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::StreamVideoRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::StreamVideoRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::TrajectoryCommand* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::TrajectoryCommand>(Arena*);
template<> ::agricultural::robot::navigation::v1::TrajectoryOptions* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::TrajectoryOptions>(Arena*);
template<> ::agricultural::robot::navigation::v1::TrajectoryPoint* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::TrajectoryPoint>(Arena*);
template<> ::agricultural::robot::navigation::v1::Twist* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Twist>(Arena*);
template<> ::agricultural::robot::navigation::v1::UpdateMapRequest* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::UpdateMapRequest>(Arena*);
template<> ::agricultural::robot::navigation::v1::Vector3* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Vector3>(Arena*);
template<> ::agricultural::robot::navigation::v1::VelocityCommand* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::VelocityCommand>(Arena*);
template<> ::agricultural::robot::navigation::v1::VelocityResponse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::VelocityResponse>(Arena*);
template<> ::agricultural::robot::navigation::v1::VideoFrame* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::VideoFrame>(Arena*);
template<> ::agricultural::robot::navigation::v1::VideoStreamOptions* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::VideoStreamOptions>(Arena*);
template<> ::agricultural::robot::navigation::v1::Waypoint* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::Waypoint>(Arena*);
template<> ::agricultural::robot::navigation::v1::WaypointAction* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::WaypointAction>(Arena*);
template<> ::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage<::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace agricultural {
namespace robot {
namespace navigation {
namespace v1 {

enum MapType : int {
  MAP_TYPE_UNSPECIFIED = 0,
  MAP_TYPE_OCCUPANCY_GRID = 1,
  MAP_TYPE_COSTMAP = 2,
  MAP_TYPE_SEMANTIC = 3,
  MAP_TYPE_ELEVATION = 4,
  MapType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MapType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MapType_IsValid(int value);
constexpr MapType MapType_MIN = MAP_TYPE_UNSPECIFIED;
constexpr MapType MapType_MAX = MAP_TYPE_ELEVATION;
constexpr int MapType_ARRAYSIZE = MapType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapType_descriptor();
template<typename T>
inline const std::string& MapType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MapType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MapType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MapType_descriptor(), enum_t_value);
}
inline bool MapType_Parse(
    const std::string& name, MapType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MapType>(
    MapType_descriptor(), name, value);
}
enum MapSource : int {
  MAP_SOURCE_UNSPECIFIED = 0,
  MAP_SOURCE_SLAM = 1,
  MAP_SOURCE_UPLOADED = 2,
  MAP_SOURCE_SURVEYED = 3,
  MAP_SOURCE_SATELLITE = 4,
  MapSource_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MapSource_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MapSource_IsValid(int value);
constexpr MapSource MapSource_MIN = MAP_SOURCE_UNSPECIFIED;
constexpr MapSource MapSource_MAX = MAP_SOURCE_SATELLITE;
constexpr int MapSource_ARRAYSIZE = MapSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapSource_descriptor();
template<typename T>
inline const std::string& MapSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MapSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MapSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MapSource_descriptor(), enum_t_value);
}
inline bool MapSource_Parse(
    const std::string& name, MapSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MapSource>(
    MapSource_descriptor(), name, value);
}
enum ControlMode : int {
  CONTROL_MODE_UNSPECIFIED = 0,
  CONTROL_MODE_MANUAL = 1,
  CONTROL_MODE_ASSISTED = 2,
  CONTROL_MODE_AUTONOMOUS = 3,
  ControlMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlMode_IsValid(int value);
constexpr ControlMode ControlMode_MIN = CONTROL_MODE_UNSPECIFIED;
constexpr ControlMode ControlMode_MAX = CONTROL_MODE_AUTONOMOUS;
constexpr int ControlMode_ARRAYSIZE = ControlMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMode_descriptor();
template<typename T>
inline const std::string& ControlMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlMode_descriptor(), enum_t_value);
}
inline bool ControlMode_Parse(
    const std::string& name, ControlMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlMode>(
    ControlMode_descriptor(), name, value);
}
enum EmergencyStopType : int {
  EMERGENCY_STOP_TYPE_UNSPECIFIED = 0,
  EMERGENCY_STOP_TYPE_SOFT = 1,
  EMERGENCY_STOP_TYPE_HARD = 2,
  EMERGENCY_STOP_TYPE_FULL = 3,
  EmergencyStopType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EmergencyStopType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EmergencyStopType_IsValid(int value);
constexpr EmergencyStopType EmergencyStopType_MIN = EMERGENCY_STOP_TYPE_UNSPECIFIED;
constexpr EmergencyStopType EmergencyStopType_MAX = EMERGENCY_STOP_TYPE_FULL;
constexpr int EmergencyStopType_ARRAYSIZE = EmergencyStopType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmergencyStopType_descriptor();
template<typename T>
inline const std::string& EmergencyStopType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EmergencyStopType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EmergencyStopType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EmergencyStopType_descriptor(), enum_t_value);
}
inline bool EmergencyStopType_Parse(
    const std::string& name, EmergencyStopType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EmergencyStopType>(
    EmergencyStopType_descriptor(), name, value);
}
enum SafetyViolationType : int {
  SAFETY_VIOLATION_TYPE_UNSPECIFIED = 0,
  SAFETY_VIOLATION_TYPE_SPEED_LIMIT = 1,
  SAFETY_VIOLATION_TYPE_OBSTACLE = 2,
  SAFETY_VIOLATION_TYPE_BOUNDARY = 3,
  SAFETY_VIOLATION_TYPE_SLOPE = 4,
  SAFETY_VIOLATION_TYPE_BATTERY = 5,
  SafetyViolationType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SafetyViolationType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SafetyViolationType_IsValid(int value);
constexpr SafetyViolationType SafetyViolationType_MIN = SAFETY_VIOLATION_TYPE_UNSPECIFIED;
constexpr SafetyViolationType SafetyViolationType_MAX = SAFETY_VIOLATION_TYPE_BATTERY;
constexpr int SafetyViolationType_ARRAYSIZE = SafetyViolationType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SafetyViolationType_descriptor();
template<typename T>
inline const std::string& SafetyViolationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SafetyViolationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SafetyViolationType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SafetyViolationType_descriptor(), enum_t_value);
}
inline bool SafetyViolationType_Parse(
    const std::string& name, SafetyViolationType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SafetyViolationType>(
    SafetyViolationType_descriptor(), name, value);
}
enum WaypointType : int {
  WAYPOINT_TYPE_UNSPECIFIED = 0,
  WAYPOINT_TYPE_PASS_THROUGH = 1,
  WAYPOINT_TYPE_STOP = 2,
  WAYPOINT_TYPE_INSPECTION = 3,
  WAYPOINT_TYPE_WORK = 4,
  WAYPOINT_TYPE_CHARGE = 5,
  WaypointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WaypointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WaypointType_IsValid(int value);
constexpr WaypointType WaypointType_MIN = WAYPOINT_TYPE_UNSPECIFIED;
constexpr WaypointType WaypointType_MAX = WAYPOINT_TYPE_CHARGE;
constexpr int WaypointType_ARRAYSIZE = WaypointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaypointType_descriptor();
template<typename T>
inline const std::string& WaypointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WaypointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WaypointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WaypointType_descriptor(), enum_t_value);
}
inline bool WaypointType_Parse(
    const std::string& name, WaypointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WaypointType>(
    WaypointType_descriptor(), name, value);
}
enum WaypointActionType : int {
  WAYPOINT_ACTION_TYPE_UNSPECIFIED = 0,
  WAYPOINT_ACTION_TYPE_PAUSE = 1,
  WAYPOINT_ACTION_TYPE_CAPTURE_IMAGE = 2,
  WAYPOINT_ACTION_TYPE_SPRAY = 3,
  WAYPOINT_ACTION_TYPE_SCAN = 4,
  WAYPOINT_ACTION_TYPE_COLLECT_SAMPLE = 5,
  WaypointActionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  WaypointActionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool WaypointActionType_IsValid(int value);
constexpr WaypointActionType WaypointActionType_MIN = WAYPOINT_ACTION_TYPE_UNSPECIFIED;
constexpr WaypointActionType WaypointActionType_MAX = WAYPOINT_ACTION_TYPE_COLLECT_SAMPLE;
constexpr int WaypointActionType_ARRAYSIZE = WaypointActionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaypointActionType_descriptor();
template<typename T>
inline const std::string& WaypointActionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WaypointActionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WaypointActionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    WaypointActionType_descriptor(), enum_t_value);
}
inline bool WaypointActionType_Parse(
    const std::string& name, WaypointActionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WaypointActionType>(
    WaypointActionType_descriptor(), name, value);
}
enum PlannerType : int {
  PLANNER_TYPE_UNSPECIFIED = 0,
  PLANNER_TYPE_A_STAR = 1,
  PLANNER_TYPE_RRT = 2,
  PLANNER_TYPE_DWA = 3,
  PLANNER_TYPE_TEB = 4,
  PLANNER_TYPE_SPLINE = 5,
  PlannerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PlannerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PlannerType_IsValid(int value);
constexpr PlannerType PlannerType_MIN = PLANNER_TYPE_UNSPECIFIED;
constexpr PlannerType PlannerType_MAX = PLANNER_TYPE_SPLINE;
constexpr int PlannerType_ARRAYSIZE = PlannerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlannerType_descriptor();
template<typename T>
inline const std::string& PlannerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlannerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlannerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PlannerType_descriptor(), enum_t_value);
}
inline bool PlannerType_Parse(
    const std::string& name, PlannerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlannerType>(
    PlannerType_descriptor(), name, value);
}
enum NavigationBehavior : int {
  NAVIGATION_BEHAVIOR_UNSPECIFIED = 0,
  NAVIGATION_BEHAVIOR_DIRECT = 1,
  NAVIGATION_BEHAVIOR_CONSERVATIVE = 2,
  NAVIGATION_BEHAVIOR_AGGRESSIVE = 3,
  NAVIGATION_BEHAVIOR_PRECISION = 4,
  NavigationBehavior_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigationBehavior_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigationBehavior_IsValid(int value);
constexpr NavigationBehavior NavigationBehavior_MIN = NAVIGATION_BEHAVIOR_UNSPECIFIED;
constexpr NavigationBehavior NavigationBehavior_MAX = NAVIGATION_BEHAVIOR_PRECISION;
constexpr int NavigationBehavior_ARRAYSIZE = NavigationBehavior_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationBehavior_descriptor();
template<typename T>
inline const std::string& NavigationBehavior_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigationBehavior>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigationBehavior_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigationBehavior_descriptor(), enum_t_value);
}
inline bool NavigationBehavior_Parse(
    const std::string& name, NavigationBehavior* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigationBehavior>(
    NavigationBehavior_descriptor(), name, value);
}
enum TrajectoryExecutionMode : int {
  TRAJECTORY_EXECUTION_MODE_UNSPECIFIED = 0,
  TRAJECTORY_EXECUTION_MODE_IMMEDIATE = 1,
  TRAJECTORY_EXECUTION_MODE_QUEUED = 2,
  TRAJECTORY_EXECUTION_MODE_SCHEDULED = 3,
  TrajectoryExecutionMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrajectoryExecutionMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrajectoryExecutionMode_IsValid(int value);
constexpr TrajectoryExecutionMode TrajectoryExecutionMode_MIN = TRAJECTORY_EXECUTION_MODE_UNSPECIFIED;
constexpr TrajectoryExecutionMode TrajectoryExecutionMode_MAX = TRAJECTORY_EXECUTION_MODE_SCHEDULED;
constexpr int TrajectoryExecutionMode_ARRAYSIZE = TrajectoryExecutionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryExecutionMode_descriptor();
template<typename T>
inline const std::string& TrajectoryExecutionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrajectoryExecutionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrajectoryExecutionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrajectoryExecutionMode_descriptor(), enum_t_value);
}
inline bool TrajectoryExecutionMode_Parse(
    const std::string& name, TrajectoryExecutionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrajectoryExecutionMode>(
    TrajectoryExecutionMode_descriptor(), name, value);
}
enum NavigationStatus : int {
  NAVIGATION_STATUS_UNSPECIFIED = 0,
  NAVIGATION_STATUS_IDLE = 1,
  NAVIGATION_STATUS_PLANNING = 2,
  NAVIGATION_STATUS_EXECUTING = 3,
  NAVIGATION_STATUS_PAUSED = 4,
  NAVIGATION_STATUS_COMPLETED = 5,
  NAVIGATION_STATUS_FAILED = 6,
  NAVIGATION_STATUS_CANCELLED = 7,
  NAVIGATION_STATUS_RECOVERING = 8,
  NavigationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigationStatus_IsValid(int value);
constexpr NavigationStatus NavigationStatus_MIN = NAVIGATION_STATUS_UNSPECIFIED;
constexpr NavigationStatus NavigationStatus_MAX = NAVIGATION_STATUS_RECOVERING;
constexpr int NavigationStatus_ARRAYSIZE = NavigationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationStatus_descriptor();
template<typename T>
inline const std::string& NavigationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigationStatus_descriptor(), enum_t_value);
}
inline bool NavigationStatus_Parse(
    const std::string& name, NavigationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigationStatus>(
    NavigationStatus_descriptor(), name, value);
}
enum NavigationResult : int {
  NAVIGATION_RESULT_UNSPECIFIED = 0,
  NAVIGATION_RESULT_SUCCESS = 1,
  NAVIGATION_RESULT_TIMEOUT = 2,
  NAVIGATION_RESULT_OBSTACLE = 3,
  NAVIGATION_RESULT_INVALID_GOAL = 4,
  NAVIGATION_RESULT_PLANNING_FAILED = 5,
  NAVIGATION_RESULT_PREEMPTED = 6,
  NAVIGATION_RESULT_ABORTED = 7,
  NavigationResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigationResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigationResult_IsValid(int value);
constexpr NavigationResult NavigationResult_MIN = NAVIGATION_RESULT_UNSPECIFIED;
constexpr NavigationResult NavigationResult_MAX = NAVIGATION_RESULT_ABORTED;
constexpr int NavigationResult_ARRAYSIZE = NavigationResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationResult_descriptor();
template<typename T>
inline const std::string& NavigationResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigationResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigationResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigationResult_descriptor(), enum_t_value);
}
inline bool NavigationResult_Parse(
    const std::string& name, NavigationResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigationResult>(
    NavigationResult_descriptor(), name, value);
}
enum NavigationErrorCode : int {
  NAVIGATION_ERROR_CODE_UNSPECIFIED = 0,
  NAVIGATION_ERROR_CODE_NO_PATH = 1,
  NAVIGATION_ERROR_CODE_TIMEOUT = 2,
  NAVIGATION_ERROR_CODE_OBSTACLE = 3,
  NAVIGATION_ERROR_CODE_LOCALIZATION_LOST = 4,
  NAVIGATION_ERROR_CODE_CONTROLLER_FAILURE = 5,
  NAVIGATION_ERROR_CODE_INVALID_GOAL = 6,
  NAVIGATION_ERROR_CODE_RECOVERY_FAILED = 7,
  NavigationErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NavigationErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NavigationErrorCode_IsValid(int value);
constexpr NavigationErrorCode NavigationErrorCode_MIN = NAVIGATION_ERROR_CODE_UNSPECIFIED;
constexpr NavigationErrorCode NavigationErrorCode_MAX = NAVIGATION_ERROR_CODE_RECOVERY_FAILED;
constexpr int NavigationErrorCode_ARRAYSIZE = NavigationErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationErrorCode_descriptor();
template<typename T>
inline const std::string& NavigationErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NavigationErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NavigationErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NavigationErrorCode_descriptor(), enum_t_value);
}
inline bool NavigationErrorCode_Parse(
    const std::string& name, NavigationErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NavigationErrorCode>(
    NavigationErrorCode_descriptor(), name, value);
}
enum CameraType : int {
  CAMERA_TYPE_UNSPECIFIED = 0,
  CAMERA_TYPE_RGB = 1,
  CAMERA_TYPE_DEPTH = 2,
  CAMERA_TYPE_THERMAL = 3,
  CAMERA_TYPE_MULTISPECTRAL = 4,
  CAMERA_TYPE_STEREO = 5,
  CAMERA_TYPE_LIDAR = 6,
  CameraType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraType_IsValid(int value);
constexpr CameraType CameraType_MIN = CAMERA_TYPE_UNSPECIFIED;
constexpr CameraType CameraType_MAX = CAMERA_TYPE_LIDAR;
constexpr int CameraType_ARRAYSIZE = CameraType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor();
template<typename T>
inline const std::string& CameraType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraType_descriptor(), enum_t_value);
}
inline bool CameraType_Parse(
    const std::string& name, CameraType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraType>(
    CameraType_descriptor(), name, value);
}
enum VideoFormat : int {
  VIDEO_FORMAT_UNSPECIFIED = 0,
  VIDEO_FORMAT_MJPEG = 1,
  VIDEO_FORMAT_H264 = 2,
  VIDEO_FORMAT_H265 = 3,
  VIDEO_FORMAT_VP8 = 4,
  VIDEO_FORMAT_VP9 = 5,
  VIDEO_FORMAT_RAW = 6,
  VideoFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VideoFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VideoFormat_IsValid(int value);
constexpr VideoFormat VideoFormat_MIN = VIDEO_FORMAT_UNSPECIFIED;
constexpr VideoFormat VideoFormat_MAX = VIDEO_FORMAT_RAW;
constexpr int VideoFormat_ARRAYSIZE = VideoFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoFormat_descriptor();
template<typename T>
inline const std::string& VideoFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoFormat_descriptor(), enum_t_value);
}
inline bool VideoFormat_Parse(
    const std::string& name, VideoFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoFormat>(
    VideoFormat_descriptor(), name, value);
}
enum VideoQuality : int {
  VIDEO_QUALITY_UNSPECIFIED = 0,
  VIDEO_QUALITY_LOW = 1,
  VIDEO_QUALITY_MEDIUM = 2,
  VIDEO_QUALITY_HIGH = 3,
  VIDEO_QUALITY_ULTRA = 4,
  VideoQuality_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  VideoQuality_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool VideoQuality_IsValid(int value);
constexpr VideoQuality VideoQuality_MIN = VIDEO_QUALITY_UNSPECIFIED;
constexpr VideoQuality VideoQuality_MAX = VIDEO_QUALITY_ULTRA;
constexpr int VideoQuality_ARRAYSIZE = VideoQuality_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoQuality_descriptor();
template<typename T>
inline const std::string& VideoQuality_Name(T enum_t_value) {
  static_assert(::std::is_same<T, VideoQuality>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function VideoQuality_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    VideoQuality_descriptor(), enum_t_value);
}
inline bool VideoQuality_Parse(
    const std::string& name, VideoQuality* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<VideoQuality>(
    VideoQuality_descriptor(), name, value);
}
enum CameraStatus : int {
  CAMERA_STATUS_UNSPECIFIED = 0,
  CAMERA_STATUS_ACTIVE = 1,
  CAMERA_STATUS_INACTIVE = 2,
  CAMERA_STATUS_ERROR = 3,
  CAMERA_STATUS_CALIBRATING = 4,
  CameraStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraStatus_IsValid(int value);
constexpr CameraStatus CameraStatus_MIN = CAMERA_STATUS_UNSPECIFIED;
constexpr CameraStatus CameraStatus_MAX = CAMERA_STATUS_CALIBRATING;
constexpr int CameraStatus_ARRAYSIZE = CameraStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraStatus_descriptor();
template<typename T>
inline const std::string& CameraStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraStatus_descriptor(), enum_t_value);
}
inline bool CameraStatus_Parse(
    const std::string& name, CameraStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraStatus>(
    CameraStatus_descriptor(), name, value);
}
enum CameraControlType : int {
  CAMERA_CONTROL_TYPE_UNSPECIFIED = 0,
  CAMERA_CONTROL_TYPE_PAN = 1,
  CAMERA_CONTROL_TYPE_TILT = 2,
  CAMERA_CONTROL_TYPE_ZOOM = 3,
  CAMERA_CONTROL_TYPE_FOCUS = 4,
  CAMERA_CONTROL_TYPE_EXPOSURE = 5,
  CAMERA_CONTROL_TYPE_WHITE_BALANCE = 6,
  CAMERA_CONTROL_TYPE_GAIN = 7,
  CameraControlType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CameraControlType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CameraControlType_IsValid(int value);
constexpr CameraControlType CameraControlType_MIN = CAMERA_CONTROL_TYPE_UNSPECIFIED;
constexpr CameraControlType CameraControlType_MAX = CAMERA_CONTROL_TYPE_GAIN;
constexpr int CameraControlType_ARRAYSIZE = CameraControlType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraControlType_descriptor();
template<typename T>
inline const std::string& CameraControlType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CameraControlType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CameraControlType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CameraControlType_descriptor(), enum_t_value);
}
inline bool CameraControlType_Parse(
    const std::string& name, CameraControlType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CameraControlType>(
    CameraControlType_descriptor(), name, value);
}
enum DistortionModel : int {
  DISTORTION_MODEL_UNSPECIFIED = 0,
  DISTORTION_MODEL_PLUMB_BOB = 1,
  DISTORTION_MODEL_RATIONAL_POLYNOMIAL = 2,
  DISTORTION_MODEL_EQUIDISTANT = 3,
  DistortionModel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DistortionModel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DistortionModel_IsValid(int value);
constexpr DistortionModel DistortionModel_MIN = DISTORTION_MODEL_UNSPECIFIED;
constexpr DistortionModel DistortionModel_MAX = DISTORTION_MODEL_EQUIDISTANT;
constexpr int DistortionModel_ARRAYSIZE = DistortionModel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistortionModel_descriptor();
template<typename T>
inline const std::string& DistortionModel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DistortionModel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DistortionModel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DistortionModel_descriptor(), enum_t_value);
}
inline bool DistortionModel_Parse(
    const std::string& name, DistortionModel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DistortionModel>(
    DistortionModel_descriptor(), name, value);
}
enum OverlayType : int {
  OVERLAY_TYPE_UNSPECIFIED = 0,
  OVERLAY_TYPE_CROSSHAIR = 1,
  OVERLAY_TYPE_GRID = 2,
  OVERLAY_TYPE_POSE = 3,
  OVERLAY_TYPE_NAVIGATION_PATH = 4,
  OVERLAY_TYPE_OBSTACLES = 5,
  OVERLAY_TYPE_TIMESTAMP = 6,
  OverlayType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  OverlayType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool OverlayType_IsValid(int value);
constexpr OverlayType OverlayType_MIN = OVERLAY_TYPE_UNSPECIFIED;
constexpr OverlayType OverlayType_MAX = OVERLAY_TYPE_TIMESTAMP;
constexpr int OverlayType_ARRAYSIZE = OverlayType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayType_descriptor();
template<typename T>
inline const std::string& OverlayType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OverlayType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OverlayType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OverlayType_descriptor(), enum_t_value);
}
inline bool OverlayType_Parse(
    const std::string& name, OverlayType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OverlayType>(
    OverlayType_descriptor(), name, value);
}
enum LocalizationStatus : int {
  LOCALIZATION_STATUS_UNSPECIFIED = 0,
  LOCALIZATION_STATUS_INITIALIZING = 1,
  LOCALIZATION_STATUS_TRACKING = 2,
  LOCALIZATION_STATUS_LOST = 3,
  LOCALIZATION_STATUS_RECOVERING = 4,
  LOCALIZATION_STATUS_DEGRADED = 5,
  LocalizationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LocalizationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LocalizationStatus_IsValid(int value);
constexpr LocalizationStatus LocalizationStatus_MIN = LOCALIZATION_STATUS_UNSPECIFIED;
constexpr LocalizationStatus LocalizationStatus_MAX = LOCALIZATION_STATUS_DEGRADED;
constexpr int LocalizationStatus_ARRAYSIZE = LocalizationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationStatus_descriptor();
template<typename T>
inline const std::string& LocalizationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalizationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalizationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalizationStatus_descriptor(), enum_t_value);
}
inline bool LocalizationStatus_Parse(
    const std::string& name, LocalizationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalizationStatus>(
    LocalizationStatus_descriptor(), name, value);
}
enum LocalizationMethod : int {
  LOCALIZATION_METHOD_UNSPECIFIED = 0,
  LOCALIZATION_METHOD_AMCL = 1,
  LOCALIZATION_METHOD_EKF = 2,
  LOCALIZATION_METHOD_PARTICLE_FILTER = 3,
  LOCALIZATION_METHOD_VISUAL_SLAM = 4,
  LOCALIZATION_METHOD_GPS_RTK = 5,
  LOCALIZATION_METHOD_HYBRID = 6,
  LocalizationMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LocalizationMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LocalizationMethod_IsValid(int value);
constexpr LocalizationMethod LocalizationMethod_MIN = LOCALIZATION_METHOD_UNSPECIFIED;
constexpr LocalizationMethod LocalizationMethod_MAX = LOCALIZATION_METHOD_HYBRID;
constexpr int LocalizationMethod_ARRAYSIZE = LocalizationMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationMethod_descriptor();
template<typename T>
inline const std::string& LocalizationMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalizationMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalizationMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalizationMethod_descriptor(), enum_t_value);
}
inline bool LocalizationMethod_Parse(
    const std::string& name, LocalizationMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalizationMethod>(
    LocalizationMethod_descriptor(), name, value);
}
enum LocalizationHealth : int {
  LOCALIZATION_HEALTH_UNSPECIFIED = 0,
  LOCALIZATION_HEALTH_GOOD = 1,
  LOCALIZATION_HEALTH_FAIR = 2,
  LOCALIZATION_HEALTH_POOR = 3,
  LOCALIZATION_HEALTH_CRITICAL = 4,
  LocalizationHealth_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LocalizationHealth_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LocalizationHealth_IsValid(int value);
constexpr LocalizationHealth LocalizationHealth_MIN = LOCALIZATION_HEALTH_UNSPECIFIED;
constexpr LocalizationHealth LocalizationHealth_MAX = LOCALIZATION_HEALTH_CRITICAL;
constexpr int LocalizationHealth_ARRAYSIZE = LocalizationHealth_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationHealth_descriptor();
template<typename T>
inline const std::string& LocalizationHealth_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LocalizationHealth>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LocalizationHealth_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LocalizationHealth_descriptor(), enum_t_value);
}
inline bool LocalizationHealth_Parse(
    const std::string& name, LocalizationHealth* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LocalizationHealth>(
    LocalizationHealth_descriptor(), name, value);
}
// ===================================================================

class GetMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.GetMapRequest) */ {
 public:
  inline GetMapRequest() : GetMapRequest(nullptr) {};
  virtual ~GetMapRequest();

  GetMapRequest(const GetMapRequest& from);
  GetMapRequest(GetMapRequest&& from) noexcept
    : GetMapRequest() {
    *this = ::std::move(from);
  }

  inline GetMapRequest& operator=(const GetMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMapRequest& operator=(GetMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMapRequest* internal_default_instance() {
    return reinterpret_cast<const GetMapRequest*>(
               &_GetMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMapRequest& a, GetMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMapRequest* New() const final {
    return CreateMaybeMessage<GetMapRequest>(nullptr);
  }

  GetMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMapRequest& from);
  void MergeFrom(const GetMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.GetMapRequest";
  }
  protected:
  explicit GetMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kFrameIdFieldNumber = 3,
    kMapTypeFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string frame_id = 3;
  bool has_frame_id() const;
  private:
  bool _internal_has_frame_id() const;
  public:
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .agricultural.robot.navigation.v1.MapType map_type = 2;
  void clear_map_type();
  ::agricultural::robot::navigation::v1::MapType map_type() const;
  void set_map_type(::agricultural::robot::navigation::v1::MapType value);
  private:
  ::agricultural::robot::navigation::v1::MapType _internal_map_type() const;
  void _internal_set_map_type(::agricultural::robot::navigation::v1::MapType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.GetMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  int map_type_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class SetMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.SetMapRequest) */ {
 public:
  inline SetMapRequest() : SetMapRequest(nullptr) {};
  virtual ~SetMapRequest();

  SetMapRequest(const SetMapRequest& from);
  SetMapRequest(SetMapRequest&& from) noexcept
    : SetMapRequest() {
    *this = ::std::move(from);
  }

  inline SetMapRequest& operator=(const SetMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMapRequest& operator=(SetMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMapRequest* internal_default_instance() {
    return reinterpret_cast<const SetMapRequest*>(
               &_SetMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetMapRequest& a, SetMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMapRequest* New() const final {
    return CreateMaybeMessage<SetMapRequest>(nullptr);
  }

  SetMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMapRequest& from);
  void MergeFrom(const SetMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.SetMapRequest";
  }
  protected:
  explicit SetMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kMapDataFieldNumber = 2,
    kMetadataFieldNumber = 3,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 2;
  bool has_map_data() const;
  private:
  bool _internal_has_map_data() const;
  public:
  void clear_map_data();
  const ::agricultural::robot::navigation::v1::OccupancyGridMap& map_data() const;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* release_map_data();
  ::agricultural::robot::navigation::v1::OccupancyGridMap* mutable_map_data();
  void set_allocated_map_data(::agricultural::robot::navigation::v1::OccupancyGridMap* map_data);
  private:
  const ::agricultural::robot::navigation::v1::OccupancyGridMap& _internal_map_data() const;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* _internal_mutable_map_data();
  public:
  void unsafe_arena_set_allocated_map_data(
      ::agricultural::robot::navigation::v1::OccupancyGridMap* map_data);
  ::agricultural::robot::navigation::v1::OccupancyGridMap* unsafe_arena_release_map_data();

  // .agricultural.robot.navigation.v1.MapMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::agricultural::robot::navigation::v1::MapMetadata& metadata() const;
  ::agricultural::robot::navigation::v1::MapMetadata* release_metadata();
  ::agricultural::robot::navigation::v1::MapMetadata* mutable_metadata();
  void set_allocated_metadata(::agricultural::robot::navigation::v1::MapMetadata* metadata);
  private:
  const ::agricultural::robot::navigation::v1::MapMetadata& _internal_metadata() const;
  ::agricultural::robot::navigation::v1::MapMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::agricultural::robot::navigation::v1::MapMetadata* metadata);
  ::agricultural::robot::navigation::v1::MapMetadata* unsafe_arena_release_metadata();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.SetMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* map_data_;
  ::agricultural::robot::navigation::v1::MapMetadata* metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class UpdateMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.UpdateMapRequest) */ {
 public:
  inline UpdateMapRequest() : UpdateMapRequest(nullptr) {};
  virtual ~UpdateMapRequest();

  UpdateMapRequest(const UpdateMapRequest& from);
  UpdateMapRequest(UpdateMapRequest&& from) noexcept
    : UpdateMapRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMapRequest& operator=(const UpdateMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMapRequest& operator=(UpdateMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMapRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMapRequest*>(
               &_UpdateMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateMapRequest& a, UpdateMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMapRequest* New() const final {
    return CreateMaybeMessage<UpdateMapRequest>(nullptr);
  }

  UpdateMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMapRequest& from);
  void MergeFrom(const UpdateMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.UpdateMapRequest";
  }
  protected:
  explicit UpdateMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kUpdateFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.MapUpdate update = 2;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::agricultural::robot::navigation::v1::MapUpdate& update() const;
  ::agricultural::robot::navigation::v1::MapUpdate* release_update();
  ::agricultural::robot::navigation::v1::MapUpdate* mutable_update();
  void set_allocated_update(::agricultural::robot::navigation::v1::MapUpdate* update);
  private:
  const ::agricultural::robot::navigation::v1::MapUpdate& _internal_update() const;
  ::agricultural::robot::navigation::v1::MapUpdate* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::agricultural::robot::navigation::v1::MapUpdate* update);
  ::agricultural::robot::navigation::v1::MapUpdate* unsafe_arena_release_update();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.UpdateMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::agricultural::robot::navigation::v1::MapUpdate* update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class ClearMapRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.ClearMapRequest) */ {
 public:
  inline ClearMapRequest() : ClearMapRequest(nullptr) {};
  virtual ~ClearMapRequest();

  ClearMapRequest(const ClearMapRequest& from);
  ClearMapRequest(ClearMapRequest&& from) noexcept
    : ClearMapRequest() {
    *this = ::std::move(from);
  }

  inline ClearMapRequest& operator=(const ClearMapRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearMapRequest& operator=(ClearMapRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClearMapRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClearMapRequest* internal_default_instance() {
    return reinterpret_cast<const ClearMapRequest*>(
               &_ClearMapRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClearMapRequest& a, ClearMapRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearMapRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearMapRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearMapRequest* New() const final {
    return CreateMaybeMessage<ClearMapRequest>(nullptr);
  }

  ClearMapRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearMapRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearMapRequest& from);
  void MergeFrom(const ClearMapRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearMapRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.ClearMapRequest";
  }
  protected:
  explicit ClearMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kMapTypeFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.MapType map_type = 2;
  void clear_map_type();
  ::agricultural::robot::navigation::v1::MapType map_type() const;
  void set_map_type(::agricultural::robot::navigation::v1::MapType value);
  private:
  ::agricultural::robot::navigation::v1::MapType _internal_map_type() const;
  void _internal_set_map_type(::agricultural::robot::navigation::v1::MapType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.ClearMapRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  int map_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class MapResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.MapResponse) */ {
 public:
  inline MapResponse() : MapResponse(nullptr) {};
  virtual ~MapResponse();

  MapResponse(const MapResponse& from);
  MapResponse(MapResponse&& from) noexcept
    : MapResponse() {
    *this = ::std::move(from);
  }

  inline MapResponse& operator=(const MapResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapResponse& operator=(MapResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapResponse* internal_default_instance() {
    return reinterpret_cast<const MapResponse*>(
               &_MapResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MapResponse& a, MapResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MapResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapResponse* New() const final {
    return CreateMaybeMessage<MapResponse>(nullptr);
  }

  MapResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapResponse& from);
  void MergeFrom(const MapResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.MapResponse";
  }
  protected:
  explicit MapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kMapDataFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 3;
  bool has_map_data() const;
  private:
  bool _internal_has_map_data() const;
  public:
  void clear_map_data();
  const ::agricultural::robot::navigation::v1::OccupancyGridMap& map_data() const;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* release_map_data();
  ::agricultural::robot::navigation::v1::OccupancyGridMap* mutable_map_data();
  void set_allocated_map_data(::agricultural::robot::navigation::v1::OccupancyGridMap* map_data);
  private:
  const ::agricultural::robot::navigation::v1::OccupancyGridMap& _internal_map_data() const;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* _internal_mutable_map_data();
  public:
  void unsafe_arena_set_allocated_map_data(
      ::agricultural::robot::navigation::v1::OccupancyGridMap* map_data);
  ::agricultural::robot::navigation::v1::OccupancyGridMap* unsafe_arena_release_map_data();

  // .agricultural.robot.navigation.v1.MapMetadata metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::agricultural::robot::navigation::v1::MapMetadata& metadata() const;
  ::agricultural::robot::navigation::v1::MapMetadata* release_metadata();
  ::agricultural::robot::navigation::v1::MapMetadata* mutable_metadata();
  void set_allocated_metadata(::agricultural::robot::navigation::v1::MapMetadata* metadata);
  private:
  const ::agricultural::robot::navigation::v1::MapMetadata& _internal_metadata() const;
  ::agricultural::robot::navigation::v1::MapMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::agricultural::robot::navigation::v1::MapMetadata* metadata);
  ::agricultural::robot::navigation::v1::MapMetadata* unsafe_arena_release_metadata();

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.MapResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* map_data_;
  ::agricultural::robot::navigation::v1::MapMetadata* metadata_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class OccupancyGridMap PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.OccupancyGridMap) */ {
 public:
  inline OccupancyGridMap() : OccupancyGridMap(nullptr) {};
  virtual ~OccupancyGridMap();

  OccupancyGridMap(const OccupancyGridMap& from);
  OccupancyGridMap(OccupancyGridMap&& from) noexcept
    : OccupancyGridMap() {
    *this = ::std::move(from);
  }

  inline OccupancyGridMap& operator=(const OccupancyGridMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline OccupancyGridMap& operator=(OccupancyGridMap&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OccupancyGridMap& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OccupancyGridMap* internal_default_instance() {
    return reinterpret_cast<const OccupancyGridMap*>(
               &_OccupancyGridMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OccupancyGridMap& a, OccupancyGridMap& b) {
    a.Swap(&b);
  }
  inline void Swap(OccupancyGridMap* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OccupancyGridMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OccupancyGridMap* New() const final {
    return CreateMaybeMessage<OccupancyGridMap>(nullptr);
  }

  OccupancyGridMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OccupancyGridMap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OccupancyGridMap& from);
  void MergeFrom(const OccupancyGridMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupancyGridMap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.OccupancyGridMap";
  }
  protected:
  explicit OccupancyGridMap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kEncodingFieldNumber = 3,
    kInfoFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string encoding = 3;
  void clear_encoding();
  const std::string& encoding() const;
  void set_encoding(const std::string& value);
  void set_encoding(std::string&& value);
  void set_encoding(const char* value);
  void set_encoding(const char* value, size_t size);
  std::string* mutable_encoding();
  std::string* release_encoding();
  void set_allocated_encoding(std::string* encoding);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_encoding();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_encoding(
      std::string* encoding);
  private:
  const std::string& _internal_encoding() const;
  void _internal_set_encoding(const std::string& value);
  std::string* _internal_mutable_encoding();
  public:

  // .agricultural.robot.navigation.v1.MapMetadata info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::agricultural::robot::navigation::v1::MapMetadata& info() const;
  ::agricultural::robot::navigation::v1::MapMetadata* release_info();
  ::agricultural::robot::navigation::v1::MapMetadata* mutable_info();
  void set_allocated_info(::agricultural::robot::navigation::v1::MapMetadata* info);
  private:
  const ::agricultural::robot::navigation::v1::MapMetadata& _internal_info() const;
  ::agricultural::robot::navigation::v1::MapMetadata* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::agricultural::robot::navigation::v1::MapMetadata* info);
  ::agricultural::robot::navigation::v1::MapMetadata* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.OccupancyGridMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr encoding_;
  ::agricultural::robot::navigation::v1::MapMetadata* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class MapMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.MapMetadata) */ {
 public:
  inline MapMetadata() : MapMetadata(nullptr) {};
  virtual ~MapMetadata();

  MapMetadata(const MapMetadata& from);
  MapMetadata(MapMetadata&& from) noexcept
    : MapMetadata() {
    *this = ::std::move(from);
  }

  inline MapMetadata& operator=(const MapMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapMetadata& operator=(MapMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapMetadata* internal_default_instance() {
    return reinterpret_cast<const MapMetadata*>(
               &_MapMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MapMetadata& a, MapMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(MapMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapMetadata* New() const final {
    return CreateMaybeMessage<MapMetadata>(nullptr);
  }

  MapMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapMetadata& from);
  void MergeFrom(const MapMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.MapMetadata";
  }
  protected:
  explicit MapMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameIdFieldNumber = 6,
    kMapLoadTimeFieldNumber = 1,
    kOriginFieldNumber = 5,
    kResolutionFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
    kVersionFieldNumber = 7,
    kSourceFieldNumber = 8,
  };
  // string frame_id = 6;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .google.protobuf.Timestamp map_load_time = 1;
  bool has_map_load_time() const;
  private:
  bool _internal_has_map_load_time() const;
  public:
  void clear_map_load_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& map_load_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_map_load_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_map_load_time();
  void set_allocated_map_load_time(PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_map_load_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_map_load_time();
  public:
  void unsafe_arena_set_allocated_map_load_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_map_load_time();

  // .agricultural.robot.navigation.v1.Pose origin = 5;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::agricultural::robot::navigation::v1::Pose& origin() const;
  ::agricultural::robot::navigation::v1::Pose* release_origin();
  ::agricultural::robot::navigation::v1::Pose* mutable_origin();
  void set_allocated_origin(::agricultural::robot::navigation::v1::Pose* origin);
  private:
  const ::agricultural::robot::navigation::v1::Pose& _internal_origin() const;
  ::agricultural::robot::navigation::v1::Pose* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::agricultural::robot::navigation::v1::Pose* origin);
  ::agricultural::robot::navigation::v1::Pose* unsafe_arena_release_origin();

  // float resolution = 2;
  void clear_resolution();
  float resolution() const;
  void set_resolution(float value);
  private:
  float _internal_resolution() const;
  void _internal_set_resolution(float value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 version = 7;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .agricultural.robot.navigation.v1.MapSource source = 8;
  void clear_source();
  ::agricultural::robot::navigation::v1::MapSource source() const;
  void set_source(::agricultural::robot::navigation::v1::MapSource value);
  private:
  ::agricultural::robot::navigation::v1::MapSource _internal_source() const;
  void _internal_set_source(::agricultural::robot::navigation::v1::MapSource value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.MapMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time_;
  ::agricultural::robot::navigation::v1::Pose* origin_;
  float resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int source_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class MapUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.MapUpdate) */ {
 public:
  inline MapUpdate() : MapUpdate(nullptr) {};
  virtual ~MapUpdate();

  MapUpdate(const MapUpdate& from);
  MapUpdate(MapUpdate&& from) noexcept
    : MapUpdate() {
    *this = ::std::move(from);
  }

  inline MapUpdate& operator=(const MapUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapUpdate& operator=(MapUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MapUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapUpdate* internal_default_instance() {
    return reinterpret_cast<const MapUpdate*>(
               &_MapUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MapUpdate& a, MapUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MapUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MapUpdate* New() const final {
    return CreateMaybeMessage<MapUpdate>(nullptr);
  }

  MapUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MapUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MapUpdate& from);
  void MergeFrom(const MapUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.MapUpdate";
  }
  protected:
  explicit MapUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kUpdateRegionFieldNumber = 1,
    kTimestampFieldNumber = 3,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .agricultural.robot.navigation.v1.Rectangle update_region = 1;
  bool has_update_region() const;
  private:
  bool _internal_has_update_region() const;
  public:
  void clear_update_region();
  const ::agricultural::robot::navigation::v1::Rectangle& update_region() const;
  ::agricultural::robot::navigation::v1::Rectangle* release_update_region();
  ::agricultural::robot::navigation::v1::Rectangle* mutable_update_region();
  void set_allocated_update_region(::agricultural::robot::navigation::v1::Rectangle* update_region);
  private:
  const ::agricultural::robot::navigation::v1::Rectangle& _internal_update_region() const;
  ::agricultural::robot::navigation::v1::Rectangle* _internal_mutable_update_region();
  public:
  void unsafe_arena_set_allocated_update_region(
      ::agricultural::robot::navigation::v1::Rectangle* update_region);
  ::agricultural::robot::navigation::v1::Rectangle* unsafe_arena_release_update_region();

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.MapUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::agricultural::robot::navigation::v1::Rectangle* update_region_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Rectangle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Rectangle) */ {
 public:
  inline Rectangle() : Rectangle(nullptr) {};
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(Rectangle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rectangle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(nullptr);
  }

  Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Rectangle";
  }
  protected:
  explicit Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // .agricultural.robot.navigation.v1.Point2D min = 1;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  const ::agricultural::robot::navigation::v1::Point2D& min() const;
  ::agricultural::robot::navigation::v1::Point2D* release_min();
  ::agricultural::robot::navigation::v1::Point2D* mutable_min();
  void set_allocated_min(::agricultural::robot::navigation::v1::Point2D* min);
  private:
  const ::agricultural::robot::navigation::v1::Point2D& _internal_min() const;
  ::agricultural::robot::navigation::v1::Point2D* _internal_mutable_min();
  public:
  void unsafe_arena_set_allocated_min(
      ::agricultural::robot::navigation::v1::Point2D* min);
  ::agricultural::robot::navigation::v1::Point2D* unsafe_arena_release_min();

  // .agricultural.robot.navigation.v1.Point2D max = 2;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  const ::agricultural::robot::navigation::v1::Point2D& max() const;
  ::agricultural::robot::navigation::v1::Point2D* release_max();
  ::agricultural::robot::navigation::v1::Point2D* mutable_max();
  void set_allocated_max(::agricultural::robot::navigation::v1::Point2D* max);
  private:
  const ::agricultural::robot::navigation::v1::Point2D& _internal_max() const;
  ::agricultural::robot::navigation::v1::Point2D* _internal_mutable_max();
  public:
  void unsafe_arena_set_allocated_max(
      ::agricultural::robot::navigation::v1::Point2D* max);
  ::agricultural::robot::navigation::v1::Point2D* unsafe_arena_release_max();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Rectangle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::agricultural::robot::navigation::v1::Point2D* min_;
  ::agricultural::robot::navigation::v1::Point2D* max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class GetPositionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.GetPositionRequest) */ {
 public:
  inline GetPositionRequest() : GetPositionRequest(nullptr) {};
  virtual ~GetPositionRequest();

  GetPositionRequest(const GetPositionRequest& from);
  GetPositionRequest(GetPositionRequest&& from) noexcept
    : GetPositionRequest() {
    *this = ::std::move(from);
  }

  inline GetPositionRequest& operator=(const GetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPositionRequest& operator=(GetPositionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetPositionRequest*>(
               &_GetPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetPositionRequest& a, GetPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPositionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPositionRequest* New() const final {
    return CreateMaybeMessage<GetPositionRequest>(nullptr);
  }

  GetPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPositionRequest& from);
  void MergeFrom(const GetPositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.GetPositionRequest";
  }
  protected:
  explicit GetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.GetPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class SetPositionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.SetPositionRequest) */ {
 public:
  inline SetPositionRequest() : SetPositionRequest(nullptr) {};
  virtual ~SetPositionRequest();

  SetPositionRequest(const SetPositionRequest& from);
  SetPositionRequest(SetPositionRequest&& from) noexcept
    : SetPositionRequest() {
    *this = ::std::move(from);
  }

  inline SetPositionRequest& operator=(const SetPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetPositionRequest& operator=(SetPositionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetPositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetPositionRequest* internal_default_instance() {
    return reinterpret_cast<const SetPositionRequest*>(
               &_SetPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetPositionRequest& a, SetPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetPositionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetPositionRequest* New() const final {
    return CreateMaybeMessage<SetPositionRequest>(nullptr);
  }

  SetPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetPositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetPositionRequest& from);
  void MergeFrom(const SetPositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetPositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.SetPositionRequest";
  }
  protected:
  explicit SetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kFrameIdFieldNumber = 3,
    kPoseFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string frame_id = 3;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.SetPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class StreamPositionRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.StreamPositionRequest) */ {
 public:
  inline StreamPositionRequest() : StreamPositionRequest(nullptr) {};
  virtual ~StreamPositionRequest();

  StreamPositionRequest(const StreamPositionRequest& from);
  StreamPositionRequest(StreamPositionRequest&& from) noexcept
    : StreamPositionRequest() {
    *this = ::std::move(from);
  }

  inline StreamPositionRequest& operator=(const StreamPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamPositionRequest& operator=(StreamPositionRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamPositionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamPositionRequest* internal_default_instance() {
    return reinterpret_cast<const StreamPositionRequest*>(
               &_StreamPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamPositionRequest& a, StreamPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamPositionRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamPositionRequest* New() const final {
    return CreateMaybeMessage<StreamPositionRequest>(nullptr);
  }

  StreamPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamPositionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamPositionRequest& from);
  void MergeFrom(const StreamPositionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamPositionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.StreamPositionRequest";
  }
  protected:
  explicit StreamPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kFrameIdFieldNumber = 2,
    kFrequencyHzFieldNumber = 3,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string frame_id = 2;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // uint32 frequency_hz = 3;
  void clear_frequency_hz();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_hz() const;
  void set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency_hz() const;
  void _internal_set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.StreamPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class PositionResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.PositionResponse) */ {
 public:
  inline PositionResponse() : PositionResponse(nullptr) {};
  virtual ~PositionResponse();

  PositionResponse(const PositionResponse& from);
  PositionResponse(PositionResponse&& from) noexcept
    : PositionResponse() {
    *this = ::std::move(from);
  }

  inline PositionResponse& operator=(const PositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionResponse& operator=(PositionResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionResponse* internal_default_instance() {
    return reinterpret_cast<const PositionResponse*>(
               &_PositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PositionResponse& a, PositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionResponse* New() const final {
    return CreateMaybeMessage<PositionResponse>(nullptr);
  }

  PositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionResponse& from);
  void MergeFrom(const PositionResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.PositionResponse";
  }
  protected:
  explicit PositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kPoseFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 3;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_pose();

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.PositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* pose_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class PositionUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.PositionUpdate) */ {
 public:
  inline PositionUpdate() : PositionUpdate(nullptr) {};
  virtual ~PositionUpdate();

  PositionUpdate(const PositionUpdate& from);
  PositionUpdate(PositionUpdate&& from) noexcept
    : PositionUpdate() {
    *this = ::std::move(from);
  }

  inline PositionUpdate& operator=(const PositionUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionUpdate& operator=(PositionUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PositionUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PositionUpdate* internal_default_instance() {
    return reinterpret_cast<const PositionUpdate*>(
               &_PositionUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PositionUpdate& a, PositionUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PositionUpdate* New() const final {
    return CreateMaybeMessage<PositionUpdate>(nullptr);
  }

  PositionUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PositionUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PositionUpdate& from);
  void MergeFrom(const PositionUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.PositionUpdate";
  }
  protected:
  explicit PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kFrameIdFieldNumber = 4,
    kPoseFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kQualityFieldNumber = 6,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string frame_id = 4;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_pose();

  // .agricultural.robot.navigation.v1.Twist velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::agricultural::robot::navigation::v1::Twist& velocity() const;
  ::agricultural::robot::navigation::v1::Twist* release_velocity();
  ::agricultural::robot::navigation::v1::Twist* mutable_velocity();
  void set_allocated_velocity(::agricultural::robot::navigation::v1::Twist* velocity);
  private:
  const ::agricultural::robot::navigation::v1::Twist& _internal_velocity() const;
  ::agricultural::robot::navigation::v1::Twist* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::agricultural::robot::navigation::v1::Twist* velocity);
  ::agricultural::robot::navigation::v1::Twist* unsafe_arena_release_velocity();

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .agricultural.robot.navigation.v1.LocalizationQuality quality = 6;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  const ::agricultural::robot::navigation::v1::LocalizationQuality& quality() const;
  ::agricultural::robot::navigation::v1::LocalizationQuality* release_quality();
  ::agricultural::robot::navigation::v1::LocalizationQuality* mutable_quality();
  void set_allocated_quality(::agricultural::robot::navigation::v1::LocalizationQuality* quality);
  private:
  const ::agricultural::robot::navigation::v1::LocalizationQuality& _internal_quality() const;
  ::agricultural::robot::navigation::v1::LocalizationQuality* _internal_mutable_quality();
  public:
  void unsafe_arena_set_allocated_quality(
      ::agricultural::robot::navigation::v1::LocalizationQuality* quality);
  ::agricultural::robot::navigation::v1::LocalizationQuality* unsafe_arena_release_quality();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.PositionUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* pose_;
  ::agricultural::robot::navigation::v1::Twist* velocity_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::agricultural::robot::navigation::v1::LocalizationQuality* quality_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {};
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .agricultural.robot.navigation.v1.Point3D position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::agricultural::robot::navigation::v1::Point3D& position() const;
  ::agricultural::robot::navigation::v1::Point3D* release_position();
  ::agricultural::robot::navigation::v1::Point3D* mutable_position();
  void set_allocated_position(::agricultural::robot::navigation::v1::Point3D* position);
  private:
  const ::agricultural::robot::navigation::v1::Point3D& _internal_position() const;
  ::agricultural::robot::navigation::v1::Point3D* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::agricultural::robot::navigation::v1::Point3D* position);
  ::agricultural::robot::navigation::v1::Point3D* unsafe_arena_release_position();

  // .agricultural.robot.navigation.v1.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::agricultural::robot::navigation::v1::Quaternion& orientation() const;
  ::agricultural::robot::navigation::v1::Quaternion* release_orientation();
  ::agricultural::robot::navigation::v1::Quaternion* mutable_orientation();
  void set_allocated_orientation(::agricultural::robot::navigation::v1::Quaternion* orientation);
  private:
  const ::agricultural::robot::navigation::v1::Quaternion& _internal_orientation() const;
  ::agricultural::robot::navigation::v1::Quaternion* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::agricultural::robot::navigation::v1::Quaternion* orientation);
  ::agricultural::robot::navigation::v1::Quaternion* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::agricultural::robot::navigation::v1::Point3D* position_;
  ::agricultural::robot::navigation::v1::Quaternion* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class PoseWithCovariance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.PoseWithCovariance) */ {
 public:
  inline PoseWithCovariance() : PoseWithCovariance(nullptr) {};
  virtual ~PoseWithCovariance();

  PoseWithCovariance(const PoseWithCovariance& from);
  PoseWithCovariance(PoseWithCovariance&& from) noexcept
    : PoseWithCovariance() {
    *this = ::std::move(from);
  }

  inline PoseWithCovariance& operator=(const PoseWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseWithCovariance& operator=(PoseWithCovariance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PoseWithCovariance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PoseWithCovariance* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovariance*>(
               &_PoseWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PoseWithCovariance& a, PoseWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseWithCovariance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseWithCovariance* New() const final {
    return CreateMaybeMessage<PoseWithCovariance>(nullptr);
  }

  PoseWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseWithCovariance& from);
  void MergeFrom(const PoseWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.PoseWithCovariance";
  }
  protected:
  explicit PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kPoseFieldNumber = 1,
  };
  // repeated double covariance = 2;
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  double _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_covariance() const;
  void _internal_add_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_covariance();
  public:
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .agricultural.robot.navigation.v1.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::agricultural::robot::navigation::v1::Pose& pose() const;
  ::agricultural::robot::navigation::v1::Pose* release_pose();
  ::agricultural::robot::navigation::v1::Pose* mutable_pose();
  void set_allocated_pose(::agricultural::robot::navigation::v1::Pose* pose);
  private:
  const ::agricultural::robot::navigation::v1::Pose& _internal_pose() const;
  ::agricultural::robot::navigation::v1::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::agricultural::robot::navigation::v1::Pose* pose);
  ::agricultural::robot::navigation::v1::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.PoseWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  mutable std::atomic<int> _covariance_cached_byte_size_;
  ::agricultural::robot::navigation::v1::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Point2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Point2D) */ {
 public:
  inline Point2D() : Point2D(nullptr) {};
  virtual ~Point2D();

  Point2D(const Point2D& from);
  Point2D(Point2D&& from) noexcept
    : Point2D() {
    *this = ::std::move(from);
  }

  inline Point2D& operator=(const Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point2D& operator=(Point2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point2D* internal_default_instance() {
    return reinterpret_cast<const Point2D*>(
               &_Point2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Point2D& a, Point2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point2D* New() const final {
    return CreateMaybeMessage<Point2D>(nullptr);
  }

  Point2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point2D& from);
  void MergeFrom(const Point2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Point2D";
  }
  protected:
  explicit Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Point2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Point3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {};
  virtual ~Point3D();

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point3D* New() const final {
    return CreateMaybeMessage<Point3D>(nullptr);
  }

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point3D& from);
  void MergeFrom(const Point3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Point3D";
  }
  protected:
  explicit Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Point3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Quaternion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {};
  virtual ~Quaternion();

  Quaternion(const Quaternion& from);
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Quaternion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Quaternion* New() const final {
    return CreateMaybeMessage<Quaternion>(nullptr);
  }

  Quaternion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Quaternion& from);
  void MergeFrom(const Quaternion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quaternion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Quaternion";
  }
  protected:
  explicit Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kWFieldNumber = 4,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double w = 4;
  void clear_w();
  double w() const;
  void set_w(double value);
  private:
  double _internal_w() const;
  void _internal_set_w(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Quaternion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {};
  virtual ~Twist();

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return CreateMaybeMessage<Twist>(nullptr);
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Twist";
  }
  protected:
  explicit Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLinearFieldNumber = 1,
    kAngularFieldNumber = 2,
  };
  // .agricultural.robot.navigation.v1.Vector3 linear = 1;
  bool has_linear() const;
  private:
  bool _internal_has_linear() const;
  public:
  void clear_linear();
  const ::agricultural::robot::navigation::v1::Vector3& linear() const;
  ::agricultural::robot::navigation::v1::Vector3* release_linear();
  ::agricultural::robot::navigation::v1::Vector3* mutable_linear();
  void set_allocated_linear(::agricultural::robot::navigation::v1::Vector3* linear);
  private:
  const ::agricultural::robot::navigation::v1::Vector3& _internal_linear() const;
  ::agricultural::robot::navigation::v1::Vector3* _internal_mutable_linear();
  public:
  void unsafe_arena_set_allocated_linear(
      ::agricultural::robot::navigation::v1::Vector3* linear);
  ::agricultural::robot::navigation::v1::Vector3* unsafe_arena_release_linear();

  // .agricultural.robot.navigation.v1.Vector3 angular = 2;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::agricultural::robot::navigation::v1::Vector3& angular() const;
  ::agricultural::robot::navigation::v1::Vector3* release_angular();
  ::agricultural::robot::navigation::v1::Vector3* mutable_angular();
  void set_allocated_angular(::agricultural::robot::navigation::v1::Vector3* angular);
  private:
  const ::agricultural::robot::navigation::v1::Vector3& _internal_angular() const;
  ::agricultural::robot::navigation::v1::Vector3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::agricultural::robot::navigation::v1::Vector3* angular);
  ::agricultural::robot::navigation::v1::Vector3* unsafe_arena_release_angular();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::agricultural::robot::navigation::v1::Vector3* linear_;
  ::agricultural::robot::navigation::v1::Vector3* angular_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Vector3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {};
  virtual ~Vector3();

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return CreateMaybeMessage<Vector3>(nullptr);
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class VelocityCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.VelocityCommand) */ {
 public:
  inline VelocityCommand() : VelocityCommand(nullptr) {};
  virtual ~VelocityCommand();

  VelocityCommand(const VelocityCommand& from);
  VelocityCommand(VelocityCommand&& from) noexcept
    : VelocityCommand() {
    *this = ::std::move(from);
  }

  inline VelocityCommand& operator=(const VelocityCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityCommand& operator=(VelocityCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelocityCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelocityCommand* internal_default_instance() {
    return reinterpret_cast<const VelocityCommand*>(
               &_VelocityCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VelocityCommand& a, VelocityCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityCommand* New() const final {
    return CreateMaybeMessage<VelocityCommand>(nullptr);
  }

  VelocityCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelocityCommand& from);
  void MergeFrom(const VelocityCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.VelocityCommand";
  }
  protected:
  explicit VelocityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kCmdVelFieldNumber = 2,
    kTimeoutFieldNumber = 3,
    kJoystickInputFieldNumber = 4,
    kSafetyFieldNumber = 5,
    kControlModeFieldNumber = 6,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.Twist cmd_vel = 2;
  bool has_cmd_vel() const;
  private:
  bool _internal_has_cmd_vel() const;
  public:
  void clear_cmd_vel();
  const ::agricultural::robot::navigation::v1::Twist& cmd_vel() const;
  ::agricultural::robot::navigation::v1::Twist* release_cmd_vel();
  ::agricultural::robot::navigation::v1::Twist* mutable_cmd_vel();
  void set_allocated_cmd_vel(::agricultural::robot::navigation::v1::Twist* cmd_vel);
  private:
  const ::agricultural::robot::navigation::v1::Twist& _internal_cmd_vel() const;
  ::agricultural::robot::navigation::v1::Twist* _internal_mutable_cmd_vel();
  public:
  void unsafe_arena_set_allocated_cmd_vel(
      ::agricultural::robot::navigation::v1::Twist* cmd_vel);
  ::agricultural::robot::navigation::v1::Twist* unsafe_arena_release_cmd_vel();

  // .google.protobuf.Duration timeout = 3;
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      PROTOBUF_NAMESPACE_ID::Duration* timeout);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // .agricultural.robot.navigation.v1.JoystickInput joystick_input = 4;
  bool has_joystick_input() const;
  private:
  bool _internal_has_joystick_input() const;
  public:
  void clear_joystick_input();
  const ::agricultural::robot::navigation::v1::JoystickInput& joystick_input() const;
  ::agricultural::robot::navigation::v1::JoystickInput* release_joystick_input();
  ::agricultural::robot::navigation::v1::JoystickInput* mutable_joystick_input();
  void set_allocated_joystick_input(::agricultural::robot::navigation::v1::JoystickInput* joystick_input);
  private:
  const ::agricultural::robot::navigation::v1::JoystickInput& _internal_joystick_input() const;
  ::agricultural::robot::navigation::v1::JoystickInput* _internal_mutable_joystick_input();
  public:
  void unsafe_arena_set_allocated_joystick_input(
      ::agricultural::robot::navigation::v1::JoystickInput* joystick_input);
  ::agricultural::robot::navigation::v1::JoystickInput* unsafe_arena_release_joystick_input();

  // .agricultural.robot.navigation.v1.SafetyConstraints safety = 5;
  bool has_safety() const;
  private:
  bool _internal_has_safety() const;
  public:
  void clear_safety();
  const ::agricultural::robot::navigation::v1::SafetyConstraints& safety() const;
  ::agricultural::robot::navigation::v1::SafetyConstraints* release_safety();
  ::agricultural::robot::navigation::v1::SafetyConstraints* mutable_safety();
  void set_allocated_safety(::agricultural::robot::navigation::v1::SafetyConstraints* safety);
  private:
  const ::agricultural::robot::navigation::v1::SafetyConstraints& _internal_safety() const;
  ::agricultural::robot::navigation::v1::SafetyConstraints* _internal_mutable_safety();
  public:
  void unsafe_arena_set_allocated_safety(
      ::agricultural::robot::navigation::v1::SafetyConstraints* safety);
  ::agricultural::robot::navigation::v1::SafetyConstraints* unsafe_arena_release_safety();

  // .agricultural.robot.navigation.v1.ControlMode control_mode = 6;
  void clear_control_mode();
  ::agricultural::robot::navigation::v1::ControlMode control_mode() const;
  void set_control_mode(::agricultural::robot::navigation::v1::ControlMode value);
  private:
  ::agricultural::robot::navigation::v1::ControlMode _internal_control_mode() const;
  void _internal_set_control_mode(::agricultural::robot::navigation::v1::ControlMode value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.VelocityCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::agricultural::robot::navigation::v1::Twist* cmd_vel_;
  PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  ::agricultural::robot::navigation::v1::JoystickInput* joystick_input_;
  ::agricultural::robot::navigation::v1::SafetyConstraints* safety_;
  int control_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class JoystickInput PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.JoystickInput) */ {
 public:
  inline JoystickInput() : JoystickInput(nullptr) {};
  virtual ~JoystickInput();

  JoystickInput(const JoystickInput& from);
  JoystickInput(JoystickInput&& from) noexcept
    : JoystickInput() {
    *this = ::std::move(from);
  }

  inline JoystickInput& operator=(const JoystickInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoystickInput& operator=(JoystickInput&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoystickInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoystickInput* internal_default_instance() {
    return reinterpret_cast<const JoystickInput*>(
               &_JoystickInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(JoystickInput& a, JoystickInput& b) {
    a.Swap(&b);
  }
  inline void Swap(JoystickInput* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoystickInput* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoystickInput* New() const final {
    return CreateMaybeMessage<JoystickInput>(nullptr);
  }

  JoystickInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoystickInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoystickInput& from);
  void MergeFrom(const JoystickInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoystickInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.JoystickInput";
  }
  protected:
  explicit JoystickInput(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesFieldNumber = 1,
    kButtonsFieldNumber = 2,
    kControllerIdFieldNumber = 4,
    kTimestampFieldNumber = 3,
  };
  // repeated float axes = 1;
  int axes_size() const;
  private:
  int _internal_axes_size() const;
  public:
  void clear_axes();
  private:
  float _internal_axes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_axes() const;
  void _internal_add_axes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_axes();
  public:
  float axes(int index) const;
  void set_axes(int index, float value);
  void add_axes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      axes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_axes();

  // repeated bool buttons = 2;
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  private:
  bool _internal_buttons(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_buttons() const;
  void _internal_add_buttons(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_buttons();
  public:
  bool buttons(int index) const;
  void set_buttons(int index, bool value);
  void add_buttons(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      buttons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_buttons();

  // string controller_id = 4;
  void clear_controller_id();
  const std::string& controller_id() const;
  void set_controller_id(const std::string& value);
  void set_controller_id(std::string&& value);
  void set_controller_id(const char* value);
  void set_controller_id(const char* value, size_t size);
  std::string* mutable_controller_id();
  std::string* release_controller_id();
  void set_allocated_controller_id(std::string* controller_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_controller_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_controller_id(
      std::string* controller_id);
  private:
  const std::string& _internal_controller_id() const;
  void _internal_set_controller_id(const std::string& value);
  std::string* _internal_mutable_controller_id();
  public:

  // .google.protobuf.Timestamp timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.JoystickInput)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > axes_;
  mutable std::atomic<int> _axes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > buttons_;
  mutable std::atomic<int> _buttons_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class VelocityResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.VelocityResponse) */ {
 public:
  inline VelocityResponse() : VelocityResponse(nullptr) {};
  virtual ~VelocityResponse();

  VelocityResponse(const VelocityResponse& from);
  VelocityResponse(VelocityResponse&& from) noexcept
    : VelocityResponse() {
    *this = ::std::move(from);
  }

  inline VelocityResponse& operator=(const VelocityResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VelocityResponse& operator=(VelocityResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VelocityResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VelocityResponse* internal_default_instance() {
    return reinterpret_cast<const VelocityResponse*>(
               &_VelocityResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VelocityResponse& a, VelocityResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VelocityResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VelocityResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VelocityResponse* New() const final {
    return CreateMaybeMessage<VelocityResponse>(nullptr);
  }

  VelocityResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VelocityResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VelocityResponse& from);
  void MergeFrom(const VelocityResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VelocityResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.VelocityResponse";
  }
  protected:
  explicit VelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSafetyViolationsFieldNumber = 5,
    kMessageFieldNumber = 2,
    kActualVelocityFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated .agricultural.robot.navigation.v1.SafetyViolation safety_violations = 5;
  int safety_violations_size() const;
  private:
  int _internal_safety_violations_size() const;
  public:
  void clear_safety_violations();
  ::agricultural::robot::navigation::v1::SafetyViolation* mutable_safety_violations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::SafetyViolation >*
      mutable_safety_violations();
  private:
  const ::agricultural::robot::navigation::v1::SafetyViolation& _internal_safety_violations(int index) const;
  ::agricultural::robot::navigation::v1::SafetyViolation* _internal_add_safety_violations();
  public:
  const ::agricultural::robot::navigation::v1::SafetyViolation& safety_violations(int index) const;
  ::agricultural::robot::navigation::v1::SafetyViolation* add_safety_violations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::SafetyViolation >&
      safety_violations() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .agricultural.robot.navigation.v1.Twist actual_velocity = 3;
  bool has_actual_velocity() const;
  private:
  bool _internal_has_actual_velocity() const;
  public:
  void clear_actual_velocity();
  const ::agricultural::robot::navigation::v1::Twist& actual_velocity() const;
  ::agricultural::robot::navigation::v1::Twist* release_actual_velocity();
  ::agricultural::robot::navigation::v1::Twist* mutable_actual_velocity();
  void set_allocated_actual_velocity(::agricultural::robot::navigation::v1::Twist* actual_velocity);
  private:
  const ::agricultural::robot::navigation::v1::Twist& _internal_actual_velocity() const;
  ::agricultural::robot::navigation::v1::Twist* _internal_mutable_actual_velocity();
  public:
  void unsafe_arena_set_allocated_actual_velocity(
      ::agricultural::robot::navigation::v1::Twist* actual_velocity);
  ::agricultural::robot::navigation::v1::Twist* unsafe_arena_release_actual_velocity();

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.VelocityResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::SafetyViolation > safety_violations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::agricultural::robot::navigation::v1::Twist* actual_velocity_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class StopMovementRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.StopMovementRequest) */ {
 public:
  inline StopMovementRequest() : StopMovementRequest(nullptr) {};
  virtual ~StopMovementRequest();

  StopMovementRequest(const StopMovementRequest& from);
  StopMovementRequest(StopMovementRequest&& from) noexcept
    : StopMovementRequest() {
    *this = ::std::move(from);
  }

  inline StopMovementRequest& operator=(const StopMovementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopMovementRequest& operator=(StopMovementRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopMovementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopMovementRequest* internal_default_instance() {
    return reinterpret_cast<const StopMovementRequest*>(
               &_StopMovementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(StopMovementRequest& a, StopMovementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopMovementRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopMovementRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopMovementRequest* New() const final {
    return CreateMaybeMessage<StopMovementRequest>(nullptr);
  }

  StopMovementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopMovementRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopMovementRequest& from);
  void MergeFrom(const StopMovementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopMovementRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.StopMovementRequest";
  }
  protected:
  explicit StopMovementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kStopTypeFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.EmergencyStopType stop_type = 2;
  void clear_stop_type();
  ::agricultural::robot::navigation::v1::EmergencyStopType stop_type() const;
  void set_stop_type(::agricultural::robot::navigation::v1::EmergencyStopType value);
  private:
  ::agricultural::robot::navigation::v1::EmergencyStopType _internal_stop_type() const;
  void _internal_set_stop_type(::agricultural::robot::navigation::v1::EmergencyStopType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.StopMovementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  int stop_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class SafetyConstraints PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.SafetyConstraints) */ {
 public:
  inline SafetyConstraints() : SafetyConstraints(nullptr) {};
  virtual ~SafetyConstraints();

  SafetyConstraints(const SafetyConstraints& from);
  SafetyConstraints(SafetyConstraints&& from) noexcept
    : SafetyConstraints() {
    *this = ::std::move(from);
  }

  inline SafetyConstraints& operator=(const SafetyConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyConstraints& operator=(SafetyConstraints&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafetyConstraints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafetyConstraints* internal_default_instance() {
    return reinterpret_cast<const SafetyConstraints*>(
               &_SafetyConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SafetyConstraints& a, SafetyConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(SafetyConstraints* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafetyConstraints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SafetyConstraints* New() const final {
    return CreateMaybeMessage<SafetyConstraints>(nullptr);
  }

  SafetyConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafetyConstraints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafetyConstraints& from);
  void MergeFrom(const SafetyConstraints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.SafetyConstraints";
  }
  protected:
  explicit SafetyConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kForbiddenZonesFieldNumber = 6,
    kMaxLinearVelocityFieldNumber = 1,
    kMaxAngularVelocityFieldNumber = 2,
    kMaxAccelerationFieldNumber = 3,
    kSafetyMarginFieldNumber = 5,
    kObstacleAvoidanceEnabledFieldNumber = 4,
  };
  // repeated string forbidden_zones = 6;
  int forbidden_zones_size() const;
  private:
  int _internal_forbidden_zones_size() const;
  public:
  void clear_forbidden_zones();
  const std::string& forbidden_zones(int index) const;
  std::string* mutable_forbidden_zones(int index);
  void set_forbidden_zones(int index, const std::string& value);
  void set_forbidden_zones(int index, std::string&& value);
  void set_forbidden_zones(int index, const char* value);
  void set_forbidden_zones(int index, const char* value, size_t size);
  std::string* add_forbidden_zones();
  void add_forbidden_zones(const std::string& value);
  void add_forbidden_zones(std::string&& value);
  void add_forbidden_zones(const char* value);
  void add_forbidden_zones(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& forbidden_zones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_forbidden_zones();
  private:
  const std::string& _internal_forbidden_zones(int index) const;
  std::string* _internal_add_forbidden_zones();
  public:

  // double max_linear_velocity = 1;
  void clear_max_linear_velocity();
  double max_linear_velocity() const;
  void set_max_linear_velocity(double value);
  private:
  double _internal_max_linear_velocity() const;
  void _internal_set_max_linear_velocity(double value);
  public:

  // double max_angular_velocity = 2;
  void clear_max_angular_velocity();
  double max_angular_velocity() const;
  void set_max_angular_velocity(double value);
  private:
  double _internal_max_angular_velocity() const;
  void _internal_set_max_angular_velocity(double value);
  public:

  // double max_acceleration = 3;
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // double safety_margin = 5;
  void clear_safety_margin();
  double safety_margin() const;
  void set_safety_margin(double value);
  private:
  double _internal_safety_margin() const;
  void _internal_set_safety_margin(double value);
  public:

  // bool obstacle_avoidance_enabled = 4;
  void clear_obstacle_avoidance_enabled();
  bool obstacle_avoidance_enabled() const;
  void set_obstacle_avoidance_enabled(bool value);
  private:
  bool _internal_obstacle_avoidance_enabled() const;
  void _internal_set_obstacle_avoidance_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.SafetyConstraints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> forbidden_zones_;
  double max_linear_velocity_;
  double max_angular_velocity_;
  double max_acceleration_;
  double safety_margin_;
  bool obstacle_avoidance_enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class SafetyViolation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.SafetyViolation) */ {
 public:
  inline SafetyViolation() : SafetyViolation(nullptr) {};
  virtual ~SafetyViolation();

  SafetyViolation(const SafetyViolation& from);
  SafetyViolation(SafetyViolation&& from) noexcept
    : SafetyViolation() {
    *this = ::std::move(from);
  }

  inline SafetyViolation& operator=(const SafetyViolation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SafetyViolation& operator=(SafetyViolation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SafetyViolation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SafetyViolation* internal_default_instance() {
    return reinterpret_cast<const SafetyViolation*>(
               &_SafetyViolation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(SafetyViolation& a, SafetyViolation& b) {
    a.Swap(&b);
  }
  inline void Swap(SafetyViolation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SafetyViolation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SafetyViolation* New() const final {
    return CreateMaybeMessage<SafetyViolation>(nullptr);
  }

  SafetyViolation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SafetyViolation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SafetyViolation& from);
  void MergeFrom(const SafetyViolation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SafetyViolation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.SafetyViolation";
  }
  protected:
  explicit SafetyViolation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kDetectedAtFieldNumber = 4,
    kSeverityFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp detected_at = 4;
  bool has_detected_at() const;
  private:
  bool _internal_has_detected_at() const;
  public:
  void clear_detected_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& detected_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_detected_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_detected_at();
  void set_allocated_detected_at(PROTOBUF_NAMESPACE_ID::Timestamp* detected_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_detected_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_detected_at();
  public:
  void unsafe_arena_set_allocated_detected_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* detected_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_detected_at();

  // double severity = 3;
  void clear_severity();
  double severity() const;
  void set_severity(double value);
  private:
  double _internal_severity() const;
  void _internal_set_severity(double value);
  public:

  // .agricultural.robot.navigation.v1.SafetyViolationType type = 1;
  void clear_type();
  ::agricultural::robot::navigation::v1::SafetyViolationType type() const;
  void set_type(::agricultural::robot::navigation::v1::SafetyViolationType value);
  private:
  ::agricultural::robot::navigation::v1::SafetyViolationType _internal_type() const;
  void _internal_set_type(::agricultural::robot::navigation::v1::SafetyViolationType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.SafetyViolation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* detected_at_;
  double severity_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationGoal) */ {
 public:
  inline NavigationGoal() : NavigationGoal(nullptr) {};
  virtual ~NavigationGoal();

  NavigationGoal(const NavigationGoal& from);
  NavigationGoal(NavigationGoal&& from) noexcept
    : NavigationGoal() {
    *this = ::std::move(from);
  }

  inline NavigationGoal& operator=(const NavigationGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationGoal& operator=(NavigationGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationGoal* internal_default_instance() {
    return reinterpret_cast<const NavigationGoal*>(
               &_NavigationGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(NavigationGoal& a, NavigationGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationGoal* New() const final {
    return CreateMaybeMessage<NavigationGoal>(nullptr);
  }

  NavigationGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationGoal& from);
  void MergeFrom(const NavigationGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationGoal";
  }
  protected:
  explicit NavigationGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 6,
    kRobotIdFieldNumber = 1,
    kGoalIdFieldNumber = 2,
    kFrameIdFieldNumber = 4,
    kTargetPoseFieldNumber = 3,
    kOptionsFieldNumber = 5,
    kDeadlineFieldNumber = 7,
  };
  // repeated .agricultural.robot.navigation.v1.Waypoint waypoints = 6;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  ::agricultural::robot::navigation::v1::Waypoint* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::Waypoint >*
      mutable_waypoints();
  private:
  const ::agricultural::robot::navigation::v1::Waypoint& _internal_waypoints(int index) const;
  ::agricultural::robot::navigation::v1::Waypoint* _internal_add_waypoints();
  public:
  const ::agricultural::robot::navigation::v1::Waypoint& waypoints(int index) const;
  ::agricultural::robot::navigation::v1::Waypoint* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::Waypoint >&
      waypoints() const;

  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string goal_id = 2;
  void clear_goal_id();
  const std::string& goal_id() const;
  void set_goal_id(const std::string& value);
  void set_goal_id(std::string&& value);
  void set_goal_id(const char* value);
  void set_goal_id(const char* value, size_t size);
  std::string* mutable_goal_id();
  std::string* release_goal_id();
  void set_allocated_goal_id(std::string* goal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_goal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goal_id(
      std::string* goal_id);
  private:
  const std::string& _internal_goal_id() const;
  void _internal_set_goal_id(const std::string& value);
  std::string* _internal_mutable_goal_id();
  public:

  // string frame_id = 4;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .agricultural.robot.navigation.v1.PoseWithCovariance target_pose = 3;
  bool has_target_pose() const;
  private:
  bool _internal_has_target_pose() const;
  public:
  void clear_target_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& target_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_target_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_target_pose();
  void set_allocated_target_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* target_pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_target_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_target_pose();
  public:
  void unsafe_arena_set_allocated_target_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* target_pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_target_pose();

  // .agricultural.robot.navigation.v1.NavigationOptions options = 5;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::agricultural::robot::navigation::v1::NavigationOptions& options() const;
  ::agricultural::robot::navigation::v1::NavigationOptions* release_options();
  ::agricultural::robot::navigation::v1::NavigationOptions* mutable_options();
  void set_allocated_options(::agricultural::robot::navigation::v1::NavigationOptions* options);
  private:
  const ::agricultural::robot::navigation::v1::NavigationOptions& _internal_options() const;
  ::agricultural::robot::navigation::v1::NavigationOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::agricultural::robot::navigation::v1::NavigationOptions* options);
  ::agricultural::robot::navigation::v1::NavigationOptions* unsafe_arena_release_options();

  // .google.protobuf.Timestamp deadline = 7;
  bool has_deadline() const;
  private:
  bool _internal_has_deadline() const;
  public:
  void clear_deadline();
  const PROTOBUF_NAMESPACE_ID::Timestamp& deadline() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_deadline();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deadline();
  void set_allocated_deadline(PROTOBUF_NAMESPACE_ID::Timestamp* deadline);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deadline() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deadline();
  public:
  void unsafe_arena_set_allocated_deadline(
      PROTOBUF_NAMESPACE_ID::Timestamp* deadline);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deadline();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::Waypoint > waypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goal_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* target_pose_;
  ::agricultural::robot::navigation::v1::NavigationOptions* options_;
  PROTOBUF_NAMESPACE_ID::Timestamp* deadline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.TrajectoryCommand) */ {
 public:
  inline TrajectoryCommand() : TrajectoryCommand(nullptr) {};
  virtual ~TrajectoryCommand();

  TrajectoryCommand(const TrajectoryCommand& from);
  TrajectoryCommand(TrajectoryCommand&& from) noexcept
    : TrajectoryCommand() {
    *this = ::std::move(from);
  }

  inline TrajectoryCommand& operator=(const TrajectoryCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryCommand& operator=(TrajectoryCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryCommand* internal_default_instance() {
    return reinterpret_cast<const TrajectoryCommand*>(
               &_TrajectoryCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TrajectoryCommand& a, TrajectoryCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryCommand* New() const final {
    return CreateMaybeMessage<TrajectoryCommand>(nullptr);
  }

  TrajectoryCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryCommand& from);
  void MergeFrom(const TrajectoryCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.TrajectoryCommand";
  }
  protected:
  explicit TrajectoryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kRobotIdFieldNumber = 1,
    kTrajectoryIdFieldNumber = 2,
    kFrameIdFieldNumber = 5,
    kOptionsFieldNumber = 4,
  };
  // repeated .agricultural.robot.navigation.v1.TrajectoryPoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::agricultural::robot::navigation::v1::TrajectoryPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::TrajectoryPoint >*
      mutable_points();
  private:
  const ::agricultural::robot::navigation::v1::TrajectoryPoint& _internal_points(int index) const;
  ::agricultural::robot::navigation::v1::TrajectoryPoint* _internal_add_points();
  public:
  const ::agricultural::robot::navigation::v1::TrajectoryPoint& points(int index) const;
  ::agricultural::robot::navigation::v1::TrajectoryPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::TrajectoryPoint >&
      points() const;

  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string trajectory_id = 2;
  void clear_trajectory_id();
  const std::string& trajectory_id() const;
  void set_trajectory_id(const std::string& value);
  void set_trajectory_id(std::string&& value);
  void set_trajectory_id(const char* value);
  void set_trajectory_id(const char* value, size_t size);
  std::string* mutable_trajectory_id();
  std::string* release_trajectory_id();
  void set_allocated_trajectory_id(std::string* trajectory_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trajectory_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trajectory_id(
      std::string* trajectory_id);
  private:
  const std::string& _internal_trajectory_id() const;
  void _internal_set_trajectory_id(const std::string& value);
  std::string* _internal_mutable_trajectory_id();
  public:

  // string frame_id = 5;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .agricultural.robot.navigation.v1.TrajectoryOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::agricultural::robot::navigation::v1::TrajectoryOptions& options() const;
  ::agricultural::robot::navigation::v1::TrajectoryOptions* release_options();
  ::agricultural::robot::navigation::v1::TrajectoryOptions* mutable_options();
  void set_allocated_options(::agricultural::robot::navigation::v1::TrajectoryOptions* options);
  private:
  const ::agricultural::robot::navigation::v1::TrajectoryOptions& _internal_options() const;
  ::agricultural::robot::navigation::v1::TrajectoryOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::agricultural::robot::navigation::v1::TrajectoryOptions* options);
  ::agricultural::robot::navigation::v1::TrajectoryOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.TrajectoryCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::TrajectoryPoint > points_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trajectory_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::agricultural::robot::navigation::v1::TrajectoryOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Waypoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {};
  virtual ~Waypoint();

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Waypoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Waypoint* New() const final {
    return CreateMaybeMessage<Waypoint>(nullptr);
  }

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Waypoint& from);
  void MergeFrom(const Waypoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Waypoint";
  }
  protected:
  explicit Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionsFieldNumber = 5,
    kWaypointIdFieldNumber = 1,
    kPoseFieldNumber = 2,
    kMaxDurationAtWaypointFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // repeated .agricultural.robot.navigation.v1.WaypointAction actions = 5;
  int actions_size() const;
  private:
  int _internal_actions_size() const;
  public:
  void clear_actions();
  ::agricultural::robot::navigation::v1::WaypointAction* mutable_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::WaypointAction >*
      mutable_actions();
  private:
  const ::agricultural::robot::navigation::v1::WaypointAction& _internal_actions(int index) const;
  ::agricultural::robot::navigation::v1::WaypointAction* _internal_add_actions();
  public:
  const ::agricultural::robot::navigation::v1::WaypointAction& actions(int index) const;
  ::agricultural::robot::navigation::v1::WaypointAction* add_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::WaypointAction >&
      actions() const;

  // string waypoint_id = 1;
  void clear_waypoint_id();
  const std::string& waypoint_id() const;
  void set_waypoint_id(const std::string& value);
  void set_waypoint_id(std::string&& value);
  void set_waypoint_id(const char* value);
  void set_waypoint_id(const char* value, size_t size);
  std::string* mutable_waypoint_id();
  std::string* release_waypoint_id();
  void set_allocated_waypoint_id(std::string* waypoint_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_waypoint_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_waypoint_id(
      std::string* waypoint_id);
  private:
  const std::string& _internal_waypoint_id() const;
  void _internal_set_waypoint_id(const std::string& value);
  std::string* _internal_mutable_waypoint_id();
  public:

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_pose();
  void set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_pose();

  // .google.protobuf.Duration max_duration_at_waypoint = 4;
  bool has_max_duration_at_waypoint() const;
  private:
  bool _internal_has_max_duration_at_waypoint() const;
  public:
  void clear_max_duration_at_waypoint();
  const PROTOBUF_NAMESPACE_ID::Duration& max_duration_at_waypoint() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_max_duration_at_waypoint();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_max_duration_at_waypoint();
  void set_allocated_max_duration_at_waypoint(PROTOBUF_NAMESPACE_ID::Duration* max_duration_at_waypoint);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_max_duration_at_waypoint() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_max_duration_at_waypoint();
  public:
  void unsafe_arena_set_allocated_max_duration_at_waypoint(
      PROTOBUF_NAMESPACE_ID::Duration* max_duration_at_waypoint);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_max_duration_at_waypoint();

  // .agricultural.robot.navigation.v1.WaypointType type = 3;
  void clear_type();
  ::agricultural::robot::navigation::v1::WaypointType type() const;
  void set_type(::agricultural::robot::navigation::v1::WaypointType value);
  private:
  ::agricultural::robot::navigation::v1::WaypointType _internal_type() const;
  void _internal_set_type(::agricultural::robot::navigation::v1::WaypointType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Waypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::WaypointAction > actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr waypoint_id_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* pose_;
  PROTOBUF_NAMESPACE_ID::Duration* max_duration_at_waypoint_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.TrajectoryPoint) */ {
 public:
  inline TrajectoryPoint() : TrajectoryPoint(nullptr) {};
  virtual ~TrajectoryPoint();

  TrajectoryPoint(const TrajectoryPoint& from);
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return CreateMaybeMessage<TrajectoryPoint>(nullptr);
  }

  TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryPoint& from);
  void MergeFrom(const TrajectoryPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.TrajectoryPoint";
  }
  protected:
  explicit TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccelerationsFieldNumber = 4,
    kPoseFieldNumber = 1,
    kVelocityFieldNumber = 2,
    kTimeFromStartFieldNumber = 3,
  };
  // repeated double accelerations = 4;
  int accelerations_size() const;
  private:
  int _internal_accelerations_size() const;
  public:
  void clear_accelerations();
  private:
  double _internal_accelerations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_accelerations() const;
  void _internal_add_accelerations(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_accelerations();
  public:
  double accelerations(int index) const;
  void set_accelerations(int index, double value);
  void add_accelerations(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      accelerations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_accelerations();

  // .agricultural.robot.navigation.v1.Pose pose = 1;
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::agricultural::robot::navigation::v1::Pose& pose() const;
  ::agricultural::robot::navigation::v1::Pose* release_pose();
  ::agricultural::robot::navigation::v1::Pose* mutable_pose();
  void set_allocated_pose(::agricultural::robot::navigation::v1::Pose* pose);
  private:
  const ::agricultural::robot::navigation::v1::Pose& _internal_pose() const;
  ::agricultural::robot::navigation::v1::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::agricultural::robot::navigation::v1::Pose* pose);
  ::agricultural::robot::navigation::v1::Pose* unsafe_arena_release_pose();

  // .agricultural.robot.navigation.v1.Twist velocity = 2;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::agricultural::robot::navigation::v1::Twist& velocity() const;
  ::agricultural::robot::navigation::v1::Twist* release_velocity();
  ::agricultural::robot::navigation::v1::Twist* mutable_velocity();
  void set_allocated_velocity(::agricultural::robot::navigation::v1::Twist* velocity);
  private:
  const ::agricultural::robot::navigation::v1::Twist& _internal_velocity() const;
  ::agricultural::robot::navigation::v1::Twist* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::agricultural::robot::navigation::v1::Twist* velocity);
  ::agricultural::robot::navigation::v1::Twist* unsafe_arena_release_velocity();

  // .google.protobuf.Timestamp time_from_start = 3;
  bool has_time_from_start() const;
  private:
  bool _internal_has_time_from_start() const;
  public:
  void clear_time_from_start();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time_from_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time_from_start();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time_from_start();
  void set_allocated_time_from_start(PROTOBUF_NAMESPACE_ID::Timestamp* time_from_start);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time_from_start() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time_from_start();
  public:
  void unsafe_arena_set_allocated_time_from_start(
      PROTOBUF_NAMESPACE_ID::Timestamp* time_from_start);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time_from_start();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.TrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > accelerations_;
  mutable std::atomic<int> _accelerations_cached_byte_size_;
  ::agricultural::robot::navigation::v1::Pose* pose_;
  ::agricultural::robot::navigation::v1::Twist* velocity_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_from_start_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationOptions) */ {
 public:
  inline NavigationOptions() : NavigationOptions(nullptr) {};
  virtual ~NavigationOptions();

  NavigationOptions(const NavigationOptions& from);
  NavigationOptions(NavigationOptions&& from) noexcept
    : NavigationOptions() {
    *this = ::std::move(from);
  }

  inline NavigationOptions& operator=(const NavigationOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationOptions& operator=(NavigationOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationOptions* internal_default_instance() {
    return reinterpret_cast<const NavigationOptions*>(
               &_NavigationOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(NavigationOptions& a, NavigationOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationOptions* New() const final {
    return CreateMaybeMessage<NavigationOptions>(nullptr);
  }

  NavigationOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationOptions& from);
  void MergeFrom(const NavigationOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationOptions";
  }
  protected:
  explicit NavigationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAvoidZonesFieldNumber = 5,
    kToleranceLinearFieldNumber = 2,
    kPlannerFieldNumber = 1,
    kUseObstacleAvoidanceFieldNumber = 4,
    kToleranceAngularFieldNumber = 3,
    kBehaviorFieldNumber = 6,
    kMaxPlanningTimeMsFieldNumber = 7,
    kMaxRetriesFieldNumber = 8,
  };
  // repeated string avoid_zones = 5;
  int avoid_zones_size() const;
  private:
  int _internal_avoid_zones_size() const;
  public:
  void clear_avoid_zones();
  const std::string& avoid_zones(int index) const;
  std::string* mutable_avoid_zones(int index);
  void set_avoid_zones(int index, const std::string& value);
  void set_avoid_zones(int index, std::string&& value);
  void set_avoid_zones(int index, const char* value);
  void set_avoid_zones(int index, const char* value, size_t size);
  std::string* add_avoid_zones();
  void add_avoid_zones(const std::string& value);
  void add_avoid_zones(std::string&& value);
  void add_avoid_zones(const char* value);
  void add_avoid_zones(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& avoid_zones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_avoid_zones();
  private:
  const std::string& _internal_avoid_zones(int index) const;
  std::string* _internal_add_avoid_zones();
  public:

  // double tolerance_linear = 2;
  void clear_tolerance_linear();
  double tolerance_linear() const;
  void set_tolerance_linear(double value);
  private:
  double _internal_tolerance_linear() const;
  void _internal_set_tolerance_linear(double value);
  public:

  // .agricultural.robot.navigation.v1.PlannerType planner = 1;
  void clear_planner();
  ::agricultural::robot::navigation::v1::PlannerType planner() const;
  void set_planner(::agricultural::robot::navigation::v1::PlannerType value);
  private:
  ::agricultural::robot::navigation::v1::PlannerType _internal_planner() const;
  void _internal_set_planner(::agricultural::robot::navigation::v1::PlannerType value);
  public:

  // bool use_obstacle_avoidance = 4;
  void clear_use_obstacle_avoidance();
  bool use_obstacle_avoidance() const;
  void set_use_obstacle_avoidance(bool value);
  private:
  bool _internal_use_obstacle_avoidance() const;
  void _internal_set_use_obstacle_avoidance(bool value);
  public:

  // double tolerance_angular = 3;
  void clear_tolerance_angular();
  double tolerance_angular() const;
  void set_tolerance_angular(double value);
  private:
  double _internal_tolerance_angular() const;
  void _internal_set_tolerance_angular(double value);
  public:

  // .agricultural.robot.navigation.v1.NavigationBehavior behavior = 6;
  void clear_behavior();
  ::agricultural::robot::navigation::v1::NavigationBehavior behavior() const;
  void set_behavior(::agricultural::robot::navigation::v1::NavigationBehavior value);
  private:
  ::agricultural::robot::navigation::v1::NavigationBehavior _internal_behavior() const;
  void _internal_set_behavior(::agricultural::robot::navigation::v1::NavigationBehavior value);
  public:

  // uint32 max_planning_time_ms = 7;
  void clear_max_planning_time_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_planning_time_ms() const;
  void set_max_planning_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_planning_time_ms() const;
  void _internal_set_max_planning_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_retries = 8;
  void clear_max_retries();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_retries() const;
  void set_max_retries(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_retries() const;
  void _internal_set_max_retries(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> avoid_zones_;
  double tolerance_linear_;
  int planner_;
  bool use_obstacle_avoidance_;
  double tolerance_angular_;
  int behavior_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_planning_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_retries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class TrajectoryOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.TrajectoryOptions) */ {
 public:
  inline TrajectoryOptions() : TrajectoryOptions(nullptr) {};
  virtual ~TrajectoryOptions();

  TrajectoryOptions(const TrajectoryOptions& from);
  TrajectoryOptions(TrajectoryOptions&& from) noexcept
    : TrajectoryOptions() {
    *this = ::std::move(from);
  }

  inline TrajectoryOptions& operator=(const TrajectoryOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryOptions& operator=(TrajectoryOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrajectoryOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrajectoryOptions* internal_default_instance() {
    return reinterpret_cast<const TrajectoryOptions*>(
               &_TrajectoryOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TrajectoryOptions& a, TrajectoryOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryOptions* New() const final {
    return CreateMaybeMessage<TrajectoryOptions>(nullptr);
  }

  TrajectoryOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrajectoryOptions& from);
  void MergeFrom(const TrajectoryOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.TrajectoryOptions";
  }
  protected:
  explicit TrajectoryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityScalingFieldNumber = 2,
    kInterpolatePathFieldNumber = 1,
    kCheckCollisionsFieldNumber = 3,
    kExecutionModeFieldNumber = 4,
  };
  // double velocity_scaling = 2;
  void clear_velocity_scaling();
  double velocity_scaling() const;
  void set_velocity_scaling(double value);
  private:
  double _internal_velocity_scaling() const;
  void _internal_set_velocity_scaling(double value);
  public:

  // bool interpolate_path = 1;
  void clear_interpolate_path();
  bool interpolate_path() const;
  void set_interpolate_path(bool value);
  private:
  bool _internal_interpolate_path() const;
  void _internal_set_interpolate_path(bool value);
  public:

  // bool check_collisions = 3;
  void clear_check_collisions();
  bool check_collisions() const;
  void set_check_collisions(bool value);
  private:
  bool _internal_check_collisions() const;
  void _internal_set_check_collisions(bool value);
  public:

  // .agricultural.robot.navigation.v1.TrajectoryExecutionMode execution_mode = 4;
  void clear_execution_mode();
  ::agricultural::robot::navigation::v1::TrajectoryExecutionMode execution_mode() const;
  void set_execution_mode(::agricultural::robot::navigation::v1::TrajectoryExecutionMode value);
  private:
  ::agricultural::robot::navigation::v1::TrajectoryExecutionMode _internal_execution_mode() const;
  void _internal_set_execution_mode(::agricultural::robot::navigation::v1::TrajectoryExecutionMode value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.TrajectoryOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double velocity_scaling_;
  bool interpolate_path_;
  bool check_collisions_;
  int execution_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class WaypointAction_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WaypointAction_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WaypointAction_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  WaypointAction_ParametersEntry_DoNotUse();
  WaypointAction_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WaypointAction_ParametersEntry_DoNotUse& other);
  static const WaypointAction_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WaypointAction_ParametersEntry_DoNotUse*>(&_WaypointAction_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agricultural.robot.navigation.v1.WaypointAction.ParametersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agricultural.robot.navigation.v1.WaypointAction.ParametersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[33];
  }

  public:
};

// -------------------------------------------------------------------

class WaypointAction PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.WaypointAction) */ {
 public:
  inline WaypointAction() : WaypointAction(nullptr) {};
  virtual ~WaypointAction();

  WaypointAction(const WaypointAction& from);
  WaypointAction(WaypointAction&& from) noexcept
    : WaypointAction() {
    *this = ::std::move(from);
  }

  inline WaypointAction& operator=(const WaypointAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline WaypointAction& operator=(WaypointAction&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WaypointAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WaypointAction* internal_default_instance() {
    return reinterpret_cast<const WaypointAction*>(
               &_WaypointAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(WaypointAction& a, WaypointAction& b) {
    a.Swap(&b);
  }
  inline void Swap(WaypointAction* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WaypointAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WaypointAction* New() const final {
    return CreateMaybeMessage<WaypointAction>(nullptr);
  }

  WaypointAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WaypointAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WaypointAction& from);
  void MergeFrom(const WaypointAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WaypointAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.WaypointAction";
  }
  protected:
  explicit WaypointAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 3,
    kDurationFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // map<string, string> parameters = 3;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameters();

  // .google.protobuf.Duration duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .agricultural.robot.navigation.v1.WaypointActionType type = 1;
  void clear_type();
  ::agricultural::robot::navigation::v1::WaypointActionType type() const;
  void set_type(::agricultural::robot::navigation::v1::WaypointActionType value);
  private:
  ::agricultural::robot::navigation::v1::WaypointActionType _internal_type() const;
  void _internal_set_type(::agricultural::robot::navigation::v1::WaypointActionType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.WaypointAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WaypointAction_ParametersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameters_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CancelGoalRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CancelGoalRequest) */ {
 public:
  inline CancelGoalRequest() : CancelGoalRequest(nullptr) {};
  virtual ~CancelGoalRequest();

  CancelGoalRequest(const CancelGoalRequest& from);
  CancelGoalRequest(CancelGoalRequest&& from) noexcept
    : CancelGoalRequest() {
    *this = ::std::move(from);
  }

  inline CancelGoalRequest& operator=(const CancelGoalRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelGoalRequest& operator=(CancelGoalRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelGoalRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelGoalRequest* internal_default_instance() {
    return reinterpret_cast<const CancelGoalRequest*>(
               &_CancelGoalRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CancelGoalRequest& a, CancelGoalRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelGoalRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelGoalRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelGoalRequest* New() const final {
    return CreateMaybeMessage<CancelGoalRequest>(nullptr);
  }

  CancelGoalRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelGoalRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelGoalRequest& from);
  void MergeFrom(const CancelGoalRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelGoalRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CancelGoalRequest";
  }
  protected:
  explicit CancelGoalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kGoalIdFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string goal_id = 2;
  bool has_goal_id() const;
  private:
  bool _internal_has_goal_id() const;
  public:
  void clear_goal_id();
  const std::string& goal_id() const;
  void set_goal_id(const std::string& value);
  void set_goal_id(std::string&& value);
  void set_goal_id(const char* value);
  void set_goal_id(const char* value, size_t size);
  std::string* mutable_goal_id();
  std::string* release_goal_id();
  void set_allocated_goal_id(std::string* goal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_goal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goal_id(
      std::string* goal_id);
  private:
  const std::string& _internal_goal_id() const;
  void _internal_set_goal_id(const std::string& value);
  std::string* _internal_mutable_goal_id();
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CancelGoalRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goal_id_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class GetNavigationStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.GetNavigationStatusRequest) */ {
 public:
  inline GetNavigationStatusRequest() : GetNavigationStatusRequest(nullptr) {};
  virtual ~GetNavigationStatusRequest();

  GetNavigationStatusRequest(const GetNavigationStatusRequest& from);
  GetNavigationStatusRequest(GetNavigationStatusRequest&& from) noexcept
    : GetNavigationStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetNavigationStatusRequest& operator=(const GetNavigationStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNavigationStatusRequest& operator=(GetNavigationStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNavigationStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNavigationStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetNavigationStatusRequest*>(
               &_GetNavigationStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetNavigationStatusRequest& a, GetNavigationStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNavigationStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNavigationStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNavigationStatusRequest* New() const final {
    return CreateMaybeMessage<GetNavigationStatusRequest>(nullptr);
  }

  GetNavigationStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNavigationStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNavigationStatusRequest& from);
  void MergeFrom(const GetNavigationStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNavigationStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.GetNavigationStatusRequest";
  }
  protected:
  explicit GetNavigationStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class StreamNavigationStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.StreamNavigationStatusRequest) */ {
 public:
  inline StreamNavigationStatusRequest() : StreamNavigationStatusRequest(nullptr) {};
  virtual ~StreamNavigationStatusRequest();

  StreamNavigationStatusRequest(const StreamNavigationStatusRequest& from);
  StreamNavigationStatusRequest(StreamNavigationStatusRequest&& from) noexcept
    : StreamNavigationStatusRequest() {
    *this = ::std::move(from);
  }

  inline StreamNavigationStatusRequest& operator=(const StreamNavigationStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamNavigationStatusRequest& operator=(StreamNavigationStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamNavigationStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamNavigationStatusRequest* internal_default_instance() {
    return reinterpret_cast<const StreamNavigationStatusRequest*>(
               &_StreamNavigationStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(StreamNavigationStatusRequest& a, StreamNavigationStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamNavigationStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamNavigationStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamNavigationStatusRequest* New() const final {
    return CreateMaybeMessage<StreamNavigationStatusRequest>(nullptr);
  }

  StreamNavigationStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamNavigationStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamNavigationStatusRequest& from);
  void MergeFrom(const StreamNavigationStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamNavigationStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.StreamNavigationStatusRequest";
  }
  protected:
  explicit StreamNavigationStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kFrequencyHzFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // uint32 frequency_hz = 2;
  void clear_frequency_hz();
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_hz() const;
  void set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frequency_hz() const;
  void _internal_set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frequency_hz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationResponse) */ {
 public:
  inline NavigationResponse() : NavigationResponse(nullptr) {};
  virtual ~NavigationResponse();

  NavigationResponse(const NavigationResponse& from);
  NavigationResponse(NavigationResponse&& from) noexcept
    : NavigationResponse() {
    *this = ::std::move(from);
  }

  inline NavigationResponse& operator=(const NavigationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationResponse& operator=(NavigationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationResponse* internal_default_instance() {
    return reinterpret_cast<const NavigationResponse*>(
               &_NavigationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(NavigationResponse& a, NavigationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationResponse* New() const final {
    return CreateMaybeMessage<NavigationResponse>(nullptr);
  }

  NavigationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationResponse& from);
  void MergeFrom(const NavigationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationResponse";
  }
  protected:
  explicit NavigationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kGoalIdFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kSuccessFieldNumber = 1,
    kResultFieldNumber = 4,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string goal_id = 3;
  void clear_goal_id();
  const std::string& goal_id() const;
  void set_goal_id(const std::string& value);
  void set_goal_id(std::string&& value);
  void set_goal_id(const char* value);
  void set_goal_id(const char* value, size_t size);
  std::string* mutable_goal_id();
  std::string* release_goal_id();
  void set_allocated_goal_id(std::string* goal_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_goal_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_goal_id(
      std::string* goal_id);
  private:
  const std::string& _internal_goal_id() const;
  void _internal_set_goal_id(const std::string& value);
  std::string* _internal_mutable_goal_id();
  public:

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .agricultural.robot.navigation.v1.NavigationResult result = 4;
  void clear_result();
  ::agricultural::robot::navigation::v1::NavigationResult result() const;
  void set_result(::agricultural::robot::navigation::v1::NavigationResult value);
  private:
  ::agricultural::robot::navigation::v1::NavigationResult _internal_result() const;
  void _internal_set_result(::agricultural::robot::navigation::v1::NavigationResult value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr goal_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationStatusResponse) */ {
 public:
  inline NavigationStatusResponse() : NavigationStatusResponse(nullptr) {};
  virtual ~NavigationStatusResponse();

  NavigationStatusResponse(const NavigationStatusResponse& from);
  NavigationStatusResponse(NavigationStatusResponse&& from) noexcept
    : NavigationStatusResponse() {
    *this = ::std::move(from);
  }

  inline NavigationStatusResponse& operator=(const NavigationStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationStatusResponse& operator=(NavigationStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationStatusResponse* internal_default_instance() {
    return reinterpret_cast<const NavigationStatusResponse*>(
               &_NavigationStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(NavigationStatusResponse& a, NavigationStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationStatusResponse* New() const final {
    return CreateMaybeMessage<NavigationStatusResponse>(nullptr);
  }

  NavigationStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationStatusResponse& from);
  void MergeFrom(const NavigationStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationStatusResponse";
  }
  protected:
  explicit NavigationStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 4,
    kProgressFieldNumber = 2,
    kCurrentGoalFieldNumber = 3,
    kTimestampFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // repeated .agricultural.robot.navigation.v1.NavigationError errors = 4;
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::agricultural::robot::navigation::v1::NavigationError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::NavigationError >*
      mutable_errors();
  private:
  const ::agricultural::robot::navigation::v1::NavigationError& _internal_errors(int index) const;
  ::agricultural::robot::navigation::v1::NavigationError* _internal_add_errors();
  public:
  const ::agricultural::robot::navigation::v1::NavigationError& errors(int index) const;
  ::agricultural::robot::navigation::v1::NavigationError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::NavigationError >&
      errors() const;

  // .agricultural.robot.navigation.v1.NavigationProgress progress = 2;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::agricultural::robot::navigation::v1::NavigationProgress& progress() const;
  ::agricultural::robot::navigation::v1::NavigationProgress* release_progress();
  ::agricultural::robot::navigation::v1::NavigationProgress* mutable_progress();
  void set_allocated_progress(::agricultural::robot::navigation::v1::NavigationProgress* progress);
  private:
  const ::agricultural::robot::navigation::v1::NavigationProgress& _internal_progress() const;
  ::agricultural::robot::navigation::v1::NavigationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::agricultural::robot::navigation::v1::NavigationProgress* progress);
  ::agricultural::robot::navigation::v1::NavigationProgress* unsafe_arena_release_progress();

  // .agricultural.robot.navigation.v1.NavigationGoal current_goal = 3;
  bool has_current_goal() const;
  private:
  bool _internal_has_current_goal() const;
  public:
  void clear_current_goal();
  const ::agricultural::robot::navigation::v1::NavigationGoal& current_goal() const;
  ::agricultural::robot::navigation::v1::NavigationGoal* release_current_goal();
  ::agricultural::robot::navigation::v1::NavigationGoal* mutable_current_goal();
  void set_allocated_current_goal(::agricultural::robot::navigation::v1::NavigationGoal* current_goal);
  private:
  const ::agricultural::robot::navigation::v1::NavigationGoal& _internal_current_goal() const;
  ::agricultural::robot::navigation::v1::NavigationGoal* _internal_mutable_current_goal();
  public:
  void unsafe_arena_set_allocated_current_goal(
      ::agricultural::robot::navigation::v1::NavigationGoal* current_goal);
  ::agricultural::robot::navigation::v1::NavigationGoal* unsafe_arena_release_current_goal();

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .agricultural.robot.navigation.v1.NavigationStatus status = 1;
  void clear_status();
  ::agricultural::robot::navigation::v1::NavigationStatus status() const;
  void set_status(::agricultural::robot::navigation::v1::NavigationStatus value);
  private:
  ::agricultural::robot::navigation::v1::NavigationStatus _internal_status() const;
  void _internal_set_status(::agricultural::robot::navigation::v1::NavigationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::NavigationError > errors_;
  ::agricultural::robot::navigation::v1::NavigationProgress* progress_;
  ::agricultural::robot::navigation::v1::NavigationGoal* current_goal_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int status_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationStatusUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationStatusUpdate) */ {
 public:
  inline NavigationStatusUpdate() : NavigationStatusUpdate(nullptr) {};
  virtual ~NavigationStatusUpdate();

  NavigationStatusUpdate(const NavigationStatusUpdate& from);
  NavigationStatusUpdate(NavigationStatusUpdate&& from) noexcept
    : NavigationStatusUpdate() {
    *this = ::std::move(from);
  }

  inline NavigationStatusUpdate& operator=(const NavigationStatusUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationStatusUpdate& operator=(NavigationStatusUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationStatusUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationStatusUpdate* internal_default_instance() {
    return reinterpret_cast<const NavigationStatusUpdate*>(
               &_NavigationStatusUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(NavigationStatusUpdate& a, NavigationStatusUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationStatusUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationStatusUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationStatusUpdate* New() const final {
    return CreateMaybeMessage<NavigationStatusUpdate>(nullptr);
  }

  NavigationStatusUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationStatusUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationStatusUpdate& from);
  void MergeFrom(const NavigationStatusUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationStatusUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationStatusUpdate";
  }
  protected:
  explicit NavigationStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kProgressFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kErrorFieldNumber = 5,
    kStatusFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.NavigationProgress progress = 3;
  bool has_progress() const;
  private:
  bool _internal_has_progress() const;
  public:
  void clear_progress();
  const ::agricultural::robot::navigation::v1::NavigationProgress& progress() const;
  ::agricultural::robot::navigation::v1::NavigationProgress* release_progress();
  ::agricultural::robot::navigation::v1::NavigationProgress* mutable_progress();
  void set_allocated_progress(::agricultural::robot::navigation::v1::NavigationProgress* progress);
  private:
  const ::agricultural::robot::navigation::v1::NavigationProgress& _internal_progress() const;
  ::agricultural::robot::navigation::v1::NavigationProgress* _internal_mutable_progress();
  public:
  void unsafe_arena_set_allocated_progress(
      ::agricultural::robot::navigation::v1::NavigationProgress* progress);
  ::agricultural::robot::navigation::v1::NavigationProgress* unsafe_arena_release_progress();

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .agricultural.robot.navigation.v1.NavigationError error = 5;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::agricultural::robot::navigation::v1::NavigationError& error() const;
  ::agricultural::robot::navigation::v1::NavigationError* release_error();
  ::agricultural::robot::navigation::v1::NavigationError* mutable_error();
  void set_allocated_error(::agricultural::robot::navigation::v1::NavigationError* error);
  private:
  const ::agricultural::robot::navigation::v1::NavigationError& _internal_error() const;
  ::agricultural::robot::navigation::v1::NavigationError* _internal_mutable_error();
  public:
  void unsafe_arena_set_allocated_error(
      ::agricultural::robot::navigation::v1::NavigationError* error);
  ::agricultural::robot::navigation::v1::NavigationError* unsafe_arena_release_error();

  // .agricultural.robot.navigation.v1.NavigationStatus status = 2;
  void clear_status();
  ::agricultural::robot::navigation::v1::NavigationStatus status() const;
  void set_status(::agricultural::robot::navigation::v1::NavigationStatus value);
  private:
  ::agricultural::robot::navigation::v1::NavigationStatus _internal_status() const;
  void _internal_set_status(::agricultural::robot::navigation::v1::NavigationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationStatusUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::agricultural::robot::navigation::v1::NavigationProgress* progress_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::agricultural::robot::navigation::v1::NavigationError* error_;
  int status_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationProgress PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationProgress) */ {
 public:
  inline NavigationProgress() : NavigationProgress(nullptr) {};
  virtual ~NavigationProgress();

  NavigationProgress(const NavigationProgress& from);
  NavigationProgress(NavigationProgress&& from) noexcept
    : NavigationProgress() {
    *this = ::std::move(from);
  }

  inline NavigationProgress& operator=(const NavigationProgress& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationProgress& operator=(NavigationProgress&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationProgress* internal_default_instance() {
    return reinterpret_cast<const NavigationProgress*>(
               &_NavigationProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(NavigationProgress& a, NavigationProgress& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationProgress* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationProgress* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationProgress* New() const final {
    return CreateMaybeMessage<NavigationProgress>(nullptr);
  }

  NavigationProgress* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationProgress>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationProgress& from);
  void MergeFrom(const NavigationProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationProgress* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationProgress";
  }
  protected:
  explicit NavigationProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeRemainingFieldNumber = 3,
    kTimeElapsedFieldNumber = 4,
    kDistanceRemainingFieldNumber = 1,
    kDistanceTraveledFieldNumber = 2,
    kCurrentWaypointIndexFieldNumber = 5,
    kTotalWaypointsFieldNumber = 6,
    kCompletionPercentageFieldNumber = 7,
  };
  // .google.protobuf.Duration time_remaining = 3;
  bool has_time_remaining() const;
  private:
  bool _internal_has_time_remaining() const;
  public:
  void clear_time_remaining();
  const PROTOBUF_NAMESPACE_ID::Duration& time_remaining() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_time_remaining();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_time_remaining();
  void set_allocated_time_remaining(PROTOBUF_NAMESPACE_ID::Duration* time_remaining);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_time_remaining() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_remaining();
  public:
  void unsafe_arena_set_allocated_time_remaining(
      PROTOBUF_NAMESPACE_ID::Duration* time_remaining);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_remaining();

  // .google.protobuf.Duration time_elapsed = 4;
  bool has_time_elapsed() const;
  private:
  bool _internal_has_time_elapsed() const;
  public:
  void clear_time_elapsed();
  const PROTOBUF_NAMESPACE_ID::Duration& time_elapsed() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_time_elapsed();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_time_elapsed();
  void set_allocated_time_elapsed(PROTOBUF_NAMESPACE_ID::Duration* time_elapsed);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_time_elapsed() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_time_elapsed();
  public:
  void unsafe_arena_set_allocated_time_elapsed(
      PROTOBUF_NAMESPACE_ID::Duration* time_elapsed);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_time_elapsed();

  // double distance_remaining = 1;
  void clear_distance_remaining();
  double distance_remaining() const;
  void set_distance_remaining(double value);
  private:
  double _internal_distance_remaining() const;
  void _internal_set_distance_remaining(double value);
  public:

  // double distance_traveled = 2;
  void clear_distance_traveled();
  double distance_traveled() const;
  void set_distance_traveled(double value);
  private:
  double _internal_distance_traveled() const;
  void _internal_set_distance_traveled(double value);
  public:

  // uint32 current_waypoint_index = 5;
  void clear_current_waypoint_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 current_waypoint_index() const;
  void set_current_waypoint_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current_waypoint_index() const;
  void _internal_set_current_waypoint_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 total_waypoints = 6;
  void clear_total_waypoints();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_waypoints() const;
  void set_total_waypoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_total_waypoints() const;
  void _internal_set_total_waypoints(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double completion_percentage = 7;
  void clear_completion_percentage();
  double completion_percentage() const;
  void set_completion_percentage(double value);
  private:
  double _internal_completion_percentage() const;
  void _internal_set_completion_percentage(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationProgress)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* time_remaining_;
  PROTOBUF_NAMESPACE_ID::Duration* time_elapsed_;
  double distance_remaining_;
  double distance_traveled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_waypoint_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_waypoints_;
  double completion_percentage_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class NavigationError PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.NavigationError) */ {
 public:
  inline NavigationError() : NavigationError(nullptr) {};
  virtual ~NavigationError();

  NavigationError(const NavigationError& from);
  NavigationError(NavigationError&& from) noexcept
    : NavigationError() {
    *this = ::std::move(from);
  }

  inline NavigationError& operator=(const NavigationError& from) {
    CopyFrom(from);
    return *this;
  }
  inline NavigationError& operator=(NavigationError&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NavigationError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavigationError* internal_default_instance() {
    return reinterpret_cast<const NavigationError*>(
               &_NavigationError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(NavigationError& a, NavigationError& b) {
    a.Swap(&b);
  }
  inline void Swap(NavigationError* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NavigationError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NavigationError* New() const final {
    return CreateMaybeMessage<NavigationError>(nullptr);
  }

  NavigationError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NavigationError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NavigationError& from);
  void MergeFrom(const NavigationError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavigationError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.NavigationError";
  }
  protected:
  explicit NavigationError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuggestedActionsFieldNumber = 5,
    kDescriptionFieldNumber = 2,
    kOccurredAtFieldNumber = 3,
    kCodeFieldNumber = 1,
    kRecoverableFieldNumber = 4,
  };
  // repeated string suggested_actions = 5;
  int suggested_actions_size() const;
  private:
  int _internal_suggested_actions_size() const;
  public:
  void clear_suggested_actions();
  const std::string& suggested_actions(int index) const;
  std::string* mutable_suggested_actions(int index);
  void set_suggested_actions(int index, const std::string& value);
  void set_suggested_actions(int index, std::string&& value);
  void set_suggested_actions(int index, const char* value);
  void set_suggested_actions(int index, const char* value, size_t size);
  std::string* add_suggested_actions();
  void add_suggested_actions(const std::string& value);
  void add_suggested_actions(std::string&& value);
  void add_suggested_actions(const char* value);
  void add_suggested_actions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& suggested_actions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_suggested_actions();
  private:
  const std::string& _internal_suggested_actions(int index) const;
  std::string* _internal_add_suggested_actions();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp occurred_at = 3;
  bool has_occurred_at() const;
  private:
  bool _internal_has_occurred_at() const;
  public:
  void clear_occurred_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_occurred_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_occurred_at();
  void set_allocated_occurred_at(PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_occurred_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_occurred_at();
  public:
  void unsafe_arena_set_allocated_occurred_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_occurred_at();

  // .agricultural.robot.navigation.v1.NavigationErrorCode code = 1;
  void clear_code();
  ::agricultural::robot::navigation::v1::NavigationErrorCode code() const;
  void set_code(::agricultural::robot::navigation::v1::NavigationErrorCode value);
  private:
  ::agricultural::robot::navigation::v1::NavigationErrorCode _internal_code() const;
  void _internal_set_code(::agricultural::robot::navigation::v1::NavigationErrorCode value);
  public:

  // bool recoverable = 4;
  void clear_recoverable();
  bool recoverable() const;
  void set_recoverable(bool value);
  private:
  bool _internal_recoverable() const;
  void _internal_set_recoverable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.NavigationError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> suggested_actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at_;
  int code_;
  bool recoverable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class GetCameraInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.GetCameraInfoRequest) */ {
 public:
  inline GetCameraInfoRequest() : GetCameraInfoRequest(nullptr) {};
  virtual ~GetCameraInfoRequest();

  GetCameraInfoRequest(const GetCameraInfoRequest& from);
  GetCameraInfoRequest(GetCameraInfoRequest&& from) noexcept
    : GetCameraInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetCameraInfoRequest& operator=(const GetCameraInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCameraInfoRequest& operator=(GetCameraInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCameraInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCameraInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetCameraInfoRequest*>(
               &_GetCameraInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetCameraInfoRequest& a, GetCameraInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCameraInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCameraInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCameraInfoRequest* New() const final {
    return CreateMaybeMessage<GetCameraInfoRequest>(nullptr);
  }

  GetCameraInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCameraInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCameraInfoRequest& from);
  void MergeFrom(const GetCameraInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCameraInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.GetCameraInfoRequest";
  }
  protected:
  explicit GetCameraInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kCameraIdFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string camera_id = 2;
  void clear_camera_id();
  const std::string& camera_id() const;
  void set_camera_id(const std::string& value);
  void set_camera_id(std::string&& value);
  void set_camera_id(const char* value);
  void set_camera_id(const char* value, size_t size);
  std::string* mutable_camera_id();
  std::string* release_camera_id();
  void set_allocated_camera_id(std::string* camera_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_id(
      std::string* camera_id);
  private:
  const std::string& _internal_camera_id() const;
  void _internal_set_camera_id(const std::string& value);
  std::string* _internal_mutable_camera_id();
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.GetCameraInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class StreamVideoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.StreamVideoRequest) */ {
 public:
  inline StreamVideoRequest() : StreamVideoRequest(nullptr) {};
  virtual ~StreamVideoRequest();

  StreamVideoRequest(const StreamVideoRequest& from);
  StreamVideoRequest(StreamVideoRequest&& from) noexcept
    : StreamVideoRequest() {
    *this = ::std::move(from);
  }

  inline StreamVideoRequest& operator=(const StreamVideoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamVideoRequest& operator=(StreamVideoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamVideoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamVideoRequest* internal_default_instance() {
    return reinterpret_cast<const StreamVideoRequest*>(
               &_StreamVideoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(StreamVideoRequest& a, StreamVideoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamVideoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamVideoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamVideoRequest* New() const final {
    return CreateMaybeMessage<StreamVideoRequest>(nullptr);
  }

  StreamVideoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamVideoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamVideoRequest& from);
  void MergeFrom(const StreamVideoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamVideoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.StreamVideoRequest";
  }
  protected:
  explicit StreamVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kCameraIdFieldNumber = 2,
    kOptionsFieldNumber = 3,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string camera_id = 2;
  void clear_camera_id();
  const std::string& camera_id() const;
  void set_camera_id(const std::string& value);
  void set_camera_id(std::string&& value);
  void set_camera_id(const char* value);
  void set_camera_id(const char* value, size_t size);
  std::string* mutable_camera_id();
  std::string* release_camera_id();
  void set_allocated_camera_id(std::string* camera_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_id(
      std::string* camera_id);
  private:
  const std::string& _internal_camera_id() const;
  void _internal_set_camera_id(const std::string& value);
  std::string* _internal_mutable_camera_id();
  public:

  // .agricultural.robot.navigation.v1.VideoStreamOptions options = 3;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::agricultural::robot::navigation::v1::VideoStreamOptions& options() const;
  ::agricultural::robot::navigation::v1::VideoStreamOptions* release_options();
  ::agricultural::robot::navigation::v1::VideoStreamOptions* mutable_options();
  void set_allocated_options(::agricultural::robot::navigation::v1::VideoStreamOptions* options);
  private:
  const ::agricultural::robot::navigation::v1::VideoStreamOptions& _internal_options() const;
  ::agricultural::robot::navigation::v1::VideoStreamOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::agricultural::robot::navigation::v1::VideoStreamOptions* options);
  ::agricultural::robot::navigation::v1::VideoStreamOptions* unsafe_arena_release_options();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.StreamVideoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_id_;
  ::agricultural::robot::navigation::v1::VideoStreamOptions* options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraControlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraControlRequest) */ {
 public:
  inline CameraControlRequest() : CameraControlRequest(nullptr) {};
  virtual ~CameraControlRequest();

  CameraControlRequest(const CameraControlRequest& from);
  CameraControlRequest(CameraControlRequest&& from) noexcept
    : CameraControlRequest() {
    *this = ::std::move(from);
  }

  inline CameraControlRequest& operator=(const CameraControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraControlRequest& operator=(CameraControlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraControlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraControlRequest* internal_default_instance() {
    return reinterpret_cast<const CameraControlRequest*>(
               &_CameraControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CameraControlRequest& a, CameraControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraControlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraControlRequest* New() const final {
    return CreateMaybeMessage<CameraControlRequest>(nullptr);
  }

  CameraControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraControlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraControlRequest& from);
  void MergeFrom(const CameraControlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraControlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraControlRequest";
  }
  protected:
  explicit CameraControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kCameraIdFieldNumber = 2,
    kCommandFieldNumber = 3,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // string camera_id = 2;
  void clear_camera_id();
  const std::string& camera_id() const;
  void set_camera_id(const std::string& value);
  void set_camera_id(std::string&& value);
  void set_camera_id(const char* value);
  void set_camera_id(const char* value, size_t size);
  std::string* mutable_camera_id();
  std::string* release_camera_id();
  void set_allocated_camera_id(std::string* camera_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_id(
      std::string* camera_id);
  private:
  const std::string& _internal_camera_id() const;
  void _internal_set_camera_id(const std::string& value);
  std::string* _internal_mutable_camera_id();
  public:

  // .agricultural.robot.navigation.v1.CameraControlCommand command = 3;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::agricultural::robot::navigation::v1::CameraControlCommand& command() const;
  ::agricultural::robot::navigation::v1::CameraControlCommand* release_command();
  ::agricultural::robot::navigation::v1::CameraControlCommand* mutable_command();
  void set_allocated_command(::agricultural::robot::navigation::v1::CameraControlCommand* command);
  private:
  const ::agricultural::robot::navigation::v1::CameraControlCommand& _internal_command() const;
  ::agricultural::robot::navigation::v1::CameraControlCommand* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::agricultural::robot::navigation::v1::CameraControlCommand* command);
  ::agricultural::robot::navigation::v1::CameraControlCommand* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_id_;
  ::agricultural::robot::navigation::v1::CameraControlCommand* command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraInfoResponse) */ {
 public:
  inline CameraInfoResponse() : CameraInfoResponse(nullptr) {};
  virtual ~CameraInfoResponse();

  CameraInfoResponse(const CameraInfoResponse& from);
  CameraInfoResponse(CameraInfoResponse&& from) noexcept
    : CameraInfoResponse() {
    *this = ::std::move(from);
  }

  inline CameraInfoResponse& operator=(const CameraInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraInfoResponse& operator=(CameraInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CameraInfoResponse*>(
               &_CameraInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CameraInfoResponse& a, CameraInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraInfoResponse* New() const final {
    return CreateMaybeMessage<CameraInfoResponse>(nullptr);
  }

  CameraInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraInfoResponse& from);
  void MergeFrom(const CameraInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraInfoResponse";
  }
  protected:
  explicit CameraInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamerasFieldNumber = 3,
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // repeated .agricultural.robot.navigation.v1.CameraInfo cameras = 3;
  int cameras_size() const;
  private:
  int _internal_cameras_size() const;
  public:
  void clear_cameras();
  ::agricultural::robot::navigation::v1::CameraInfo* mutable_cameras(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::CameraInfo >*
      mutable_cameras();
  private:
  const ::agricultural::robot::navigation::v1::CameraInfo& _internal_cameras(int index) const;
  ::agricultural::robot::navigation::v1::CameraInfo* _internal_add_cameras();
  public:
  const ::agricultural::robot::navigation::v1::CameraInfo& cameras(int index) const;
  ::agricultural::robot::navigation::v1::CameraInfo* add_cameras();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::CameraInfo >&
      cameras() const;

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::CameraInfo > cameras_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraInfo) */ {
 public:
  inline CameraInfo() : CameraInfo(nullptr) {};
  virtual ~CameraInfo();

  CameraInfo(const CameraInfo& from);
  CameraInfo(CameraInfo&& from) noexcept
    : CameraInfo() {
    *this = ::std::move(from);
  }

  inline CameraInfo& operator=(const CameraInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraInfo& operator=(CameraInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraInfo* internal_default_instance() {
    return reinterpret_cast<const CameraInfo*>(
               &_CameraInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CameraInfo& a, CameraInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraInfo* New() const final {
    return CreateMaybeMessage<CameraInfo>(nullptr);
  }

  CameraInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraInfo& from);
  void MergeFrom(const CameraInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraInfo";
  }
  protected:
  explicit CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedFormatsFieldNumber = 10,
    kCameraIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kFrameIdFieldNumber = 8,
    kResolutionFieldNumber = 4,
    kIntrinsicsFieldNumber = 6,
    kDistortionFieldNumber = 7,
    kFramerateFieldNumber = 5,
    kTypeFieldNumber = 3,
    kStatusFieldNumber = 9,
  };
  // repeated .agricultural.robot.navigation.v1.VideoFormat supported_formats = 10;
  int supported_formats_size() const;
  private:
  int _internal_supported_formats_size() const;
  public:
  void clear_supported_formats();
  private:
  ::agricultural::robot::navigation::v1::VideoFormat _internal_supported_formats(int index) const;
  void _internal_add_supported_formats(::agricultural::robot::navigation::v1::VideoFormat value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_formats();
  public:
  ::agricultural::robot::navigation::v1::VideoFormat supported_formats(int index) const;
  void set_supported_formats(int index, ::agricultural::robot::navigation::v1::VideoFormat value);
  void add_supported_formats(::agricultural::robot::navigation::v1::VideoFormat value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_formats() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_formats();

  // string camera_id = 1;
  void clear_camera_id();
  const std::string& camera_id() const;
  void set_camera_id(const std::string& value);
  void set_camera_id(std::string&& value);
  void set_camera_id(const char* value);
  void set_camera_id(const char* value, size_t size);
  std::string* mutable_camera_id();
  std::string* release_camera_id();
  void set_allocated_camera_id(std::string* camera_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_id(
      std::string* camera_id);
  private:
  const std::string& _internal_camera_id() const;
  void _internal_set_camera_id(const std::string& value);
  std::string* _internal_mutable_camera_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string frame_id = 8;
  void clear_frame_id();
  const std::string& frame_id() const;
  void set_frame_id(const std::string& value);
  void set_frame_id(std::string&& value);
  void set_frame_id(const char* value);
  void set_frame_id(const char* value, size_t size);
  std::string* mutable_frame_id();
  std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_frame_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_frame_id(
      std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .agricultural.robot.navigation.v1.Resolution resolution = 4;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::agricultural::robot::navigation::v1::Resolution& resolution() const;
  ::agricultural::robot::navigation::v1::Resolution* release_resolution();
  ::agricultural::robot::navigation::v1::Resolution* mutable_resolution();
  void set_allocated_resolution(::agricultural::robot::navigation::v1::Resolution* resolution);
  private:
  const ::agricultural::robot::navigation::v1::Resolution& _internal_resolution() const;
  ::agricultural::robot::navigation::v1::Resolution* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::agricultural::robot::navigation::v1::Resolution* resolution);
  ::agricultural::robot::navigation::v1::Resolution* unsafe_arena_release_resolution();

  // .agricultural.robot.navigation.v1.CameraIntrinsics intrinsics = 6;
  bool has_intrinsics() const;
  private:
  bool _internal_has_intrinsics() const;
  public:
  void clear_intrinsics();
  const ::agricultural::robot::navigation::v1::CameraIntrinsics& intrinsics() const;
  ::agricultural::robot::navigation::v1::CameraIntrinsics* release_intrinsics();
  ::agricultural::robot::navigation::v1::CameraIntrinsics* mutable_intrinsics();
  void set_allocated_intrinsics(::agricultural::robot::navigation::v1::CameraIntrinsics* intrinsics);
  private:
  const ::agricultural::robot::navigation::v1::CameraIntrinsics& _internal_intrinsics() const;
  ::agricultural::robot::navigation::v1::CameraIntrinsics* _internal_mutable_intrinsics();
  public:
  void unsafe_arena_set_allocated_intrinsics(
      ::agricultural::robot::navigation::v1::CameraIntrinsics* intrinsics);
  ::agricultural::robot::navigation::v1::CameraIntrinsics* unsafe_arena_release_intrinsics();

  // .agricultural.robot.navigation.v1.CameraDistortion distortion = 7;
  bool has_distortion() const;
  private:
  bool _internal_has_distortion() const;
  public:
  void clear_distortion();
  const ::agricultural::robot::navigation::v1::CameraDistortion& distortion() const;
  ::agricultural::robot::navigation::v1::CameraDistortion* release_distortion();
  ::agricultural::robot::navigation::v1::CameraDistortion* mutable_distortion();
  void set_allocated_distortion(::agricultural::robot::navigation::v1::CameraDistortion* distortion);
  private:
  const ::agricultural::robot::navigation::v1::CameraDistortion& _internal_distortion() const;
  ::agricultural::robot::navigation::v1::CameraDistortion* _internal_mutable_distortion();
  public:
  void unsafe_arena_set_allocated_distortion(
      ::agricultural::robot::navigation::v1::CameraDistortion* distortion);
  ::agricultural::robot::navigation::v1::CameraDistortion* unsafe_arena_release_distortion();

  // double framerate = 5;
  void clear_framerate();
  double framerate() const;
  void set_framerate(double value);
  private:
  double _internal_framerate() const;
  void _internal_set_framerate(double value);
  public:

  // .agricultural.robot.navigation.v1.CameraType type = 3;
  void clear_type();
  ::agricultural::robot::navigation::v1::CameraType type() const;
  void set_type(::agricultural::robot::navigation::v1::CameraType value);
  private:
  ::agricultural::robot::navigation::v1::CameraType _internal_type() const;
  void _internal_set_type(::agricultural::robot::navigation::v1::CameraType value);
  public:

  // .agricultural.robot.navigation.v1.CameraStatus status = 9;
  void clear_status();
  ::agricultural::robot::navigation::v1::CameraStatus status() const;
  void set_status(::agricultural::robot::navigation::v1::CameraStatus value);
  private:
  ::agricultural::robot::navigation::v1::CameraStatus _internal_status() const;
  void _internal_set_status(::agricultural::robot::navigation::v1::CameraStatus value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_formats_;
  mutable std::atomic<int> _supported_formats_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::agricultural::robot::navigation::v1::Resolution* resolution_;
  ::agricultural::robot::navigation::v1::CameraIntrinsics* intrinsics_;
  ::agricultural::robot::navigation::v1::CameraDistortion* distortion_;
  double framerate_;
  int type_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class VideoFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.VideoFrame) */ {
 public:
  inline VideoFrame() : VideoFrame(nullptr) {};
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);
  VideoFrame(VideoFrame&& from) noexcept
    : VideoFrame() {
    *this = ::std::move(from);
  }

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFrame& operator=(VideoFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoFrame* internal_default_instance() {
    return reinterpret_cast<const VideoFrame*>(
               &_VideoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(VideoFrame& a, VideoFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoFrame* New() const final {
    return CreateMaybeMessage<VideoFrame>(nullptr);
  }

  VideoFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.VideoFrame";
  }
  protected:
  explicit VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraIdFieldNumber = 1,
    kImageDataFieldNumber = 2,
    kResolutionFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kMetadataFieldNumber = 7,
    kFrameNumberFieldNumber = 6,
    kFormatFieldNumber = 3,
  };
  // string camera_id = 1;
  void clear_camera_id();
  const std::string& camera_id() const;
  void set_camera_id(const std::string& value);
  void set_camera_id(std::string&& value);
  void set_camera_id(const char* value);
  void set_camera_id(const char* value, size_t size);
  std::string* mutable_camera_id();
  std::string* release_camera_id();
  void set_allocated_camera_id(std::string* camera_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_camera_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_camera_id(
      std::string* camera_id);
  private:
  const std::string& _internal_camera_id() const;
  void _internal_set_camera_id(const std::string& value);
  std::string* _internal_mutable_camera_id();
  public:

  // bytes image_data = 2;
  void clear_image_data();
  const std::string& image_data() const;
  void set_image_data(const std::string& value);
  void set_image_data(std::string&& value);
  void set_image_data(const char* value);
  void set_image_data(const void* value, size_t size);
  std::string* mutable_image_data();
  std::string* release_image_data();
  void set_allocated_image_data(std::string* image_data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_data(
      std::string* image_data);
  private:
  const std::string& _internal_image_data() const;
  void _internal_set_image_data(const std::string& value);
  std::string* _internal_mutable_image_data();
  public:

  // .agricultural.robot.navigation.v1.Resolution resolution = 4;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::agricultural::robot::navigation::v1::Resolution& resolution() const;
  ::agricultural::robot::navigation::v1::Resolution* release_resolution();
  ::agricultural::robot::navigation::v1::Resolution* mutable_resolution();
  void set_allocated_resolution(::agricultural::robot::navigation::v1::Resolution* resolution);
  private:
  const ::agricultural::robot::navigation::v1::Resolution& _internal_resolution() const;
  ::agricultural::robot::navigation::v1::Resolution* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::agricultural::robot::navigation::v1::Resolution* resolution);
  ::agricultural::robot::navigation::v1::Resolution* unsafe_arena_release_resolution();

  // .google.protobuf.Timestamp timestamp = 5;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .agricultural.robot.navigation.v1.FrameMetadata metadata = 7;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::agricultural::robot::navigation::v1::FrameMetadata& metadata() const;
  ::agricultural::robot::navigation::v1::FrameMetadata* release_metadata();
  ::agricultural::robot::navigation::v1::FrameMetadata* mutable_metadata();
  void set_allocated_metadata(::agricultural::robot::navigation::v1::FrameMetadata* metadata);
  private:
  const ::agricultural::robot::navigation::v1::FrameMetadata& _internal_metadata() const;
  ::agricultural::robot::navigation::v1::FrameMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::agricultural::robot::navigation::v1::FrameMetadata* metadata);
  ::agricultural::robot::navigation::v1::FrameMetadata* unsafe_arena_release_metadata();

  // uint64 frame_number = 6;
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_frame_number() const;
  void _internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .agricultural.robot.navigation.v1.VideoFormat format = 3;
  void clear_format();
  ::agricultural::robot::navigation::v1::VideoFormat format() const;
  void set_format(::agricultural::robot::navigation::v1::VideoFormat value);
  private:
  ::agricultural::robot::navigation::v1::VideoFormat _internal_format() const;
  void _internal_set_format(::agricultural::robot::navigation::v1::VideoFormat value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.VideoFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_data_;
  ::agricultural::robot::navigation::v1::Resolution* resolution_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::agricultural::robot::navigation::v1::FrameMetadata* metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_number_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class VideoStreamOptions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.VideoStreamOptions) */ {
 public:
  inline VideoStreamOptions() : VideoStreamOptions(nullptr) {};
  virtual ~VideoStreamOptions();

  VideoStreamOptions(const VideoStreamOptions& from);
  VideoStreamOptions(VideoStreamOptions&& from) noexcept
    : VideoStreamOptions() {
    *this = ::std::move(from);
  }

  inline VideoStreamOptions& operator=(const VideoStreamOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoStreamOptions& operator=(VideoStreamOptions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoStreamOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoStreamOptions* internal_default_instance() {
    return reinterpret_cast<const VideoStreamOptions*>(
               &_VideoStreamOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(VideoStreamOptions& a, VideoStreamOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoStreamOptions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoStreamOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoStreamOptions* New() const final {
    return CreateMaybeMessage<VideoStreamOptions>(nullptr);
  }

  VideoStreamOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoStreamOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoStreamOptions& from);
  void MergeFrom(const VideoStreamOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoStreamOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.VideoStreamOptions";
  }
  protected:
  explicit VideoStreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOverlaysFieldNumber = 6,
    kResolutionFieldNumber = 2,
    kFormatFieldNumber = 1,
    kFramerateFieldNumber = 3,
    kQualityFieldNumber = 4,
    kEnableCompressionFieldNumber = 5,
  };
  // repeated .agricultural.robot.navigation.v1.OverlayType overlays = 6;
  int overlays_size() const;
  private:
  int _internal_overlays_size() const;
  public:
  void clear_overlays();
  private:
  ::agricultural::robot::navigation::v1::OverlayType _internal_overlays(int index) const;
  void _internal_add_overlays(::agricultural::robot::navigation::v1::OverlayType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_overlays();
  public:
  ::agricultural::robot::navigation::v1::OverlayType overlays(int index) const;
  void set_overlays(int index, ::agricultural::robot::navigation::v1::OverlayType value);
  void add_overlays(::agricultural::robot::navigation::v1::OverlayType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& overlays() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_overlays();

  // .agricultural.robot.navigation.v1.Resolution resolution = 2;
  bool has_resolution() const;
  private:
  bool _internal_has_resolution() const;
  public:
  void clear_resolution();
  const ::agricultural::robot::navigation::v1::Resolution& resolution() const;
  ::agricultural::robot::navigation::v1::Resolution* release_resolution();
  ::agricultural::robot::navigation::v1::Resolution* mutable_resolution();
  void set_allocated_resolution(::agricultural::robot::navigation::v1::Resolution* resolution);
  private:
  const ::agricultural::robot::navigation::v1::Resolution& _internal_resolution() const;
  ::agricultural::robot::navigation::v1::Resolution* _internal_mutable_resolution();
  public:
  void unsafe_arena_set_allocated_resolution(
      ::agricultural::robot::navigation::v1::Resolution* resolution);
  ::agricultural::robot::navigation::v1::Resolution* unsafe_arena_release_resolution();

  // .agricultural.robot.navigation.v1.VideoFormat format = 1;
  void clear_format();
  ::agricultural::robot::navigation::v1::VideoFormat format() const;
  void set_format(::agricultural::robot::navigation::v1::VideoFormat value);
  private:
  ::agricultural::robot::navigation::v1::VideoFormat _internal_format() const;
  void _internal_set_format(::agricultural::robot::navigation::v1::VideoFormat value);
  public:

  // uint32 framerate = 3;
  void clear_framerate();
  ::PROTOBUF_NAMESPACE_ID::uint32 framerate() const;
  void set_framerate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_framerate() const;
  void _internal_set_framerate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .agricultural.robot.navigation.v1.VideoQuality quality = 4;
  void clear_quality();
  ::agricultural::robot::navigation::v1::VideoQuality quality() const;
  void set_quality(::agricultural::robot::navigation::v1::VideoQuality value);
  private:
  ::agricultural::robot::navigation::v1::VideoQuality _internal_quality() const;
  void _internal_set_quality(::agricultural::robot::navigation::v1::VideoQuality value);
  public:

  // bool enable_compression = 5;
  void clear_enable_compression();
  bool enable_compression() const;
  void set_enable_compression(bool value);
  private:
  bool _internal_enable_compression() const;
  void _internal_set_enable_compression(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.VideoStreamOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> overlays_;
  mutable std::atomic<int> _overlays_cached_byte_size_;
  ::agricultural::robot::navigation::v1::Resolution* resolution_;
  int format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 framerate_;
  int quality_;
  bool enable_compression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraControlCommand_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CameraControlCommand_ParametersEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CameraControlCommand_ParametersEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  CameraControlCommand_ParametersEntry_DoNotUse();
  CameraControlCommand_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CameraControlCommand_ParametersEntry_DoNotUse& other);
  static const CameraControlCommand_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CameraControlCommand_ParametersEntry_DoNotUse*>(&_CameraControlCommand_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agricultural.robot.navigation.v1.CameraControlCommand.ParametersEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[50];
  }

  public:
};

// -------------------------------------------------------------------

class CameraControlCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraControlCommand) */ {
 public:
  inline CameraControlCommand() : CameraControlCommand(nullptr) {};
  virtual ~CameraControlCommand();

  CameraControlCommand(const CameraControlCommand& from);
  CameraControlCommand(CameraControlCommand&& from) noexcept
    : CameraControlCommand() {
    *this = ::std::move(from);
  }

  inline CameraControlCommand& operator=(const CameraControlCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraControlCommand& operator=(CameraControlCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraControlCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraControlCommand* internal_default_instance() {
    return reinterpret_cast<const CameraControlCommand*>(
               &_CameraControlCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CameraControlCommand& a, CameraControlCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraControlCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraControlCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraControlCommand* New() const final {
    return CreateMaybeMessage<CameraControlCommand>(nullptr);
  }

  CameraControlCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraControlCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraControlCommand& from);
  void MergeFrom(const CameraControlCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraControlCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraControlCommand";
  }
  protected:
  explicit CameraControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // map<string, double> parameters = 2;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_parameters();

  // .agricultural.robot.navigation.v1.CameraControlType type = 1;
  void clear_type();
  ::agricultural::robot::navigation::v1::CameraControlType type() const;
  void set_type(::agricultural::robot::navigation::v1::CameraControlType value);
  private:
  ::agricultural::robot::navigation::v1::CameraControlType _internal_type() const;
  void _internal_set_type(::agricultural::robot::navigation::v1::CameraControlType value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraControlCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CameraControlCommand_ParametersEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > parameters_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraControlResponse_CurrentSettingsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CameraControlResponse_CurrentSettingsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CameraControlResponse_CurrentSettingsEntry_DoNotUse, 
    std::string, double,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  CameraControlResponse_CurrentSettingsEntry_DoNotUse();
  CameraControlResponse_CurrentSettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CameraControlResponse_CurrentSettingsEntry_DoNotUse& other);
  static const CameraControlResponse_CurrentSettingsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CameraControlResponse_CurrentSettingsEntry_DoNotUse*>(&_CameraControlResponse_CurrentSettingsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agricultural.robot.navigation.v1.CameraControlResponse.CurrentSettingsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[52];
  }

  public:
};

// -------------------------------------------------------------------

class CameraControlResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraControlResponse) */ {
 public:
  inline CameraControlResponse() : CameraControlResponse(nullptr) {};
  virtual ~CameraControlResponse();

  CameraControlResponse(const CameraControlResponse& from);
  CameraControlResponse(CameraControlResponse&& from) noexcept
    : CameraControlResponse() {
    *this = ::std::move(from);
  }

  inline CameraControlResponse& operator=(const CameraControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraControlResponse& operator=(CameraControlResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraControlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraControlResponse* internal_default_instance() {
    return reinterpret_cast<const CameraControlResponse*>(
               &_CameraControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CameraControlResponse& a, CameraControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraControlResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraControlResponse* New() const final {
    return CreateMaybeMessage<CameraControlResponse>(nullptr);
  }

  CameraControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraControlResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraControlResponse& from);
  void MergeFrom(const CameraControlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraControlResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraControlResponse";
  }
  protected:
  explicit CameraControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kCurrentSettingsFieldNumber = 3,
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kSuccessFieldNumber = 1,
  };
  // map<string, double> current_settings = 3;
  int current_settings_size() const;
  private:
  int _internal_current_settings_size() const;
  public:
  void clear_current_settings();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      _internal_current_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      _internal_mutable_current_settings();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
      current_settings() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
      mutable_current_settings();

  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CameraControlResponse_CurrentSettingsEntry_DoNotUse,
      std::string, double,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE,
      0 > current_settings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class Resolution PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.Resolution) */ {
 public:
  inline Resolution() : Resolution(nullptr) {};
  virtual ~Resolution();

  Resolution(const Resolution& from);
  Resolution(Resolution&& from) noexcept
    : Resolution() {
    *this = ::std::move(from);
  }

  inline Resolution& operator=(const Resolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Resolution& operator=(Resolution&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Resolution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Resolution* internal_default_instance() {
    return reinterpret_cast<const Resolution*>(
               &_Resolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(Resolution& a, Resolution& b) {
    a.Swap(&b);
  }
  inline void Swap(Resolution* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Resolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Resolution* New() const final {
    return CreateMaybeMessage<Resolution>(nullptr);
  }

  Resolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Resolution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Resolution& from);
  void MergeFrom(const Resolution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Resolution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.Resolution";
  }
  protected:
  explicit Resolution(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // uint32 width = 1;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 2;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.Resolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraIntrinsics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraIntrinsics) */ {
 public:
  inline CameraIntrinsics() : CameraIntrinsics(nullptr) {};
  virtual ~CameraIntrinsics();

  CameraIntrinsics(const CameraIntrinsics& from);
  CameraIntrinsics(CameraIntrinsics&& from) noexcept
    : CameraIntrinsics() {
    *this = ::std::move(from);
  }

  inline CameraIntrinsics& operator=(const CameraIntrinsics& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraIntrinsics& operator=(CameraIntrinsics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraIntrinsics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraIntrinsics* internal_default_instance() {
    return reinterpret_cast<const CameraIntrinsics*>(
               &_CameraIntrinsics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CameraIntrinsics& a, CameraIntrinsics& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraIntrinsics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraIntrinsics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraIntrinsics* New() const final {
    return CreateMaybeMessage<CameraIntrinsics>(nullptr);
  }

  CameraIntrinsics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraIntrinsics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraIntrinsics& from);
  void MergeFrom(const CameraIntrinsics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraIntrinsics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraIntrinsics";
  }
  protected:
  explicit CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraMatrixFieldNumber = 5,
    kFocalLengthXFieldNumber = 1,
    kFocalLengthYFieldNumber = 2,
    kPrincipalPointXFieldNumber = 3,
    kPrincipalPointYFieldNumber = 4,
  };
  // repeated double camera_matrix = 5;
  int camera_matrix_size() const;
  private:
  int _internal_camera_matrix_size() const;
  public:
  void clear_camera_matrix();
  private:
  double _internal_camera_matrix(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_camera_matrix() const;
  void _internal_add_camera_matrix(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_camera_matrix();
  public:
  double camera_matrix(int index) const;
  void set_camera_matrix(int index, double value);
  void add_camera_matrix(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      camera_matrix() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_camera_matrix();

  // double focal_length_x = 1;
  void clear_focal_length_x();
  double focal_length_x() const;
  void set_focal_length_x(double value);
  private:
  double _internal_focal_length_x() const;
  void _internal_set_focal_length_x(double value);
  public:

  // double focal_length_y = 2;
  void clear_focal_length_y();
  double focal_length_y() const;
  void set_focal_length_y(double value);
  private:
  double _internal_focal_length_y() const;
  void _internal_set_focal_length_y(double value);
  public:

  // double principal_point_x = 3;
  void clear_principal_point_x();
  double principal_point_x() const;
  void set_principal_point_x(double value);
  private:
  double _internal_principal_point_x() const;
  void _internal_set_principal_point_x(double value);
  public:

  // double principal_point_y = 4;
  void clear_principal_point_y();
  double principal_point_y() const;
  void set_principal_point_y(double value);
  private:
  double _internal_principal_point_y() const;
  void _internal_set_principal_point_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraIntrinsics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > camera_matrix_;
  mutable std::atomic<int> _camera_matrix_cached_byte_size_;
  double focal_length_x_;
  double focal_length_y_;
  double principal_point_x_;
  double principal_point_y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class CameraDistortion PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.CameraDistortion) */ {
 public:
  inline CameraDistortion() : CameraDistortion(nullptr) {};
  virtual ~CameraDistortion();

  CameraDistortion(const CameraDistortion& from);
  CameraDistortion(CameraDistortion&& from) noexcept
    : CameraDistortion() {
    *this = ::std::move(from);
  }

  inline CameraDistortion& operator=(const CameraDistortion& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraDistortion& operator=(CameraDistortion&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraDistortion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CameraDistortion* internal_default_instance() {
    return reinterpret_cast<const CameraDistortion*>(
               &_CameraDistortion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CameraDistortion& a, CameraDistortion& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraDistortion* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraDistortion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraDistortion* New() const final {
    return CreateMaybeMessage<CameraDistortion>(nullptr);
  }

  CameraDistortion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraDistortion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraDistortion& from);
  void MergeFrom(const CameraDistortion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraDistortion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.CameraDistortion";
  }
  protected:
  explicit CameraDistortion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCoefficientsFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // repeated double coefficients = 2;
  int coefficients_size() const;
  private:
  int _internal_coefficients_size() const;
  public:
  void clear_coefficients();
  private:
  double _internal_coefficients(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_coefficients() const;
  void _internal_add_coefficients(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_coefficients();
  public:
  double coefficients(int index) const;
  void set_coefficients(int index, double value);
  void add_coefficients(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      coefficients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_coefficients();

  // .agricultural.robot.navigation.v1.DistortionModel model = 1;
  void clear_model();
  ::agricultural::robot::navigation::v1::DistortionModel model() const;
  void set_model(::agricultural::robot::navigation::v1::DistortionModel value);
  private:
  ::agricultural::robot::navigation::v1::DistortionModel _internal_model() const;
  void _internal_set_model(::agricultural::robot::navigation::v1::DistortionModel value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.CameraDistortion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > coefficients_;
  mutable std::atomic<int> _coefficients_cached_byte_size_;
  int model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class FrameMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.FrameMetadata) */ {
 public:
  inline FrameMetadata() : FrameMetadata(nullptr) {};
  virtual ~FrameMetadata();

  FrameMetadata(const FrameMetadata& from);
  FrameMetadata(FrameMetadata&& from) noexcept
    : FrameMetadata() {
    *this = ::std::move(from);
  }

  inline FrameMetadata& operator=(const FrameMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameMetadata& operator=(FrameMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameMetadata* internal_default_instance() {
    return reinterpret_cast<const FrameMetadata*>(
               &_FrameMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FrameMetadata& a, FrameMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameMetadata* New() const final {
    return CreateMaybeMessage<FrameMetadata>(nullptr);
  }

  FrameMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameMetadata& from);
  void MergeFrom(const FrameMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.FrameMetadata";
  }
  protected:
  explicit FrameMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureTimeFieldNumber = 4,
    kCameraPoseFieldNumber = 5,
    kExposureTimeFieldNumber = 1,
    kGainFieldNumber = 2,
    kWhiteBalanceFieldNumber = 3,
  };
  // .google.protobuf.Timestamp capture_time = 4;
  bool has_capture_time() const;
  private:
  bool _internal_has_capture_time() const;
  public:
  void clear_capture_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& capture_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_capture_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_capture_time();
  void set_allocated_capture_time(PROTOBUF_NAMESPACE_ID::Timestamp* capture_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_capture_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_capture_time();
  public:
  void unsafe_arena_set_allocated_capture_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* capture_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_capture_time();

  // .agricultural.robot.navigation.v1.Pose camera_pose = 5;
  bool has_camera_pose() const;
  private:
  bool _internal_has_camera_pose() const;
  public:
  void clear_camera_pose();
  const ::agricultural::robot::navigation::v1::Pose& camera_pose() const;
  ::agricultural::robot::navigation::v1::Pose* release_camera_pose();
  ::agricultural::robot::navigation::v1::Pose* mutable_camera_pose();
  void set_allocated_camera_pose(::agricultural::robot::navigation::v1::Pose* camera_pose);
  private:
  const ::agricultural::robot::navigation::v1::Pose& _internal_camera_pose() const;
  ::agricultural::robot::navigation::v1::Pose* _internal_mutable_camera_pose();
  public:
  void unsafe_arena_set_allocated_camera_pose(
      ::agricultural::robot::navigation::v1::Pose* camera_pose);
  ::agricultural::robot::navigation::v1::Pose* unsafe_arena_release_camera_pose();

  // double exposure_time = 1;
  void clear_exposure_time();
  double exposure_time() const;
  void set_exposure_time(double value);
  private:
  double _internal_exposure_time() const;
  void _internal_set_exposure_time(double value);
  public:

  // double gain = 2;
  void clear_gain();
  double gain() const;
  void set_gain(double value);
  private:
  double _internal_gain() const;
  void _internal_set_gain(double value);
  public:

  // double white_balance = 3;
  void clear_white_balance();
  double white_balance() const;
  void set_white_balance(double value);
  private:
  double _internal_white_balance() const;
  void _internal_set_white_balance(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.FrameMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  PROTOBUF_NAMESPACE_ID::Timestamp* capture_time_;
  ::agricultural::robot::navigation::v1::Pose* camera_pose_;
  double exposure_time_;
  double gain_;
  double white_balance_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class GetLocalizationStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.GetLocalizationStatusRequest) */ {
 public:
  inline GetLocalizationStatusRequest() : GetLocalizationStatusRequest(nullptr) {};
  virtual ~GetLocalizationStatusRequest();

  GetLocalizationStatusRequest(const GetLocalizationStatusRequest& from);
  GetLocalizationStatusRequest(GetLocalizationStatusRequest&& from) noexcept
    : GetLocalizationStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetLocalizationStatusRequest& operator=(const GetLocalizationStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLocalizationStatusRequest& operator=(GetLocalizationStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetLocalizationStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetLocalizationStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetLocalizationStatusRequest*>(
               &_GetLocalizationStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetLocalizationStatusRequest& a, GetLocalizationStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetLocalizationStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLocalizationStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetLocalizationStatusRequest* New() const final {
    return CreateMaybeMessage<GetLocalizationStatusRequest>(nullptr);
  }

  GetLocalizationStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetLocalizationStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetLocalizationStatusRequest& from);
  void MergeFrom(const GetLocalizationStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetLocalizationStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.GetLocalizationStatusRequest";
  }
  protected:
  explicit GetLocalizationStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class InitializeLocalizationRequest_ParametersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitializeLocalizationRequest_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<InitializeLocalizationRequest_ParametersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  InitializeLocalizationRequest_ParametersEntry_DoNotUse();
  InitializeLocalizationRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const InitializeLocalizationRequest_ParametersEntry_DoNotUse& other);
  static const InitializeLocalizationRequest_ParametersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const InitializeLocalizationRequest_ParametersEntry_DoNotUse*>(&_InitializeLocalizationRequest_ParametersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agricultural.robot.navigation.v1.InitializeLocalizationRequest.ParametersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "agricultural.robot.navigation.v1.InitializeLocalizationRequest.ParametersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[59];
  }

  public:
};

// -------------------------------------------------------------------

class InitializeLocalizationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.InitializeLocalizationRequest) */ {
 public:
  inline InitializeLocalizationRequest() : InitializeLocalizationRequest(nullptr) {};
  virtual ~InitializeLocalizationRequest();

  InitializeLocalizationRequest(const InitializeLocalizationRequest& from);
  InitializeLocalizationRequest(InitializeLocalizationRequest&& from) noexcept
    : InitializeLocalizationRequest() {
    *this = ::std::move(from);
  }

  inline InitializeLocalizationRequest& operator=(const InitializeLocalizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitializeLocalizationRequest& operator=(InitializeLocalizationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitializeLocalizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitializeLocalizationRequest* internal_default_instance() {
    return reinterpret_cast<const InitializeLocalizationRequest*>(
               &_InitializeLocalizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(InitializeLocalizationRequest& a, InitializeLocalizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitializeLocalizationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitializeLocalizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitializeLocalizationRequest* New() const final {
    return CreateMaybeMessage<InitializeLocalizationRequest>(nullptr);
  }

  InitializeLocalizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitializeLocalizationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitializeLocalizationRequest& from);
  void MergeFrom(const InitializeLocalizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitializeLocalizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.InitializeLocalizationRequest";
  }
  protected:
  explicit InitializeLocalizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 4,
    kRobotIdFieldNumber = 1,
    kInitialPoseFieldNumber = 2,
    kMethodFieldNumber = 3,
  };
  // map<string, string> parameters = 4;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameters();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameters();

  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // .agricultural.robot.navigation.v1.PoseWithCovariance initial_pose = 2;
  bool has_initial_pose() const;
  private:
  bool _internal_has_initial_pose() const;
  public:
  void clear_initial_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& initial_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_initial_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_initial_pose();
  void set_allocated_initial_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* initial_pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_initial_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_initial_pose();
  public:
  void unsafe_arena_set_allocated_initial_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* initial_pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_initial_pose();

  // .agricultural.robot.navigation.v1.LocalizationMethod method = 3;
  void clear_method();
  ::agricultural::robot::navigation::v1::LocalizationMethod method() const;
  void set_method(::agricultural::robot::navigation::v1::LocalizationMethod value);
  private:
  ::agricultural::robot::navigation::v1::LocalizationMethod _internal_method() const;
  void _internal_set_method(::agricultural::robot::navigation::v1::LocalizationMethod value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      InitializeLocalizationRequest_ParametersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* initial_pose_;
  int method_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class ResetLocalizationRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.ResetLocalizationRequest) */ {
 public:
  inline ResetLocalizationRequest() : ResetLocalizationRequest(nullptr) {};
  virtual ~ResetLocalizationRequest();

  ResetLocalizationRequest(const ResetLocalizationRequest& from);
  ResetLocalizationRequest(ResetLocalizationRequest&& from) noexcept
    : ResetLocalizationRequest() {
    *this = ::std::move(from);
  }

  inline ResetLocalizationRequest& operator=(const ResetLocalizationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetLocalizationRequest& operator=(ResetLocalizationRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ResetLocalizationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResetLocalizationRequest* internal_default_instance() {
    return reinterpret_cast<const ResetLocalizationRequest*>(
               &_ResetLocalizationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ResetLocalizationRequest& a, ResetLocalizationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetLocalizationRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetLocalizationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResetLocalizationRequest* New() const final {
    return CreateMaybeMessage<ResetLocalizationRequest>(nullptr);
  }

  ResetLocalizationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResetLocalizationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ResetLocalizationRequest& from);
  void MergeFrom(const ResetLocalizationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResetLocalizationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.ResetLocalizationRequest";
  }
  protected:
  explicit ResetLocalizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotIdFieldNumber = 1,
    kClearMapFieldNumber = 2,
  };
  // string robot_id = 1;
  void clear_robot_id();
  const std::string& robot_id() const;
  void set_robot_id(const std::string& value);
  void set_robot_id(std::string&& value);
  void set_robot_id(const char* value);
  void set_robot_id(const char* value, size_t size);
  std::string* mutable_robot_id();
  std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_robot_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_robot_id(
      std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  // bool clear_map = 2;
  void clear_clear_map();
  bool clear_map() const;
  void set_clear_map(bool value);
  private:
  bool _internal_clear_map() const;
  void _internal_set_clear_map(bool value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.ResetLocalizationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  bool clear_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class LocalizationStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.LocalizationStatusResponse) */ {
 public:
  inline LocalizationStatusResponse() : LocalizationStatusResponse(nullptr) {};
  virtual ~LocalizationStatusResponse();

  LocalizationStatusResponse(const LocalizationStatusResponse& from);
  LocalizationStatusResponse(LocalizationStatusResponse&& from) noexcept
    : LocalizationStatusResponse() {
    *this = ::std::move(from);
  }

  inline LocalizationStatusResponse& operator=(const LocalizationStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationStatusResponse& operator=(LocalizationStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalizationStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationStatusResponse* internal_default_instance() {
    return reinterpret_cast<const LocalizationStatusResponse*>(
               &_LocalizationStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(LocalizationStatusResponse& a, LocalizationStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalizationStatusResponse* New() const final {
    return CreateMaybeMessage<LocalizationStatusResponse>(nullptr);
  }

  LocalizationStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalizationStatusResponse& from);
  void MergeFrom(const LocalizationStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.LocalizationStatusResponse";
  }
  protected:
  explicit LocalizationStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQualityFieldNumber = 2,
    kCurrentPoseFieldNumber = 3,
    kMetricsFieldNumber = 5,
    kTimestampFieldNumber = 6,
    kStatusFieldNumber = 1,
    kMethodFieldNumber = 4,
  };
  // .agricultural.robot.navigation.v1.LocalizationQuality quality = 2;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  const ::agricultural::robot::navigation::v1::LocalizationQuality& quality() const;
  ::agricultural::robot::navigation::v1::LocalizationQuality* release_quality();
  ::agricultural::robot::navigation::v1::LocalizationQuality* mutable_quality();
  void set_allocated_quality(::agricultural::robot::navigation::v1::LocalizationQuality* quality);
  private:
  const ::agricultural::robot::navigation::v1::LocalizationQuality& _internal_quality() const;
  ::agricultural::robot::navigation::v1::LocalizationQuality* _internal_mutable_quality();
  public:
  void unsafe_arena_set_allocated_quality(
      ::agricultural::robot::navigation::v1::LocalizationQuality* quality);
  ::agricultural::robot::navigation::v1::LocalizationQuality* unsafe_arena_release_quality();

  // .agricultural.robot.navigation.v1.PoseWithCovariance current_pose = 3;
  bool has_current_pose() const;
  private:
  bool _internal_has_current_pose() const;
  public:
  void clear_current_pose();
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& current_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* release_current_pose();
  ::agricultural::robot::navigation::v1::PoseWithCovariance* mutable_current_pose();
  void set_allocated_current_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* current_pose);
  private:
  const ::agricultural::robot::navigation::v1::PoseWithCovariance& _internal_current_pose() const;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* _internal_mutable_current_pose();
  public:
  void unsafe_arena_set_allocated_current_pose(
      ::agricultural::robot::navigation::v1::PoseWithCovariance* current_pose);
  ::agricultural::robot::navigation::v1::PoseWithCovariance* unsafe_arena_release_current_pose();

  // .agricultural.robot.navigation.v1.LocalizationMetrics metrics = 5;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::agricultural::robot::navigation::v1::LocalizationMetrics& metrics() const;
  ::agricultural::robot::navigation::v1::LocalizationMetrics* release_metrics();
  ::agricultural::robot::navigation::v1::LocalizationMetrics* mutable_metrics();
  void set_allocated_metrics(::agricultural::robot::navigation::v1::LocalizationMetrics* metrics);
  private:
  const ::agricultural::robot::navigation::v1::LocalizationMetrics& _internal_metrics() const;
  ::agricultural::robot::navigation::v1::LocalizationMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::agricultural::robot::navigation::v1::LocalizationMetrics* metrics);
  ::agricultural::robot::navigation::v1::LocalizationMetrics* unsafe_arena_release_metrics();

  // .google.protobuf.Timestamp timestamp = 6;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .agricultural.robot.navigation.v1.LocalizationStatus status = 1;
  void clear_status();
  ::agricultural::robot::navigation::v1::LocalizationStatus status() const;
  void set_status(::agricultural::robot::navigation::v1::LocalizationStatus value);
  private:
  ::agricultural::robot::navigation::v1::LocalizationStatus _internal_status() const;
  void _internal_set_status(::agricultural::robot::navigation::v1::LocalizationStatus value);
  public:

  // .agricultural.robot.navigation.v1.LocalizationMethod method = 4;
  void clear_method();
  ::agricultural::robot::navigation::v1::LocalizationMethod method() const;
  void set_method(::agricultural::robot::navigation::v1::LocalizationMethod value);
  private:
  ::agricultural::robot::navigation::v1::LocalizationMethod _internal_method() const;
  void _internal_set_method(::agricultural::robot::navigation::v1::LocalizationMethod value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.LocalizationStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::agricultural::robot::navigation::v1::LocalizationQuality* quality_;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* current_pose_;
  ::agricultural::robot::navigation::v1::LocalizationMetrics* metrics_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int status_;
  int method_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class LocalizationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.LocalizationResponse) */ {
 public:
  inline LocalizationResponse() : LocalizationResponse(nullptr) {};
  virtual ~LocalizationResponse();

  LocalizationResponse(const LocalizationResponse& from);
  LocalizationResponse(LocalizationResponse&& from) noexcept
    : LocalizationResponse() {
    *this = ::std::move(from);
  }

  inline LocalizationResponse& operator=(const LocalizationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationResponse& operator=(LocalizationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalizationResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationResponse* internal_default_instance() {
    return reinterpret_cast<const LocalizationResponse*>(
               &_LocalizationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(LocalizationResponse& a, LocalizationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalizationResponse* New() const final {
    return CreateMaybeMessage<LocalizationResponse>(nullptr);
  }

  LocalizationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalizationResponse& from);
  void MergeFrom(const LocalizationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.LocalizationResponse";
  }
  protected:
  explicit LocalizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kTimestampFieldNumber = 4,
    kSuccessFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .google.protobuf.Timestamp timestamp = 4;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .agricultural.robot.navigation.v1.LocalizationStatus status = 3;
  void clear_status();
  ::agricultural::robot::navigation::v1::LocalizationStatus status() const;
  void set_status(::agricultural::robot::navigation::v1::LocalizationStatus value);
  private:
  ::agricultural::robot::navigation::v1::LocalizationStatus _internal_status() const;
  void _internal_set_status(::agricultural::robot::navigation::v1::LocalizationStatus value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.LocalizationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  bool success_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class LocalizationQuality PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.LocalizationQuality) */ {
 public:
  inline LocalizationQuality() : LocalizationQuality(nullptr) {};
  virtual ~LocalizationQuality();

  LocalizationQuality(const LocalizationQuality& from);
  LocalizationQuality(LocalizationQuality&& from) noexcept
    : LocalizationQuality() {
    *this = ::std::move(from);
  }

  inline LocalizationQuality& operator=(const LocalizationQuality& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationQuality& operator=(LocalizationQuality&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalizationQuality& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationQuality* internal_default_instance() {
    return reinterpret_cast<const LocalizationQuality*>(
               &_LocalizationQuality_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(LocalizationQuality& a, LocalizationQuality& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationQuality* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationQuality* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalizationQuality* New() const final {
    return CreateMaybeMessage<LocalizationQuality>(nullptr);
  }

  LocalizationQuality* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationQuality>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalizationQuality& from);
  void MergeFrom(const LocalizationQuality& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationQuality* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.LocalizationQuality";
  }
  protected:
  explicit LocalizationQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfidenceFieldNumber = 1,
    kPositionUncertaintyFieldNumber = 2,
    kOrientationUncertaintyFieldNumber = 3,
    kDriftEstimateFieldNumber = 5,
    kMatchedFeaturesFieldNumber = 4,
    kHealthFieldNumber = 6,
  };
  // double confidence = 1;
  void clear_confidence();
  double confidence() const;
  void set_confidence(double value);
  private:
  double _internal_confidence() const;
  void _internal_set_confidence(double value);
  public:

  // double position_uncertainty = 2;
  void clear_position_uncertainty();
  double position_uncertainty() const;
  void set_position_uncertainty(double value);
  private:
  double _internal_position_uncertainty() const;
  void _internal_set_position_uncertainty(double value);
  public:

  // double orientation_uncertainty = 3;
  void clear_orientation_uncertainty();
  double orientation_uncertainty() const;
  void set_orientation_uncertainty(double value);
  private:
  double _internal_orientation_uncertainty() const;
  void _internal_set_orientation_uncertainty(double value);
  public:

  // double drift_estimate = 5;
  void clear_drift_estimate();
  double drift_estimate() const;
  void set_drift_estimate(double value);
  private:
  double _internal_drift_estimate() const;
  void _internal_set_drift_estimate(double value);
  public:

  // uint32 matched_features = 4;
  void clear_matched_features();
  ::PROTOBUF_NAMESPACE_ID::uint32 matched_features() const;
  void set_matched_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_matched_features() const;
  void _internal_set_matched_features(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .agricultural.robot.navigation.v1.LocalizationHealth health = 6;
  void clear_health();
  ::agricultural::robot::navigation::v1::LocalizationHealth health() const;
  void set_health(::agricultural::robot::navigation::v1::LocalizationHealth value);
  private:
  ::agricultural::robot::navigation::v1::LocalizationHealth _internal_health() const;
  void _internal_set_health(::agricultural::robot::navigation::v1::LocalizationHealth value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.LocalizationQuality)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double confidence_;
  double position_uncertainty_;
  double orientation_uncertainty_;
  double drift_estimate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 matched_features_;
  int health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// -------------------------------------------------------------------

class LocalizationMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:agricultural.robot.navigation.v1.LocalizationMetrics) */ {
 public:
  inline LocalizationMetrics() : LocalizationMetrics(nullptr) {};
  virtual ~LocalizationMetrics();

  LocalizationMetrics(const LocalizationMetrics& from);
  LocalizationMetrics(LocalizationMetrics&& from) noexcept
    : LocalizationMetrics() {
    *this = ::std::move(from);
  }

  inline LocalizationMetrics& operator=(const LocalizationMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalizationMetrics& operator=(LocalizationMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LocalizationMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LocalizationMetrics* internal_default_instance() {
    return reinterpret_cast<const LocalizationMetrics*>(
               &_LocalizationMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(LocalizationMetrics& a, LocalizationMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalizationMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalizationMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LocalizationMetrics* New() const final {
    return CreateMaybeMessage<LocalizationMetrics>(nullptr);
  }

  LocalizationMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LocalizationMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LocalizationMetrics& from);
  void MergeFrom(const LocalizationMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocalizationMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "agricultural.robot.navigation.v1.LocalizationMetrics";
  }
  protected:
  explicit LocalizationMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
    return ::descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFrequencyFieldNumber = 4,
    kEffectiveSampleSizeFieldNumber = 2,
    kConvergenceRateFieldNumber = 3,
    kParticleCountFieldNumber = 1,
    kSensorUpdatesCountFieldNumber = 5,
    kMapMatchScoreFieldNumber = 6,
  };
  // .google.protobuf.Duration update_frequency = 4;
  bool has_update_frequency() const;
  private:
  bool _internal_has_update_frequency() const;
  public:
  void clear_update_frequency();
  const PROTOBUF_NAMESPACE_ID::Duration& update_frequency() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_update_frequency();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_update_frequency();
  void set_allocated_update_frequency(PROTOBUF_NAMESPACE_ID::Duration* update_frequency);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_update_frequency() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_update_frequency();
  public:
  void unsafe_arena_set_allocated_update_frequency(
      PROTOBUF_NAMESPACE_ID::Duration* update_frequency);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_update_frequency();

  // double effective_sample_size = 2;
  void clear_effective_sample_size();
  double effective_sample_size() const;
  void set_effective_sample_size(double value);
  private:
  double _internal_effective_sample_size() const;
  void _internal_set_effective_sample_size(double value);
  public:

  // double convergence_rate = 3;
  void clear_convergence_rate();
  double convergence_rate() const;
  void set_convergence_rate(double value);
  private:
  double _internal_convergence_rate() const;
  void _internal_set_convergence_rate(double value);
  public:

  // uint32 particle_count = 1;
  void clear_particle_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 particle_count() const;
  void set_particle_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_particle_count() const;
  void _internal_set_particle_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sensor_updates_count = 5;
  void clear_sensor_updates_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_updates_count() const;
  void set_sensor_updates_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sensor_updates_count() const;
  void _internal_set_sensor_updates_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double map_match_score = 6;
  void clear_map_match_score();
  double map_match_score() const;
  void set_map_match_score(double value);
  private:
  double _internal_map_match_score() const;
  void _internal_set_map_match_score(double value);
  public:

  // @@protoc_insertion_point(class_scope:agricultural.robot.navigation.v1.LocalizationMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Duration* update_frequency_;
  double effective_sample_size_;
  double convergence_rate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 particle_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sensor_updates_count_;
  double map_match_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMapRequest

// string robot_id = 1;
inline void GetMapRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMapRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
  return _internal_robot_id();
}
inline void GetMapRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
}
inline std::string* GetMapRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& GetMapRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void GetMapRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMapRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
}
inline void GetMapRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
}
inline void GetMapRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
}
inline std::string* GetMapRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMapRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMapRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
}
inline std::string* GetMapRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMapRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetMapRequest.robot_id)
}

// .agricultural.robot.navigation.v1.MapType map_type = 2;
inline void GetMapRequest::clear_map_type() {
  map_type_ = 0;
}
inline ::agricultural::robot::navigation::v1::MapType GetMapRequest::_internal_map_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::MapType >(map_type_);
}
inline ::agricultural::robot::navigation::v1::MapType GetMapRequest::map_type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetMapRequest.map_type)
  return _internal_map_type();
}
inline void GetMapRequest::_internal_set_map_type(::agricultural::robot::navigation::v1::MapType value) {
  
  map_type_ = value;
}
inline void GetMapRequest::set_map_type(::agricultural::robot::navigation::v1::MapType value) {
  _internal_set_map_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetMapRequest.map_type)
}

// string frame_id = 3;
inline bool GetMapRequest::_internal_has_frame_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetMapRequest::has_frame_id() const {
  return _internal_has_frame_id();
}
inline void GetMapRequest::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetMapRequest::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
  return _internal_frame_id();
}
inline void GetMapRequest::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
}
inline std::string* GetMapRequest::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& GetMapRequest::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void GetMapRequest::_internal_set_frame_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMapRequest::set_frame_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
}
inline void GetMapRequest::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
}
inline void GetMapRequest::set_frame_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
}
inline std::string* GetMapRequest::_internal_mutable_frame_id() {
  _has_bits_[0] |= 0x00000001u;
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMapRequest::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
  if (!_internal_has_frame_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return frame_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMapRequest::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
}
inline std::string* GetMapRequest::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMapRequest::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetMapRequest.frame_id)
}

// -------------------------------------------------------------------

// SetMapRequest

// string robot_id = 1;
inline void SetMapRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetMapRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
  return _internal_robot_id();
}
inline void SetMapRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
}
inline std::string* SetMapRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& SetMapRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void SetMapRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetMapRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
}
inline void SetMapRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
}
inline void SetMapRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
}
inline std::string* SetMapRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetMapRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetMapRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
}
inline std::string* SetMapRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetMapRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SetMapRequest.robot_id)
}

// .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 2;
inline bool SetMapRequest::_internal_has_map_data() const {
  return this != internal_default_instance() && map_data_ != nullptr;
}
inline bool SetMapRequest::has_map_data() const {
  return _internal_has_map_data();
}
inline void SetMapRequest::clear_map_data() {
  if (GetArena() == nullptr && map_data_ != nullptr) {
    delete map_data_;
  }
  map_data_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::OccupancyGridMap& SetMapRequest::_internal_map_data() const {
  const ::agricultural::robot::navigation::v1::OccupancyGridMap* p = map_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::OccupancyGridMap*>(
      &::agricultural::robot::navigation::v1::_OccupancyGridMap_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::OccupancyGridMap& SetMapRequest::map_data() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SetMapRequest.map_data)
  return _internal_map_data();
}
inline void SetMapRequest::unsafe_arena_set_allocated_map_data(
    ::agricultural::robot::navigation::v1::OccupancyGridMap* map_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_data_);
  }
  map_data_ = map_data;
  if (map_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SetMapRequest.map_data)
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* SetMapRequest::release_map_data() {
  auto temp = unsafe_arena_release_map_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* SetMapRequest::unsafe_arena_release_map_data() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SetMapRequest.map_data)
  
  ::agricultural::robot::navigation::v1::OccupancyGridMap* temp = map_data_;
  map_data_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* SetMapRequest::_internal_mutable_map_data() {
  
  if (map_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::OccupancyGridMap>(GetArena());
    map_data_ = p;
  }
  return map_data_;
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* SetMapRequest::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SetMapRequest.map_data)
  return _internal_mutable_map_data();
}
inline void SetMapRequest::set_allocated_map_data(::agricultural::robot::navigation::v1::OccupancyGridMap* map_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_data_;
  }
  if (map_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_data);
    if (message_arena != submessage_arena) {
      map_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_data, submessage_arena);
    }
    
  } else {
    
  }
  map_data_ = map_data;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SetMapRequest.map_data)
}

// .agricultural.robot.navigation.v1.MapMetadata metadata = 3;
inline bool SetMapRequest::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool SetMapRequest::has_metadata() const {
  return _internal_has_metadata();
}
inline void SetMapRequest::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::MapMetadata& SetMapRequest::_internal_metadata() const {
  const ::agricultural::robot::navigation::v1::MapMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::MapMetadata*>(
      &::agricultural::robot::navigation::v1::_MapMetadata_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::MapMetadata& SetMapRequest::metadata() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SetMapRequest.metadata)
  return _internal_metadata();
}
inline void SetMapRequest::unsafe_arena_set_allocated_metadata(
    ::agricultural::robot::navigation::v1::MapMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SetMapRequest.metadata)
}
inline ::agricultural::robot::navigation::v1::MapMetadata* SetMapRequest::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* SetMapRequest::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SetMapRequest.metadata)
  
  ::agricultural::robot::navigation::v1::MapMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* SetMapRequest::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::MapMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* SetMapRequest::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SetMapRequest.metadata)
  return _internal_mutable_metadata();
}
inline void SetMapRequest::set_allocated_metadata(::agricultural::robot::navigation::v1::MapMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SetMapRequest.metadata)
}

// -------------------------------------------------------------------

// UpdateMapRequest

// string robot_id = 1;
inline void UpdateMapRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateMapRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
  return _internal_robot_id();
}
inline void UpdateMapRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
}
inline std::string* UpdateMapRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& UpdateMapRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void UpdateMapRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateMapRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
}
inline void UpdateMapRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
}
inline void UpdateMapRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
}
inline std::string* UpdateMapRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateMapRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateMapRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
}
inline std::string* UpdateMapRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpdateMapRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.UpdateMapRequest.robot_id)
}

// .agricultural.robot.navigation.v1.MapUpdate update = 2;
inline bool UpdateMapRequest::_internal_has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline bool UpdateMapRequest::has_update() const {
  return _internal_has_update();
}
inline void UpdateMapRequest::clear_update() {
  if (GetArena() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::MapUpdate& UpdateMapRequest::_internal_update() const {
  const ::agricultural::robot::navigation::v1::MapUpdate* p = update_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::MapUpdate*>(
      &::agricultural::robot::navigation::v1::_MapUpdate_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::MapUpdate& UpdateMapRequest::update() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.UpdateMapRequest.update)
  return _internal_update();
}
inline void UpdateMapRequest::unsafe_arena_set_allocated_update(
    ::agricultural::robot::navigation::v1::MapUpdate* update) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.UpdateMapRequest.update)
}
inline ::agricultural::robot::navigation::v1::MapUpdate* UpdateMapRequest::release_update() {
  auto temp = unsafe_arena_release_update();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapUpdate* UpdateMapRequest::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.UpdateMapRequest.update)
  
  ::agricultural::robot::navigation::v1::MapUpdate* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapUpdate* UpdateMapRequest::_internal_mutable_update() {
  
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::MapUpdate>(GetArena());
    update_ = p;
  }
  return update_;
}
inline ::agricultural::robot::navigation::v1::MapUpdate* UpdateMapRequest::mutable_update() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.UpdateMapRequest.update)
  return _internal_mutable_update();
}
inline void UpdateMapRequest::set_allocated_update(::agricultural::robot::navigation::v1::MapUpdate* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete update_;
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update);
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.UpdateMapRequest.update)
}

// -------------------------------------------------------------------

// ClearMapRequest

// string robot_id = 1;
inline void ClearMapRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ClearMapRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
  return _internal_robot_id();
}
inline void ClearMapRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
}
inline std::string* ClearMapRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& ClearMapRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void ClearMapRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ClearMapRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
}
inline void ClearMapRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
}
inline void ClearMapRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
}
inline std::string* ClearMapRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ClearMapRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ClearMapRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
}
inline std::string* ClearMapRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ClearMapRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.ClearMapRequest.robot_id)
}

// .agricultural.robot.navigation.v1.MapType map_type = 2;
inline void ClearMapRequest::clear_map_type() {
  map_type_ = 0;
}
inline ::agricultural::robot::navigation::v1::MapType ClearMapRequest::_internal_map_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::MapType >(map_type_);
}
inline ::agricultural::robot::navigation::v1::MapType ClearMapRequest::map_type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.ClearMapRequest.map_type)
  return _internal_map_type();
}
inline void ClearMapRequest::_internal_set_map_type(::agricultural::robot::navigation::v1::MapType value) {
  
  map_type_ = value;
}
inline void ClearMapRequest::set_map_type(::agricultural::robot::navigation::v1::MapType value) {
  _internal_set_map_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.ClearMapRequest.map_type)
}

// -------------------------------------------------------------------

// MapResponse

// bool success = 1;
inline void MapResponse::clear_success() {
  success_ = false;
}
inline bool MapResponse::_internal_success() const {
  return success_;
}
inline bool MapResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapResponse.success)
  return _internal_success();
}
inline void MapResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void MapResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapResponse.success)
}

// string message = 2;
inline void MapResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapResponse.message)
  return _internal_message();
}
inline void MapResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapResponse.message)
}
inline std::string* MapResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapResponse.message)
  return _internal_mutable_message();
}
inline const std::string& MapResponse::_internal_message() const {
  return message_.Get();
}
inline void MapResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.MapResponse.message)
}
inline void MapResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.MapResponse.message)
}
inline void MapResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.MapResponse.message)
}
inline std::string* MapResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapResponse.message)
}
inline std::string* MapResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.MapResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MapResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapResponse.message)
}

// .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 3;
inline bool MapResponse::_internal_has_map_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || map_data_ != nullptr);
  return value;
}
inline bool MapResponse::has_map_data() const {
  return _internal_has_map_data();
}
inline void MapResponse::clear_map_data() {
  if (GetArena() == nullptr && map_data_ != nullptr) {
    delete map_data_;
  }
  map_data_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agricultural::robot::navigation::v1::OccupancyGridMap& MapResponse::_internal_map_data() const {
  const ::agricultural::robot::navigation::v1::OccupancyGridMap* p = map_data_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::OccupancyGridMap*>(
      &::agricultural::robot::navigation::v1::_OccupancyGridMap_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::OccupancyGridMap& MapResponse::map_data() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapResponse.map_data)
  return _internal_map_data();
}
inline void MapResponse::unsafe_arena_set_allocated_map_data(
    ::agricultural::robot::navigation::v1::OccupancyGridMap* map_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_data_);
  }
  map_data_ = map_data;
  if (map_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapResponse.map_data)
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* MapResponse::release_map_data() {
  auto temp = unsafe_arena_release_map_data();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* MapResponse::unsafe_arena_release_map_data() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapResponse.map_data)
  _has_bits_[0] &= ~0x00000001u;
  ::agricultural::robot::navigation::v1::OccupancyGridMap* temp = map_data_;
  map_data_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* MapResponse::_internal_mutable_map_data() {
  _has_bits_[0] |= 0x00000001u;
  if (map_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::OccupancyGridMap>(GetArena());
    map_data_ = p;
  }
  return map_data_;
}
inline ::agricultural::robot::navigation::v1::OccupancyGridMap* MapResponse::mutable_map_data() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapResponse.map_data)
  return _internal_mutable_map_data();
}
inline void MapResponse::set_allocated_map_data(::agricultural::robot::navigation::v1::OccupancyGridMap* map_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete map_data_;
  }
  if (map_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_data);
    if (message_arena != submessage_arena) {
      map_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_data_ = map_data;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapResponse.map_data)
}

// .agricultural.robot.navigation.v1.MapMetadata metadata = 4;
inline bool MapResponse::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool MapResponse::has_metadata() const {
  return _internal_has_metadata();
}
inline void MapResponse::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::agricultural::robot::navigation::v1::MapMetadata& MapResponse::_internal_metadata() const {
  const ::agricultural::robot::navigation::v1::MapMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::MapMetadata*>(
      &::agricultural::robot::navigation::v1::_MapMetadata_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::MapMetadata& MapResponse::metadata() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapResponse.metadata)
  return _internal_metadata();
}
inline void MapResponse::unsafe_arena_set_allocated_metadata(
    ::agricultural::robot::navigation::v1::MapMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapResponse.metadata)
}
inline ::agricultural::robot::navigation::v1::MapMetadata* MapResponse::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* MapResponse::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapResponse.metadata)
  _has_bits_[0] &= ~0x00000002u;
  ::agricultural::robot::navigation::v1::MapMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* MapResponse::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000002u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::MapMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* MapResponse::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapResponse.metadata)
  return _internal_mutable_metadata();
}
inline void MapResponse::set_allocated_metadata(::agricultural::robot::navigation::v1::MapMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapResponse.metadata)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool MapResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool MapResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MapResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MapResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapResponse.timestamp)
  return _internal_timestamp();
}
inline void MapResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void MapResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapResponse.timestamp)
}

// -------------------------------------------------------------------

// OccupancyGridMap

// .agricultural.robot.navigation.v1.MapMetadata info = 1;
inline bool OccupancyGridMap::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool OccupancyGridMap::has_info() const {
  return _internal_has_info();
}
inline void OccupancyGridMap::clear_info() {
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::MapMetadata& OccupancyGridMap::_internal_info() const {
  const ::agricultural::robot::navigation::v1::MapMetadata* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::MapMetadata*>(
      &::agricultural::robot::navigation::v1::_MapMetadata_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::MapMetadata& OccupancyGridMap::info() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.OccupancyGridMap.info)
  return _internal_info();
}
inline void OccupancyGridMap::unsafe_arena_set_allocated_info(
    ::agricultural::robot::navigation::v1::MapMetadata* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.OccupancyGridMap.info)
}
inline ::agricultural::robot::navigation::v1::MapMetadata* OccupancyGridMap::release_info() {
  auto temp = unsafe_arena_release_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* OccupancyGridMap::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.OccupancyGridMap.info)
  
  ::agricultural::robot::navigation::v1::MapMetadata* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* OccupancyGridMap::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::MapMetadata>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::agricultural::robot::navigation::v1::MapMetadata* OccupancyGridMap::mutable_info() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.OccupancyGridMap.info)
  return _internal_mutable_info();
}
inline void OccupancyGridMap::set_allocated_info(::agricultural::robot::navigation::v1::MapMetadata* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.OccupancyGridMap.info)
}

// bytes data = 2;
inline void OccupancyGridMap::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OccupancyGridMap::data() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.OccupancyGridMap.data)
  return _internal_data();
}
inline void OccupancyGridMap::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.OccupancyGridMap.data)
}
inline std::string* OccupancyGridMap::mutable_data() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.OccupancyGridMap.data)
  return _internal_mutable_data();
}
inline const std::string& OccupancyGridMap::_internal_data() const {
  return data_.Get();
}
inline void OccupancyGridMap::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OccupancyGridMap::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.OccupancyGridMap.data)
}
inline void OccupancyGridMap::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.OccupancyGridMap.data)
}
inline void OccupancyGridMap::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.OccupancyGridMap.data)
}
inline std::string* OccupancyGridMap::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OccupancyGridMap::release_data() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.OccupancyGridMap.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OccupancyGridMap::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.OccupancyGridMap.data)
}
inline std::string* OccupancyGridMap::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.OccupancyGridMap.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OccupancyGridMap::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.OccupancyGridMap.data)
}

// string encoding = 3;
inline void OccupancyGridMap::clear_encoding() {
  encoding_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OccupancyGridMap::encoding() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
  return _internal_encoding();
}
inline void OccupancyGridMap::set_encoding(const std::string& value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
}
inline std::string* OccupancyGridMap::mutable_encoding() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
  return _internal_mutable_encoding();
}
inline const std::string& OccupancyGridMap::_internal_encoding() const {
  return encoding_.Get();
}
inline void OccupancyGridMap::_internal_set_encoding(const std::string& value) {
  
  encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OccupancyGridMap::set_encoding(std::string&& value) {
  
  encoding_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
}
inline void OccupancyGridMap::set_encoding(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
}
inline void OccupancyGridMap::set_encoding(const char* value,
    size_t size) {
  
  encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
}
inline std::string* OccupancyGridMap::_internal_mutable_encoding() {
  
  return encoding_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OccupancyGridMap::release_encoding() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
  return encoding_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OccupancyGridMap::set_allocated_encoding(std::string* encoding) {
  if (encoding != nullptr) {
    
  } else {
    
  }
  encoding_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), encoding,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
}
inline std::string* OccupancyGridMap::unsafe_arena_release_encoding() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return encoding_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OccupancyGridMap::unsafe_arena_set_allocated_encoding(
    std::string* encoding) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (encoding != nullptr) {
    
  } else {
    
  }
  encoding_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      encoding, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.OccupancyGridMap.encoding)
}

// -------------------------------------------------------------------

// MapMetadata

// .google.protobuf.Timestamp map_load_time = 1;
inline bool MapMetadata::_internal_has_map_load_time() const {
  return this != internal_default_instance() && map_load_time_ != nullptr;
}
inline bool MapMetadata::has_map_load_time() const {
  return _internal_has_map_load_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MapMetadata::_internal_map_load_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = map_load_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MapMetadata::map_load_time() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.map_load_time)
  return _internal_map_load_time();
}
inline void MapMetadata::unsafe_arena_set_allocated_map_load_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time_);
  }
  map_load_time_ = map_load_time;
  if (map_load_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapMetadata.map_load_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapMetadata::release_map_load_time() {
  auto temp = unsafe_arena_release_map_load_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapMetadata::unsafe_arena_release_map_load_time() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapMetadata.map_load_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = map_load_time_;
  map_load_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapMetadata::_internal_mutable_map_load_time() {
  
  if (map_load_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    map_load_time_ = p;
  }
  return map_load_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapMetadata::mutable_map_load_time() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapMetadata.map_load_time)
  return _internal_mutable_map_load_time();
}
inline void MapMetadata::set_allocated_map_load_time(PROTOBUF_NAMESPACE_ID::Timestamp* map_load_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time_);
  }
  if (map_load_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_load_time)->GetArena();
    if (message_arena != submessage_arena) {
      map_load_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_load_time, submessage_arena);
    }
    
  } else {
    
  }
  map_load_time_ = map_load_time;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapMetadata.map_load_time)
}

// float resolution = 2;
inline void MapMetadata::clear_resolution() {
  resolution_ = 0;
}
inline float MapMetadata::_internal_resolution() const {
  return resolution_;
}
inline float MapMetadata::resolution() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.resolution)
  return _internal_resolution();
}
inline void MapMetadata::_internal_set_resolution(float value) {
  
  resolution_ = value;
}
inline void MapMetadata::set_resolution(float value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapMetadata.resolution)
}

// uint32 width = 3;
inline void MapMetadata::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetadata::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetadata::width() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.width)
  return _internal_width();
}
inline void MapMetadata::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void MapMetadata::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapMetadata.width)
}

// uint32 height = 4;
inline void MapMetadata::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetadata::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetadata::height() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.height)
  return _internal_height();
}
inline void MapMetadata::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void MapMetadata::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapMetadata.height)
}

// .agricultural.robot.navigation.v1.Pose origin = 5;
inline bool MapMetadata::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool MapMetadata::has_origin() const {
  return _internal_has_origin();
}
inline void MapMetadata::clear_origin() {
  if (GetArena() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Pose& MapMetadata::_internal_origin() const {
  const ::agricultural::robot::navigation::v1::Pose* p = origin_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Pose*>(
      &::agricultural::robot::navigation::v1::_Pose_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Pose& MapMetadata::origin() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.origin)
  return _internal_origin();
}
inline void MapMetadata::unsafe_arena_set_allocated_origin(
    ::agricultural::robot::navigation::v1::Pose* origin) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapMetadata.origin)
}
inline ::agricultural::robot::navigation::v1::Pose* MapMetadata::release_origin() {
  auto temp = unsafe_arena_release_origin();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* MapMetadata::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapMetadata.origin)
  
  ::agricultural::robot::navigation::v1::Pose* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* MapMetadata::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Pose>(GetArena());
    origin_ = p;
  }
  return origin_;
}
inline ::agricultural::robot::navigation::v1::Pose* MapMetadata::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapMetadata.origin)
  return _internal_mutable_origin();
}
inline void MapMetadata::set_allocated_origin(::agricultural::robot::navigation::v1::Pose* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete origin_;
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(origin);
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapMetadata.origin)
}

// string frame_id = 6;
inline void MapMetadata::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapMetadata::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.frame_id)
  return _internal_frame_id();
}
inline void MapMetadata::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapMetadata.frame_id)
}
inline std::string* MapMetadata::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapMetadata.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& MapMetadata::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void MapMetadata::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapMetadata::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.MapMetadata.frame_id)
}
inline void MapMetadata::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.MapMetadata.frame_id)
}
inline void MapMetadata::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.MapMetadata.frame_id)
}
inline std::string* MapMetadata::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapMetadata::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapMetadata.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapMetadata::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapMetadata.frame_id)
}
inline std::string* MapMetadata::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.MapMetadata.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MapMetadata::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapMetadata.frame_id)
}

// uint32 version = 7;
inline void MapMetadata::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetadata::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MapMetadata::version() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.version)
  return _internal_version();
}
inline void MapMetadata::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void MapMetadata::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapMetadata.version)
}

// .agricultural.robot.navigation.v1.MapSource source = 8;
inline void MapMetadata::clear_source() {
  source_ = 0;
}
inline ::agricultural::robot::navigation::v1::MapSource MapMetadata::_internal_source() const {
  return static_cast< ::agricultural::robot::navigation::v1::MapSource >(source_);
}
inline ::agricultural::robot::navigation::v1::MapSource MapMetadata::source() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapMetadata.source)
  return _internal_source();
}
inline void MapMetadata::_internal_set_source(::agricultural::robot::navigation::v1::MapSource value) {
  
  source_ = value;
}
inline void MapMetadata::set_source(::agricultural::robot::navigation::v1::MapSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapMetadata.source)
}

// -------------------------------------------------------------------

// MapUpdate

// .agricultural.robot.navigation.v1.Rectangle update_region = 1;
inline bool MapUpdate::_internal_has_update_region() const {
  return this != internal_default_instance() && update_region_ != nullptr;
}
inline bool MapUpdate::has_update_region() const {
  return _internal_has_update_region();
}
inline void MapUpdate::clear_update_region() {
  if (GetArena() == nullptr && update_region_ != nullptr) {
    delete update_region_;
  }
  update_region_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Rectangle& MapUpdate::_internal_update_region() const {
  const ::agricultural::robot::navigation::v1::Rectangle* p = update_region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Rectangle*>(
      &::agricultural::robot::navigation::v1::_Rectangle_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Rectangle& MapUpdate::update_region() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapUpdate.update_region)
  return _internal_update_region();
}
inline void MapUpdate::unsafe_arena_set_allocated_update_region(
    ::agricultural::robot::navigation::v1::Rectangle* update_region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_region_);
  }
  update_region_ = update_region;
  if (update_region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapUpdate.update_region)
}
inline ::agricultural::robot::navigation::v1::Rectangle* MapUpdate::release_update_region() {
  auto temp = unsafe_arena_release_update_region();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Rectangle* MapUpdate::unsafe_arena_release_update_region() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapUpdate.update_region)
  
  ::agricultural::robot::navigation::v1::Rectangle* temp = update_region_;
  update_region_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Rectangle* MapUpdate::_internal_mutable_update_region() {
  
  if (update_region_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Rectangle>(GetArena());
    update_region_ = p;
  }
  return update_region_;
}
inline ::agricultural::robot::navigation::v1::Rectangle* MapUpdate::mutable_update_region() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapUpdate.update_region)
  return _internal_mutable_update_region();
}
inline void MapUpdate::set_allocated_update_region(::agricultural::robot::navigation::v1::Rectangle* update_region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete update_region_;
  }
  if (update_region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_region);
    if (message_arena != submessage_arena) {
      update_region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_region, submessage_arena);
    }
    
  } else {
    
  }
  update_region_ = update_region;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapUpdate.update_region)
}

// bytes data = 2;
inline void MapUpdate::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MapUpdate::data() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapUpdate.data)
  return _internal_data();
}
inline void MapUpdate::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.MapUpdate.data)
}
inline std::string* MapUpdate::mutable_data() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapUpdate.data)
  return _internal_mutable_data();
}
inline const std::string& MapUpdate::_internal_data() const {
  return data_.Get();
}
inline void MapUpdate::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MapUpdate::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.MapUpdate.data)
}
inline void MapUpdate::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.MapUpdate.data)
}
inline void MapUpdate::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.MapUpdate.data)
}
inline std::string* MapUpdate::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MapUpdate::release_data() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapUpdate.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MapUpdate::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapUpdate.data)
}
inline std::string* MapUpdate::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.MapUpdate.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MapUpdate::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapUpdate.data)
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool MapUpdate::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool MapUpdate::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MapUpdate::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MapUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.MapUpdate.timestamp)
  return _internal_timestamp();
}
inline void MapUpdate::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.MapUpdate.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapUpdate::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapUpdate::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.MapUpdate.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapUpdate::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MapUpdate::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.MapUpdate.timestamp)
  return _internal_mutable_timestamp();
}
inline void MapUpdate::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.MapUpdate.timestamp)
}

// -------------------------------------------------------------------

// Rectangle

// .agricultural.robot.navigation.v1.Point2D min = 1;
inline bool Rectangle::_internal_has_min() const {
  return this != internal_default_instance() && min_ != nullptr;
}
inline bool Rectangle::has_min() const {
  return _internal_has_min();
}
inline void Rectangle::clear_min() {
  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Point2D& Rectangle::_internal_min() const {
  const ::agricultural::robot::navigation::v1::Point2D* p = min_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Point2D*>(
      &::agricultural::robot::navigation::v1::_Point2D_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Point2D& Rectangle::min() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Rectangle.min)
  return _internal_min();
}
inline void Rectangle::unsafe_arena_set_allocated_min(
    ::agricultural::robot::navigation::v1::Point2D* min) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_);
  }
  min_ = min;
  if (min) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Rectangle.min)
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::release_min() {
  auto temp = unsafe_arena_release_min();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::unsafe_arena_release_min() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Rectangle.min)
  
  ::agricultural::robot::navigation::v1::Point2D* temp = min_;
  min_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::_internal_mutable_min() {
  
  if (min_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Point2D>(GetArena());
    min_ = p;
  }
  return min_;
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::mutable_min() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Rectangle.min)
  return _internal_mutable_min();
}
inline void Rectangle::set_allocated_min(::agricultural::robot::navigation::v1::Point2D* min) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete min_;
  }
  if (min) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(min);
    if (message_arena != submessage_arena) {
      min = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min, submessage_arena);
    }
    
  } else {
    
  }
  min_ = min;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Rectangle.min)
}

// .agricultural.robot.navigation.v1.Point2D max = 2;
inline bool Rectangle::_internal_has_max() const {
  return this != internal_default_instance() && max_ != nullptr;
}
inline bool Rectangle::has_max() const {
  return _internal_has_max();
}
inline void Rectangle::clear_max() {
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Point2D& Rectangle::_internal_max() const {
  const ::agricultural::robot::navigation::v1::Point2D* p = max_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Point2D*>(
      &::agricultural::robot::navigation::v1::_Point2D_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Point2D& Rectangle::max() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Rectangle.max)
  return _internal_max();
}
inline void Rectangle::unsafe_arena_set_allocated_max(
    ::agricultural::robot::navigation::v1::Point2D* max) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_);
  }
  max_ = max;
  if (max) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Rectangle.max)
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::release_max() {
  auto temp = unsafe_arena_release_max();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::unsafe_arena_release_max() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Rectangle.max)
  
  ::agricultural::robot::navigation::v1::Point2D* temp = max_;
  max_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::_internal_mutable_max() {
  
  if (max_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Point2D>(GetArena());
    max_ = p;
  }
  return max_;
}
inline ::agricultural::robot::navigation::v1::Point2D* Rectangle::mutable_max() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Rectangle.max)
  return _internal_mutable_max();
}
inline void Rectangle::set_allocated_max(::agricultural::robot::navigation::v1::Point2D* max) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete max_;
  }
  if (max) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(max);
    if (message_arena != submessage_arena) {
      max = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max, submessage_arena);
    }
    
  } else {
    
  }
  max_ = max;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Rectangle.max)
}

// -------------------------------------------------------------------

// GetPositionRequest

// string robot_id = 1;
inline void GetPositionRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPositionRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
  return _internal_robot_id();
}
inline void GetPositionRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
}
inline std::string* GetPositionRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& GetPositionRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void GetPositionRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPositionRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
}
inline void GetPositionRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
}
inline void GetPositionRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
}
inline std::string* GetPositionRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPositionRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPositionRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
}
inline std::string* GetPositionRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPositionRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetPositionRequest.robot_id)
}

// string frame_id = 2;
inline void GetPositionRequest::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPositionRequest::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
  return _internal_frame_id();
}
inline void GetPositionRequest::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
}
inline std::string* GetPositionRequest::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& GetPositionRequest::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void GetPositionRequest::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPositionRequest::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
}
inline void GetPositionRequest::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
}
inline void GetPositionRequest::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
}
inline std::string* GetPositionRequest::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPositionRequest::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPositionRequest::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
}
inline std::string* GetPositionRequest::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPositionRequest::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetPositionRequest.frame_id)
}

// -------------------------------------------------------------------

// SetPositionRequest

// string robot_id = 1;
inline void SetPositionRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetPositionRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
  return _internal_robot_id();
}
inline void SetPositionRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
}
inline std::string* SetPositionRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& SetPositionRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void SetPositionRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetPositionRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
}
inline void SetPositionRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
}
inline void SetPositionRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
}
inline std::string* SetPositionRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetPositionRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetPositionRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
}
inline std::string* SetPositionRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetPositionRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SetPositionRequest.robot_id)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
inline bool SetPositionRequest::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool SetPositionRequest::has_pose() const {
  return _internal_has_pose();
}
inline void SetPositionRequest::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& SetPositionRequest::_internal_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& SetPositionRequest::pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SetPositionRequest.pose)
  return _internal_pose();
}
inline void SetPositionRequest::unsafe_arena_set_allocated_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SetPositionRequest.pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* SetPositionRequest::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* SetPositionRequest::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SetPositionRequest.pose)
  
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* SetPositionRequest::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* SetPositionRequest::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SetPositionRequest.pose)
  return _internal_mutable_pose();
}
inline void SetPositionRequest::set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SetPositionRequest.pose)
}

// string frame_id = 3;
inline void SetPositionRequest::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetPositionRequest::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
  return _internal_frame_id();
}
inline void SetPositionRequest::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
}
inline std::string* SetPositionRequest::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& SetPositionRequest::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void SetPositionRequest::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetPositionRequest::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
}
inline void SetPositionRequest::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
}
inline void SetPositionRequest::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
}
inline std::string* SetPositionRequest::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetPositionRequest::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetPositionRequest::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
}
inline std::string* SetPositionRequest::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetPositionRequest::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SetPositionRequest.frame_id)
}

// -------------------------------------------------------------------

// StreamPositionRequest

// string robot_id = 1;
inline void StreamPositionRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamPositionRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
  return _internal_robot_id();
}
inline void StreamPositionRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
}
inline std::string* StreamPositionRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& StreamPositionRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void StreamPositionRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamPositionRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
}
inline void StreamPositionRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
}
inline void StreamPositionRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
}
inline std::string* StreamPositionRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamPositionRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamPositionRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
}
inline std::string* StreamPositionRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamPositionRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StreamPositionRequest.robot_id)
}

// string frame_id = 2;
inline void StreamPositionRequest::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamPositionRequest::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
  return _internal_frame_id();
}
inline void StreamPositionRequest::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
}
inline std::string* StreamPositionRequest::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& StreamPositionRequest::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void StreamPositionRequest::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamPositionRequest::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
}
inline void StreamPositionRequest::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
}
inline void StreamPositionRequest::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
}
inline std::string* StreamPositionRequest::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamPositionRequest::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamPositionRequest::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
}
inline std::string* StreamPositionRequest::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamPositionRequest::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StreamPositionRequest.frame_id)
}

// uint32 frequency_hz = 3;
inline void StreamPositionRequest::clear_frequency_hz() {
  frequency_hz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamPositionRequest::_internal_frequency_hz() const {
  return frequency_hz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamPositionRequest::frequency_hz() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamPositionRequest.frequency_hz)
  return _internal_frequency_hz();
}
inline void StreamPositionRequest::_internal_set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequency_hz_ = value;
}
inline void StreamPositionRequest::set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency_hz(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamPositionRequest.frequency_hz)
}

// -------------------------------------------------------------------

// PositionResponse

// bool success = 1;
inline void PositionResponse::clear_success() {
  success_ = false;
}
inline bool PositionResponse::_internal_success() const {
  return success_;
}
inline bool PositionResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionResponse.success)
  return _internal_success();
}
inline void PositionResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void PositionResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.PositionResponse.success)
}

// string message = 2;
inline void PositionResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionResponse.message)
  return _internal_message();
}
inline void PositionResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.PositionResponse.message)
}
inline std::string* PositionResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionResponse.message)
  return _internal_mutable_message();
}
inline const std::string& PositionResponse::_internal_message() const {
  return message_.Get();
}
inline void PositionResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.PositionResponse.message)
}
inline void PositionResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.PositionResponse.message)
}
inline void PositionResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.PositionResponse.message)
}
inline std::string* PositionResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionResponse.message)
}
inline std::string* PositionResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.PositionResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PositionResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionResponse.message)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance pose = 3;
inline bool PositionResponse::_internal_has_pose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pose_ != nullptr);
  return value;
}
inline bool PositionResponse::has_pose() const {
  return _internal_has_pose();
}
inline void PositionResponse::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& PositionResponse::_internal_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& PositionResponse::pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionResponse.pose)
  return _internal_pose();
}
inline void PositionResponse::unsafe_arena_set_allocated_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionResponse.pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionResponse::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionResponse.pose)
  _has_bits_[0] &= ~0x00000001u;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionResponse::_internal_mutable_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionResponse::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionResponse.pose)
  return _internal_mutable_pose();
}
inline void PositionResponse::set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionResponse.pose)
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool PositionResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool PositionResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PositionResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PositionResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionResponse.timestamp)
  return _internal_timestamp();
}
inline void PositionResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void PositionResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionResponse.timestamp)
}

// -------------------------------------------------------------------

// PositionUpdate

// string robot_id = 1;
inline void PositionUpdate::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionUpdate::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
  return _internal_robot_id();
}
inline void PositionUpdate::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
}
inline std::string* PositionUpdate::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& PositionUpdate::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void PositionUpdate::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionUpdate::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
}
inline void PositionUpdate::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
}
inline void PositionUpdate::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
}
inline std::string* PositionUpdate::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionUpdate::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionUpdate::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
}
inline std::string* PositionUpdate::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PositionUpdate::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.robot_id)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
inline bool PositionUpdate::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PositionUpdate::has_pose() const {
  return _internal_has_pose();
}
inline void PositionUpdate::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& PositionUpdate::_internal_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& PositionUpdate::pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionUpdate.pose)
  return _internal_pose();
}
inline void PositionUpdate::unsafe_arena_set_allocated_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionUpdate::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionUpdate::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionUpdate.pose)
  
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionUpdate::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* PositionUpdate::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionUpdate.pose)
  return _internal_mutable_pose();
}
inline void PositionUpdate::set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.pose)
}

// .agricultural.robot.navigation.v1.Twist velocity = 3;
inline bool PositionUpdate::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool PositionUpdate::has_velocity() const {
  return _internal_has_velocity();
}
inline void PositionUpdate::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Twist& PositionUpdate::_internal_velocity() const {
  const ::agricultural::robot::navigation::v1::Twist* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Twist*>(
      &::agricultural::robot::navigation::v1::_Twist_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Twist& PositionUpdate::velocity() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionUpdate.velocity)
  return _internal_velocity();
}
inline void PositionUpdate::unsafe_arena_set_allocated_velocity(
    ::agricultural::robot::navigation::v1::Twist* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.velocity)
}
inline ::agricultural::robot::navigation::v1::Twist* PositionUpdate::release_velocity() {
  auto temp = unsafe_arena_release_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* PositionUpdate::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionUpdate.velocity)
  
  ::agricultural::robot::navigation::v1::Twist* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* PositionUpdate::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Twist>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::agricultural::robot::navigation::v1::Twist* PositionUpdate::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionUpdate.velocity)
  return _internal_mutable_velocity();
}
inline void PositionUpdate::set_allocated_velocity(::agricultural::robot::navigation::v1::Twist* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.velocity)
}

// string frame_id = 4;
inline void PositionUpdate::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PositionUpdate::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
  return _internal_frame_id();
}
inline void PositionUpdate::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
}
inline std::string* PositionUpdate::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& PositionUpdate::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void PositionUpdate::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PositionUpdate::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
}
inline void PositionUpdate::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
}
inline void PositionUpdate::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
}
inline std::string* PositionUpdate::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PositionUpdate::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PositionUpdate::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
}
inline std::string* PositionUpdate::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PositionUpdate::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.frame_id)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool PositionUpdate::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool PositionUpdate::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PositionUpdate::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& PositionUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionUpdate.timestamp)
  return _internal_timestamp();
}
inline void PositionUpdate::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionUpdate::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionUpdate::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionUpdate.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionUpdate::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* PositionUpdate::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionUpdate.timestamp)
  return _internal_mutable_timestamp();
}
inline void PositionUpdate::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.timestamp)
}

// .agricultural.robot.navigation.v1.LocalizationQuality quality = 6;
inline bool PositionUpdate::_internal_has_quality() const {
  return this != internal_default_instance() && quality_ != nullptr;
}
inline bool PositionUpdate::has_quality() const {
  return _internal_has_quality();
}
inline void PositionUpdate::clear_quality() {
  if (GetArena() == nullptr && quality_ != nullptr) {
    delete quality_;
  }
  quality_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::LocalizationQuality& PositionUpdate::_internal_quality() const {
  const ::agricultural::robot::navigation::v1::LocalizationQuality* p = quality_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::LocalizationQuality*>(
      &::agricultural::robot::navigation::v1::_LocalizationQuality_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::LocalizationQuality& PositionUpdate::quality() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PositionUpdate.quality)
  return _internal_quality();
}
inline void PositionUpdate::unsafe_arena_set_allocated_quality(
    ::agricultural::robot::navigation::v1::LocalizationQuality* quality) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_);
  }
  quality_ = quality;
  if (quality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.quality)
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* PositionUpdate::release_quality() {
  auto temp = unsafe_arena_release_quality();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* PositionUpdate::unsafe_arena_release_quality() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PositionUpdate.quality)
  
  ::agricultural::robot::navigation::v1::LocalizationQuality* temp = quality_;
  quality_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* PositionUpdate::_internal_mutable_quality() {
  
  if (quality_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationQuality>(GetArena());
    quality_ = p;
  }
  return quality_;
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* PositionUpdate::mutable_quality() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PositionUpdate.quality)
  return _internal_mutable_quality();
}
inline void PositionUpdate::set_allocated_quality(::agricultural::robot::navigation::v1::LocalizationQuality* quality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quality_;
  }
  if (quality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quality);
    if (message_arena != submessage_arena) {
      quality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality, submessage_arena);
    }
    
  } else {
    
  }
  quality_ = quality;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PositionUpdate.quality)
}

// -------------------------------------------------------------------

// Pose

// .agricultural.robot.navigation.v1.Point3D position = 1;
inline bool Pose::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose::has_position() const {
  return _internal_has_position();
}
inline void Pose::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Point3D& Pose::_internal_position() const {
  const ::agricultural::robot::navigation::v1::Point3D* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Point3D*>(
      &::agricultural::robot::navigation::v1::_Point3D_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Point3D& Pose::position() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Pose.position)
  return _internal_position();
}
inline void Pose::unsafe_arena_set_allocated_position(
    ::agricultural::robot::navigation::v1::Point3D* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Pose.position)
}
inline ::agricultural::robot::navigation::v1::Point3D* Pose::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Point3D* Pose::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Pose.position)
  
  ::agricultural::robot::navigation::v1::Point3D* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Point3D* Pose::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Point3D>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::agricultural::robot::navigation::v1::Point3D* Pose::mutable_position() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Pose.position)
  return _internal_mutable_position();
}
inline void Pose::set_allocated_position(::agricultural::robot::navigation::v1::Point3D* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Pose.position)
}

// .agricultural.robot.navigation.v1.Quaternion orientation = 2;
inline bool Pose::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool Pose::has_orientation() const {
  return _internal_has_orientation();
}
inline void Pose::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Quaternion& Pose::_internal_orientation() const {
  const ::agricultural::robot::navigation::v1::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Quaternion*>(
      &::agricultural::robot::navigation::v1::_Quaternion_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Quaternion& Pose::orientation() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Pose.orientation)
  return _internal_orientation();
}
inline void Pose::unsafe_arena_set_allocated_orientation(
    ::agricultural::robot::navigation::v1::Quaternion* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Pose.orientation)
}
inline ::agricultural::robot::navigation::v1::Quaternion* Pose::release_orientation() {
  auto temp = unsafe_arena_release_orientation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Quaternion* Pose::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Pose.orientation)
  
  ::agricultural::robot::navigation::v1::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Quaternion* Pose::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Quaternion>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::agricultural::robot::navigation::v1::Quaternion* Pose::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Pose.orientation)
  return _internal_mutable_orientation();
}
inline void Pose::set_allocated_orientation(::agricultural::robot::navigation::v1::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Pose.orientation)
}

// -------------------------------------------------------------------

// PoseWithCovariance

// .agricultural.robot.navigation.v1.Pose pose = 1;
inline bool PoseWithCovariance::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseWithCovariance::has_pose() const {
  return _internal_has_pose();
}
inline void PoseWithCovariance::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Pose& PoseWithCovariance::_internal_pose() const {
  const ::agricultural::robot::navigation::v1::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Pose*>(
      &::agricultural::robot::navigation::v1::_Pose_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Pose& PoseWithCovariance::pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PoseWithCovariance.pose)
  return _internal_pose();
}
inline void PoseWithCovariance::unsafe_arena_set_allocated_pose(
    ::agricultural::robot::navigation::v1::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.PoseWithCovariance.pose)
}
inline ::agricultural::robot::navigation::v1::Pose* PoseWithCovariance::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* PoseWithCovariance::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.PoseWithCovariance.pose)
  
  ::agricultural::robot::navigation::v1::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* PoseWithCovariance::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::agricultural::robot::navigation::v1::Pose* PoseWithCovariance::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.PoseWithCovariance.pose)
  return _internal_mutable_pose();
}
inline void PoseWithCovariance::set_allocated_pose(::agricultural::robot::navigation::v1::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.PoseWithCovariance.pose)
}

// repeated double covariance = 2;
inline int PoseWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int PoseWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void PoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline double PoseWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline double PoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.PoseWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void PoseWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.PoseWithCovariance.covariance)
}
inline void PoseWithCovariance::_internal_add_covariance(double value) {
  covariance_.Add(value);
}
inline void PoseWithCovariance::add_covariance(double value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.PoseWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.PoseWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.PoseWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// Point2D

// double x = 1;
inline void Point2D::clear_x() {
  x_ = 0;
}
inline double Point2D::_internal_x() const {
  return x_;
}
inline double Point2D::x() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Point2D.x)
  return _internal_x();
}
inline void Point2D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point2D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Point2D.x)
}

// double y = 2;
inline void Point2D::clear_y() {
  y_ = 0;
}
inline double Point2D::_internal_y() const {
  return y_;
}
inline double Point2D::y() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Point2D.y)
  return _internal_y();
}
inline void Point2D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point2D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Point2D.y)
}

// -------------------------------------------------------------------

// Point3D

// double x = 1;
inline void Point3D::clear_x() {
  x_ = 0;
}
inline double Point3D::_internal_x() const {
  return x_;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Point3D.x)
  return _internal_x();
}
inline void Point3D::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Point3D.x)
}

// double y = 2;
inline void Point3D::clear_y() {
  y_ = 0;
}
inline double Point3D::_internal_y() const {
  return y_;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Point3D.y)
  return _internal_y();
}
inline void Point3D::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Point3D.y)
}

// double z = 3;
inline void Point3D::clear_z() {
  z_ = 0;
}
inline double Point3D::_internal_z() const {
  return z_;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Point3D.z)
  return _internal_z();
}
inline void Point3D::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Point3D.z)
}

// -------------------------------------------------------------------

// Quaternion

// double x = 1;
inline void Quaternion::clear_x() {
  x_ = 0;
}
inline double Quaternion::_internal_x() const {
  return x_;
}
inline double Quaternion::x() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Quaternion::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Quaternion.x)
}

// double y = 2;
inline void Quaternion::clear_y() {
  y_ = 0;
}
inline double Quaternion::_internal_y() const {
  return y_;
}
inline double Quaternion::y() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Quaternion::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Quaternion.y)
}

// double z = 3;
inline void Quaternion::clear_z() {
  z_ = 0;
}
inline double Quaternion::_internal_z() const {
  return z_;
}
inline double Quaternion::z() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Quaternion::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Quaternion.z)
}

// double w = 4;
inline void Quaternion::clear_w() {
  w_ = 0;
}
inline double Quaternion::_internal_w() const {
  return w_;
}
inline double Quaternion::w() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::_internal_set_w(double value) {
  
  w_ = value;
}
inline void Quaternion::set_w(double value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Quaternion.w)
}

// -------------------------------------------------------------------

// Twist

// .agricultural.robot.navigation.v1.Vector3 linear = 1;
inline bool Twist::_internal_has_linear() const {
  return this != internal_default_instance() && linear_ != nullptr;
}
inline bool Twist::has_linear() const {
  return _internal_has_linear();
}
inline void Twist::clear_linear() {
  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Vector3& Twist::_internal_linear() const {
  const ::agricultural::robot::navigation::v1::Vector3* p = linear_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Vector3*>(
      &::agricultural::robot::navigation::v1::_Vector3_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Vector3& Twist::linear() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Twist.linear)
  return _internal_linear();
}
inline void Twist::unsafe_arena_set_allocated_linear(
    ::agricultural::robot::navigation::v1::Vector3* linear) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_);
  }
  linear_ = linear;
  if (linear) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Twist.linear)
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::release_linear() {
  auto temp = unsafe_arena_release_linear();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::unsafe_arena_release_linear() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Twist.linear)
  
  ::agricultural::robot::navigation::v1::Vector3* temp = linear_;
  linear_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::_internal_mutable_linear() {
  
  if (linear_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Vector3>(GetArena());
    linear_ = p;
  }
  return linear_;
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::mutable_linear() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Twist.linear)
  return _internal_mutable_linear();
}
inline void Twist::set_allocated_linear(::agricultural::robot::navigation::v1::Vector3* linear) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_;
  }
  if (linear) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear);
    if (message_arena != submessage_arena) {
      linear = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear, submessage_arena);
    }
    
  } else {
    
  }
  linear_ = linear;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Twist.linear)
}

// .agricultural.robot.navigation.v1.Vector3 angular = 2;
inline bool Twist::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Twist::has_angular() const {
  return _internal_has_angular();
}
inline void Twist::clear_angular() {
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Vector3& Twist::_internal_angular() const {
  const ::agricultural::robot::navigation::v1::Vector3* p = angular_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Vector3*>(
      &::agricultural::robot::navigation::v1::_Vector3_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Vector3& Twist::angular() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Twist.angular)
  return _internal_angular();
}
inline void Twist::unsafe_arena_set_allocated_angular(
    ::agricultural::robot::navigation::v1::Vector3* angular) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Twist.angular)
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::release_angular() {
  auto temp = unsafe_arena_release_angular();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Twist.angular)
  
  ::agricultural::robot::navigation::v1::Vector3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Vector3>(GetArena());
    angular_ = p;
  }
  return angular_;
}
inline ::agricultural::robot::navigation::v1::Vector3* Twist::mutable_angular() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Twist.angular)
  return _internal_mutable_angular();
}
inline void Twist::set_allocated_angular(::agricultural::robot::navigation::v1::Vector3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete angular_;
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(angular);
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Twist.angular)
}

// -------------------------------------------------------------------

// Vector3

// double x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Vector3.x)
}

// double y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Vector3.y)
}

// double z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Vector3.z)
}

// -------------------------------------------------------------------

// VelocityCommand

// string robot_id = 1;
inline void VelocityCommand::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VelocityCommand::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
  return _internal_robot_id();
}
inline void VelocityCommand::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
}
inline std::string* VelocityCommand::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& VelocityCommand::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void VelocityCommand::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VelocityCommand::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
}
inline void VelocityCommand::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
}
inline void VelocityCommand::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
}
inline std::string* VelocityCommand::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VelocityCommand::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VelocityCommand::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
}
inline std::string* VelocityCommand::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VelocityCommand::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.robot_id)
}

// .agricultural.robot.navigation.v1.Twist cmd_vel = 2;
inline bool VelocityCommand::_internal_has_cmd_vel() const {
  return this != internal_default_instance() && cmd_vel_ != nullptr;
}
inline bool VelocityCommand::has_cmd_vel() const {
  return _internal_has_cmd_vel();
}
inline void VelocityCommand::clear_cmd_vel() {
  if (GetArena() == nullptr && cmd_vel_ != nullptr) {
    delete cmd_vel_;
  }
  cmd_vel_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Twist& VelocityCommand::_internal_cmd_vel() const {
  const ::agricultural::robot::navigation::v1::Twist* p = cmd_vel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Twist*>(
      &::agricultural::robot::navigation::v1::_Twist_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Twist& VelocityCommand::cmd_vel() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityCommand.cmd_vel)
  return _internal_cmd_vel();
}
inline void VelocityCommand::unsafe_arena_set_allocated_cmd_vel(
    ::agricultural::robot::navigation::v1::Twist* cmd_vel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmd_vel_);
  }
  cmd_vel_ = cmd_vel;
  if (cmd_vel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.cmd_vel)
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityCommand::release_cmd_vel() {
  auto temp = unsafe_arena_release_cmd_vel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityCommand::unsafe_arena_release_cmd_vel() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityCommand.cmd_vel)
  
  ::agricultural::robot::navigation::v1::Twist* temp = cmd_vel_;
  cmd_vel_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityCommand::_internal_mutable_cmd_vel() {
  
  if (cmd_vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Twist>(GetArena());
    cmd_vel_ = p;
  }
  return cmd_vel_;
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityCommand::mutable_cmd_vel() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityCommand.cmd_vel)
  return _internal_mutable_cmd_vel();
}
inline void VelocityCommand::set_allocated_cmd_vel(::agricultural::robot::navigation::v1::Twist* cmd_vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cmd_vel_;
  }
  if (cmd_vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cmd_vel);
    if (message_arena != submessage_arena) {
      cmd_vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmd_vel, submessage_arena);
    }
    
  } else {
    
  }
  cmd_vel_ = cmd_vel;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.cmd_vel)
}

// .google.protobuf.Duration timeout = 3;
inline bool VelocityCommand::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool VelocityCommand::has_timeout() const {
  return _internal_has_timeout();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& VelocityCommand::_internal_timeout() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& VelocityCommand::timeout() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityCommand.timeout)
  return _internal_timeout();
}
inline void VelocityCommand::unsafe_arena_set_allocated_timeout(
    PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.timeout)
}
inline PROTOBUF_NAMESPACE_ID::Duration* VelocityCommand::release_timeout() {
  auto temp = unsafe_arena_release_timeout();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* VelocityCommand::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityCommand.timeout)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* VelocityCommand::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    timeout_ = p;
  }
  return timeout_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* VelocityCommand::mutable_timeout() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityCommand.timeout)
  return _internal_mutable_timeout();
}
inline void VelocityCommand::set_allocated_timeout(PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout)->GetArena();
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.timeout)
}

// .agricultural.robot.navigation.v1.JoystickInput joystick_input = 4;
inline bool VelocityCommand::_internal_has_joystick_input() const {
  return this != internal_default_instance() && joystick_input_ != nullptr;
}
inline bool VelocityCommand::has_joystick_input() const {
  return _internal_has_joystick_input();
}
inline void VelocityCommand::clear_joystick_input() {
  if (GetArena() == nullptr && joystick_input_ != nullptr) {
    delete joystick_input_;
  }
  joystick_input_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::JoystickInput& VelocityCommand::_internal_joystick_input() const {
  const ::agricultural::robot::navigation::v1::JoystickInput* p = joystick_input_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::JoystickInput*>(
      &::agricultural::robot::navigation::v1::_JoystickInput_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::JoystickInput& VelocityCommand::joystick_input() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityCommand.joystick_input)
  return _internal_joystick_input();
}
inline void VelocityCommand::unsafe_arena_set_allocated_joystick_input(
    ::agricultural::robot::navigation::v1::JoystickInput* joystick_input) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joystick_input_);
  }
  joystick_input_ = joystick_input;
  if (joystick_input) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.joystick_input)
}
inline ::agricultural::robot::navigation::v1::JoystickInput* VelocityCommand::release_joystick_input() {
  auto temp = unsafe_arena_release_joystick_input();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::JoystickInput* VelocityCommand::unsafe_arena_release_joystick_input() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityCommand.joystick_input)
  
  ::agricultural::robot::navigation::v1::JoystickInput* temp = joystick_input_;
  joystick_input_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::JoystickInput* VelocityCommand::_internal_mutable_joystick_input() {
  
  if (joystick_input_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::JoystickInput>(GetArena());
    joystick_input_ = p;
  }
  return joystick_input_;
}
inline ::agricultural::robot::navigation::v1::JoystickInput* VelocityCommand::mutable_joystick_input() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityCommand.joystick_input)
  return _internal_mutable_joystick_input();
}
inline void VelocityCommand::set_allocated_joystick_input(::agricultural::robot::navigation::v1::JoystickInput* joystick_input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete joystick_input_;
  }
  if (joystick_input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joystick_input);
    if (message_arena != submessage_arena) {
      joystick_input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joystick_input, submessage_arena);
    }
    
  } else {
    
  }
  joystick_input_ = joystick_input;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.joystick_input)
}

// .agricultural.robot.navigation.v1.SafetyConstraints safety = 5;
inline bool VelocityCommand::_internal_has_safety() const {
  return this != internal_default_instance() && safety_ != nullptr;
}
inline bool VelocityCommand::has_safety() const {
  return _internal_has_safety();
}
inline void VelocityCommand::clear_safety() {
  if (GetArena() == nullptr && safety_ != nullptr) {
    delete safety_;
  }
  safety_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::SafetyConstraints& VelocityCommand::_internal_safety() const {
  const ::agricultural::robot::navigation::v1::SafetyConstraints* p = safety_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::SafetyConstraints*>(
      &::agricultural::robot::navigation::v1::_SafetyConstraints_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::SafetyConstraints& VelocityCommand::safety() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityCommand.safety)
  return _internal_safety();
}
inline void VelocityCommand::unsafe_arena_set_allocated_safety(
    ::agricultural::robot::navigation::v1::SafetyConstraints* safety) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(safety_);
  }
  safety_ = safety;
  if (safety) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.safety)
}
inline ::agricultural::robot::navigation::v1::SafetyConstraints* VelocityCommand::release_safety() {
  auto temp = unsafe_arena_release_safety();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::SafetyConstraints* VelocityCommand::unsafe_arena_release_safety() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityCommand.safety)
  
  ::agricultural::robot::navigation::v1::SafetyConstraints* temp = safety_;
  safety_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::SafetyConstraints* VelocityCommand::_internal_mutable_safety() {
  
  if (safety_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::SafetyConstraints>(GetArena());
    safety_ = p;
  }
  return safety_;
}
inline ::agricultural::robot::navigation::v1::SafetyConstraints* VelocityCommand::mutable_safety() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityCommand.safety)
  return _internal_mutable_safety();
}
inline void VelocityCommand::set_allocated_safety(::agricultural::robot::navigation::v1::SafetyConstraints* safety) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete safety_;
  }
  if (safety) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(safety);
    if (message_arena != submessage_arena) {
      safety = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, safety, submessage_arena);
    }
    
  } else {
    
  }
  safety_ = safety;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityCommand.safety)
}

// .agricultural.robot.navigation.v1.ControlMode control_mode = 6;
inline void VelocityCommand::clear_control_mode() {
  control_mode_ = 0;
}
inline ::agricultural::robot::navigation::v1::ControlMode VelocityCommand::_internal_control_mode() const {
  return static_cast< ::agricultural::robot::navigation::v1::ControlMode >(control_mode_);
}
inline ::agricultural::robot::navigation::v1::ControlMode VelocityCommand::control_mode() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityCommand.control_mode)
  return _internal_control_mode();
}
inline void VelocityCommand::_internal_set_control_mode(::agricultural::robot::navigation::v1::ControlMode value) {
  
  control_mode_ = value;
}
inline void VelocityCommand::set_control_mode(::agricultural::robot::navigation::v1::ControlMode value) {
  _internal_set_control_mode(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VelocityCommand.control_mode)
}

// -------------------------------------------------------------------

// JoystickInput

// repeated float axes = 1;
inline int JoystickInput::_internal_axes_size() const {
  return axes_.size();
}
inline int JoystickInput::axes_size() const {
  return _internal_axes_size();
}
inline void JoystickInput::clear_axes() {
  axes_.Clear();
}
inline float JoystickInput::_internal_axes(int index) const {
  return axes_.Get(index);
}
inline float JoystickInput::axes(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.JoystickInput.axes)
  return _internal_axes(index);
}
inline void JoystickInput::set_axes(int index, float value) {
  axes_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.JoystickInput.axes)
}
inline void JoystickInput::_internal_add_axes(float value) {
  axes_.Add(value);
}
inline void JoystickInput::add_axes(float value) {
  _internal_add_axes(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.JoystickInput.axes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JoystickInput::_internal_axes() const {
  return axes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
JoystickInput::axes() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.JoystickInput.axes)
  return _internal_axes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JoystickInput::_internal_mutable_axes() {
  return &axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
JoystickInput::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.JoystickInput.axes)
  return _internal_mutable_axes();
}

// repeated bool buttons = 2;
inline int JoystickInput::_internal_buttons_size() const {
  return buttons_.size();
}
inline int JoystickInput::buttons_size() const {
  return _internal_buttons_size();
}
inline void JoystickInput::clear_buttons() {
  buttons_.Clear();
}
inline bool JoystickInput::_internal_buttons(int index) const {
  return buttons_.Get(index);
}
inline bool JoystickInput::buttons(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.JoystickInput.buttons)
  return _internal_buttons(index);
}
inline void JoystickInput::set_buttons(int index, bool value) {
  buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.JoystickInput.buttons)
}
inline void JoystickInput::_internal_add_buttons(bool value) {
  buttons_.Add(value);
}
inline void JoystickInput::add_buttons(bool value) {
  _internal_add_buttons(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.JoystickInput.buttons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
JoystickInput::_internal_buttons() const {
  return buttons_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
JoystickInput::buttons() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.JoystickInput.buttons)
  return _internal_buttons();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
JoystickInput::_internal_mutable_buttons() {
  return &buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
JoystickInput::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.JoystickInput.buttons)
  return _internal_mutable_buttons();
}

// .google.protobuf.Timestamp timestamp = 3;
inline bool JoystickInput::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool JoystickInput::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& JoystickInput::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& JoystickInput::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.JoystickInput.timestamp)
  return _internal_timestamp();
}
inline void JoystickInput::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.JoystickInput.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* JoystickInput::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* JoystickInput::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.JoystickInput.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* JoystickInput::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* JoystickInput::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.JoystickInput.timestamp)
  return _internal_mutable_timestamp();
}
inline void JoystickInput::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.JoystickInput.timestamp)
}

// string controller_id = 4;
inline void JoystickInput::clear_controller_id() {
  controller_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& JoystickInput::controller_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.JoystickInput.controller_id)
  return _internal_controller_id();
}
inline void JoystickInput::set_controller_id(const std::string& value) {
  _internal_set_controller_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.JoystickInput.controller_id)
}
inline std::string* JoystickInput::mutable_controller_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.JoystickInput.controller_id)
  return _internal_mutable_controller_id();
}
inline const std::string& JoystickInput::_internal_controller_id() const {
  return controller_id_.Get();
}
inline void JoystickInput::_internal_set_controller_id(const std::string& value) {
  
  controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoystickInput::set_controller_id(std::string&& value) {
  
  controller_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.JoystickInput.controller_id)
}
inline void JoystickInput::set_controller_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.JoystickInput.controller_id)
}
inline void JoystickInput::set_controller_id(const char* value,
    size_t size) {
  
  controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.JoystickInput.controller_id)
}
inline std::string* JoystickInput::_internal_mutable_controller_id() {
  
  return controller_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoystickInput::release_controller_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.JoystickInput.controller_id)
  return controller_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoystickInput::set_allocated_controller_id(std::string* controller_id) {
  if (controller_id != nullptr) {
    
  } else {
    
  }
  controller_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), controller_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.JoystickInput.controller_id)
}
inline std::string* JoystickInput::unsafe_arena_release_controller_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.JoystickInput.controller_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return controller_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JoystickInput::unsafe_arena_set_allocated_controller_id(
    std::string* controller_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (controller_id != nullptr) {
    
  } else {
    
  }
  controller_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      controller_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.JoystickInput.controller_id)
}

// -------------------------------------------------------------------

// VelocityResponse

// bool success = 1;
inline void VelocityResponse::clear_success() {
  success_ = false;
}
inline bool VelocityResponse::_internal_success() const {
  return success_;
}
inline bool VelocityResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityResponse.success)
  return _internal_success();
}
inline void VelocityResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void VelocityResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VelocityResponse.success)
}

// string message = 2;
inline void VelocityResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VelocityResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityResponse.message)
  return _internal_message();
}
inline void VelocityResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VelocityResponse.message)
}
inline std::string* VelocityResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityResponse.message)
  return _internal_mutable_message();
}
inline const std::string& VelocityResponse::_internal_message() const {
  return message_.Get();
}
inline void VelocityResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VelocityResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.VelocityResponse.message)
}
inline void VelocityResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.VelocityResponse.message)
}
inline void VelocityResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.VelocityResponse.message)
}
inline std::string* VelocityResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VelocityResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VelocityResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityResponse.message)
}
inline std::string* VelocityResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.VelocityResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VelocityResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityResponse.message)
}

// .agricultural.robot.navigation.v1.Twist actual_velocity = 3;
inline bool VelocityResponse::_internal_has_actual_velocity() const {
  return this != internal_default_instance() && actual_velocity_ != nullptr;
}
inline bool VelocityResponse::has_actual_velocity() const {
  return _internal_has_actual_velocity();
}
inline void VelocityResponse::clear_actual_velocity() {
  if (GetArena() == nullptr && actual_velocity_ != nullptr) {
    delete actual_velocity_;
  }
  actual_velocity_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Twist& VelocityResponse::_internal_actual_velocity() const {
  const ::agricultural::robot::navigation::v1::Twist* p = actual_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Twist*>(
      &::agricultural::robot::navigation::v1::_Twist_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Twist& VelocityResponse::actual_velocity() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityResponse.actual_velocity)
  return _internal_actual_velocity();
}
inline void VelocityResponse::unsafe_arena_set_allocated_actual_velocity(
    ::agricultural::robot::navigation::v1::Twist* actual_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(actual_velocity_);
  }
  actual_velocity_ = actual_velocity;
  if (actual_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityResponse.actual_velocity)
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityResponse::release_actual_velocity() {
  auto temp = unsafe_arena_release_actual_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityResponse::unsafe_arena_release_actual_velocity() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityResponse.actual_velocity)
  
  ::agricultural::robot::navigation::v1::Twist* temp = actual_velocity_;
  actual_velocity_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityResponse::_internal_mutable_actual_velocity() {
  
  if (actual_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Twist>(GetArena());
    actual_velocity_ = p;
  }
  return actual_velocity_;
}
inline ::agricultural::robot::navigation::v1::Twist* VelocityResponse::mutable_actual_velocity() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityResponse.actual_velocity)
  return _internal_mutable_actual_velocity();
}
inline void VelocityResponse::set_allocated_actual_velocity(::agricultural::robot::navigation::v1::Twist* actual_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete actual_velocity_;
  }
  if (actual_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(actual_velocity);
    if (message_arena != submessage_arena) {
      actual_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, actual_velocity, submessage_arena);
    }
    
  } else {
    
  }
  actual_velocity_ = actual_velocity;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityResponse.actual_velocity)
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool VelocityResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool VelocityResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& VelocityResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& VelocityResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityResponse.timestamp)
  return _internal_timestamp();
}
inline void VelocityResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VelocityResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VelocityResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VelocityResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VelocityResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VelocityResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VelocityResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void VelocityResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VelocityResponse.timestamp)
}

// repeated .agricultural.robot.navigation.v1.SafetyViolation safety_violations = 5;
inline int VelocityResponse::_internal_safety_violations_size() const {
  return safety_violations_.size();
}
inline int VelocityResponse::safety_violations_size() const {
  return _internal_safety_violations_size();
}
inline void VelocityResponse::clear_safety_violations() {
  safety_violations_.Clear();
}
inline ::agricultural::robot::navigation::v1::SafetyViolation* VelocityResponse::mutable_safety_violations(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VelocityResponse.safety_violations)
  return safety_violations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::SafetyViolation >*
VelocityResponse::mutable_safety_violations() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.VelocityResponse.safety_violations)
  return &safety_violations_;
}
inline const ::agricultural::robot::navigation::v1::SafetyViolation& VelocityResponse::_internal_safety_violations(int index) const {
  return safety_violations_.Get(index);
}
inline const ::agricultural::robot::navigation::v1::SafetyViolation& VelocityResponse::safety_violations(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VelocityResponse.safety_violations)
  return _internal_safety_violations(index);
}
inline ::agricultural::robot::navigation::v1::SafetyViolation* VelocityResponse::_internal_add_safety_violations() {
  return safety_violations_.Add();
}
inline ::agricultural::robot::navigation::v1::SafetyViolation* VelocityResponse::add_safety_violations() {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.VelocityResponse.safety_violations)
  return _internal_add_safety_violations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::SafetyViolation >&
VelocityResponse::safety_violations() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.VelocityResponse.safety_violations)
  return safety_violations_;
}

// -------------------------------------------------------------------

// StopMovementRequest

// string robot_id = 1;
inline void StopMovementRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopMovementRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
  return _internal_robot_id();
}
inline void StopMovementRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
}
inline std::string* StopMovementRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& StopMovementRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void StopMovementRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopMovementRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
}
inline void StopMovementRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
}
inline void StopMovementRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
}
inline std::string* StopMovementRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopMovementRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopMovementRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
}
inline std::string* StopMovementRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopMovementRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StopMovementRequest.robot_id)
}

// .agricultural.robot.navigation.v1.EmergencyStopType stop_type = 2;
inline void StopMovementRequest::clear_stop_type() {
  stop_type_ = 0;
}
inline ::agricultural::robot::navigation::v1::EmergencyStopType StopMovementRequest::_internal_stop_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::EmergencyStopType >(stop_type_);
}
inline ::agricultural::robot::navigation::v1::EmergencyStopType StopMovementRequest::stop_type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StopMovementRequest.stop_type)
  return _internal_stop_type();
}
inline void StopMovementRequest::_internal_set_stop_type(::agricultural::robot::navigation::v1::EmergencyStopType value) {
  
  stop_type_ = value;
}
inline void StopMovementRequest::set_stop_type(::agricultural::robot::navigation::v1::EmergencyStopType value) {
  _internal_set_stop_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StopMovementRequest.stop_type)
}

// -------------------------------------------------------------------

// SafetyConstraints

// double max_linear_velocity = 1;
inline void SafetyConstraints::clear_max_linear_velocity() {
  max_linear_velocity_ = 0;
}
inline double SafetyConstraints::_internal_max_linear_velocity() const {
  return max_linear_velocity_;
}
inline double SafetyConstraints::max_linear_velocity() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyConstraints.max_linear_velocity)
  return _internal_max_linear_velocity();
}
inline void SafetyConstraints::_internal_set_max_linear_velocity(double value) {
  
  max_linear_velocity_ = value;
}
inline void SafetyConstraints::set_max_linear_velocity(double value) {
  _internal_set_max_linear_velocity(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.max_linear_velocity)
}

// double max_angular_velocity = 2;
inline void SafetyConstraints::clear_max_angular_velocity() {
  max_angular_velocity_ = 0;
}
inline double SafetyConstraints::_internal_max_angular_velocity() const {
  return max_angular_velocity_;
}
inline double SafetyConstraints::max_angular_velocity() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyConstraints.max_angular_velocity)
  return _internal_max_angular_velocity();
}
inline void SafetyConstraints::_internal_set_max_angular_velocity(double value) {
  
  max_angular_velocity_ = value;
}
inline void SafetyConstraints::set_max_angular_velocity(double value) {
  _internal_set_max_angular_velocity(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.max_angular_velocity)
}

// double max_acceleration = 3;
inline void SafetyConstraints::clear_max_acceleration() {
  max_acceleration_ = 0;
}
inline double SafetyConstraints::_internal_max_acceleration() const {
  return max_acceleration_;
}
inline double SafetyConstraints::max_acceleration() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyConstraints.max_acceleration)
  return _internal_max_acceleration();
}
inline void SafetyConstraints::_internal_set_max_acceleration(double value) {
  
  max_acceleration_ = value;
}
inline void SafetyConstraints::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.max_acceleration)
}

// bool obstacle_avoidance_enabled = 4;
inline void SafetyConstraints::clear_obstacle_avoidance_enabled() {
  obstacle_avoidance_enabled_ = false;
}
inline bool SafetyConstraints::_internal_obstacle_avoidance_enabled() const {
  return obstacle_avoidance_enabled_;
}
inline bool SafetyConstraints::obstacle_avoidance_enabled() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyConstraints.obstacle_avoidance_enabled)
  return _internal_obstacle_avoidance_enabled();
}
inline void SafetyConstraints::_internal_set_obstacle_avoidance_enabled(bool value) {
  
  obstacle_avoidance_enabled_ = value;
}
inline void SafetyConstraints::set_obstacle_avoidance_enabled(bool value) {
  _internal_set_obstacle_avoidance_enabled(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.obstacle_avoidance_enabled)
}

// double safety_margin = 5;
inline void SafetyConstraints::clear_safety_margin() {
  safety_margin_ = 0;
}
inline double SafetyConstraints::_internal_safety_margin() const {
  return safety_margin_;
}
inline double SafetyConstraints::safety_margin() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyConstraints.safety_margin)
  return _internal_safety_margin();
}
inline void SafetyConstraints::_internal_set_safety_margin(double value) {
  
  safety_margin_ = value;
}
inline void SafetyConstraints::set_safety_margin(double value) {
  _internal_set_safety_margin(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.safety_margin)
}

// repeated string forbidden_zones = 6;
inline int SafetyConstraints::_internal_forbidden_zones_size() const {
  return forbidden_zones_.size();
}
inline int SafetyConstraints::forbidden_zones_size() const {
  return _internal_forbidden_zones_size();
}
inline void SafetyConstraints::clear_forbidden_zones() {
  forbidden_zones_.Clear();
}
inline std::string* SafetyConstraints::add_forbidden_zones() {
  // @@protoc_insertion_point(field_add_mutable:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  return _internal_add_forbidden_zones();
}
inline const std::string& SafetyConstraints::_internal_forbidden_zones(int index) const {
  return forbidden_zones_.Get(index);
}
inline const std::string& SafetyConstraints::forbidden_zones(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  return _internal_forbidden_zones(index);
}
inline std::string* SafetyConstraints::mutable_forbidden_zones(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  return forbidden_zones_.Mutable(index);
}
inline void SafetyConstraints::set_forbidden_zones(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  forbidden_zones_.Mutable(index)->assign(value);
}
inline void SafetyConstraints::set_forbidden_zones(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  forbidden_zones_.Mutable(index)->assign(std::move(value));
}
inline void SafetyConstraints::set_forbidden_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  forbidden_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
}
inline void SafetyConstraints::set_forbidden_zones(int index, const char* value, size_t size) {
  forbidden_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
}
inline std::string* SafetyConstraints::_internal_add_forbidden_zones() {
  return forbidden_zones_.Add();
}
inline void SafetyConstraints::add_forbidden_zones(const std::string& value) {
  forbidden_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
}
inline void SafetyConstraints::add_forbidden_zones(std::string&& value) {
  forbidden_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
}
inline void SafetyConstraints::add_forbidden_zones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  forbidden_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
}
inline void SafetyConstraints::add_forbidden_zones(const char* value, size_t size) {
  forbidden_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SafetyConstraints::forbidden_zones() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  return forbidden_zones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SafetyConstraints::mutable_forbidden_zones() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones)
  return &forbidden_zones_;
}

// -------------------------------------------------------------------

// SafetyViolation

// .agricultural.robot.navigation.v1.SafetyViolationType type = 1;
inline void SafetyViolation::clear_type() {
  type_ = 0;
}
inline ::agricultural::robot::navigation::v1::SafetyViolationType SafetyViolation::_internal_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::SafetyViolationType >(type_);
}
inline ::agricultural::robot::navigation::v1::SafetyViolationType SafetyViolation::type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyViolation.type)
  return _internal_type();
}
inline void SafetyViolation::_internal_set_type(::agricultural::robot::navigation::v1::SafetyViolationType value) {
  
  type_ = value;
}
inline void SafetyViolation::set_type(::agricultural::robot::navigation::v1::SafetyViolationType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyViolation.type)
}

// string description = 2;
inline void SafetyViolation::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SafetyViolation::description() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyViolation.description)
  return _internal_description();
}
inline void SafetyViolation::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyViolation.description)
}
inline std::string* SafetyViolation::mutable_description() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SafetyViolation.description)
  return _internal_mutable_description();
}
inline const std::string& SafetyViolation::_internal_description() const {
  return description_.Get();
}
inline void SafetyViolation::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SafetyViolation::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.SafetyViolation.description)
}
inline void SafetyViolation::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.SafetyViolation.description)
}
inline void SafetyViolation::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.SafetyViolation.description)
}
inline std::string* SafetyViolation::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SafetyViolation::release_description() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SafetyViolation.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SafetyViolation::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SafetyViolation.description)
}
inline std::string* SafetyViolation::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.SafetyViolation.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SafetyViolation::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SafetyViolation.description)
}

// double severity = 3;
inline void SafetyViolation::clear_severity() {
  severity_ = 0;
}
inline double SafetyViolation::_internal_severity() const {
  return severity_;
}
inline double SafetyViolation::severity() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyViolation.severity)
  return _internal_severity();
}
inline void SafetyViolation::_internal_set_severity(double value) {
  
  severity_ = value;
}
inline void SafetyViolation::set_severity(double value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.SafetyViolation.severity)
}

// .google.protobuf.Timestamp detected_at = 4;
inline bool SafetyViolation::_internal_has_detected_at() const {
  return this != internal_default_instance() && detected_at_ != nullptr;
}
inline bool SafetyViolation::has_detected_at() const {
  return _internal_has_detected_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SafetyViolation::_internal_detected_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = detected_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SafetyViolation::detected_at() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.SafetyViolation.detected_at)
  return _internal_detected_at();
}
inline void SafetyViolation::unsafe_arena_set_allocated_detected_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* detected_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detected_at_);
  }
  detected_at_ = detected_at;
  if (detected_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.SafetyViolation.detected_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SafetyViolation::release_detected_at() {
  auto temp = unsafe_arena_release_detected_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SafetyViolation::unsafe_arena_release_detected_at() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.SafetyViolation.detected_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = detected_at_;
  detected_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SafetyViolation::_internal_mutable_detected_at() {
  
  if (detected_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    detected_at_ = p;
  }
  return detected_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SafetyViolation::mutable_detected_at() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.SafetyViolation.detected_at)
  return _internal_mutable_detected_at();
}
inline void SafetyViolation::set_allocated_detected_at(PROTOBUF_NAMESPACE_ID::Timestamp* detected_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(detected_at_);
  }
  if (detected_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(detected_at)->GetArena();
    if (message_arena != submessage_arena) {
      detected_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, detected_at, submessage_arena);
    }
    
  } else {
    
  }
  detected_at_ = detected_at;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.SafetyViolation.detected_at)
}

// -------------------------------------------------------------------

// NavigationGoal

// string robot_id = 1;
inline void NavigationGoal::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationGoal::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
  return _internal_robot_id();
}
inline void NavigationGoal::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
}
inline std::string* NavigationGoal::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& NavigationGoal::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void NavigationGoal::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationGoal::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
}
inline void NavigationGoal::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
}
inline void NavigationGoal::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
}
inline std::string* NavigationGoal::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationGoal::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationGoal::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
}
inline std::string* NavigationGoal::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationGoal::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.robot_id)
}

// string goal_id = 2;
inline void NavigationGoal::clear_goal_id() {
  goal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationGoal::goal_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
  return _internal_goal_id();
}
inline void NavigationGoal::set_goal_id(const std::string& value) {
  _internal_set_goal_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
}
inline std::string* NavigationGoal::mutable_goal_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
  return _internal_mutable_goal_id();
}
inline const std::string& NavigationGoal::_internal_goal_id() const {
  return goal_id_.Get();
}
inline void NavigationGoal::_internal_set_goal_id(const std::string& value) {
  
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationGoal::set_goal_id(std::string&& value) {
  
  goal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
}
inline void NavigationGoal::set_goal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
}
inline void NavigationGoal::set_goal_id(const char* value,
    size_t size) {
  
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
}
inline std::string* NavigationGoal::_internal_mutable_goal_id() {
  
  return goal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationGoal::release_goal_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
  return goal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationGoal::set_allocated_goal_id(std::string* goal_id) {
  if (goal_id != nullptr) {
    
  } else {
    
  }
  goal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
}
inline std::string* NavigationGoal::unsafe_arena_release_goal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return goal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationGoal::unsafe_arena_set_allocated_goal_id(
    std::string* goal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (goal_id != nullptr) {
    
  } else {
    
  }
  goal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      goal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.goal_id)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance target_pose = 3;
inline bool NavigationGoal::_internal_has_target_pose() const {
  return this != internal_default_instance() && target_pose_ != nullptr;
}
inline bool NavigationGoal::has_target_pose() const {
  return _internal_has_target_pose();
}
inline void NavigationGoal::clear_target_pose() {
  if (GetArena() == nullptr && target_pose_ != nullptr) {
    delete target_pose_;
  }
  target_pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& NavigationGoal::_internal_target_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = target_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& NavigationGoal::target_pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.target_pose)
  return _internal_target_pose();
}
inline void NavigationGoal::unsafe_arena_set_allocated_target_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* target_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_pose_);
  }
  target_pose_ = target_pose;
  if (target_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.target_pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* NavigationGoal::release_target_pose() {
  auto temp = unsafe_arena_release_target_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* NavigationGoal::unsafe_arena_release_target_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationGoal.target_pose)
  
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = target_pose_;
  target_pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* NavigationGoal::_internal_mutable_target_pose() {
  
  if (target_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    target_pose_ = p;
  }
  return target_pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* NavigationGoal::mutable_target_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.target_pose)
  return _internal_mutable_target_pose();
}
inline void NavigationGoal::set_allocated_target_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* target_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_pose_;
  }
  if (target_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_pose);
    if (message_arena != submessage_arena) {
      target_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_pose, submessage_arena);
    }
    
  } else {
    
  }
  target_pose_ = target_pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.target_pose)
}

// string frame_id = 4;
inline void NavigationGoal::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationGoal::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
  return _internal_frame_id();
}
inline void NavigationGoal::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
}
inline std::string* NavigationGoal::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& NavigationGoal::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void NavigationGoal::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationGoal::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
}
inline void NavigationGoal::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
}
inline void NavigationGoal::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
}
inline std::string* NavigationGoal::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationGoal::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationGoal::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
}
inline std::string* NavigationGoal::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationGoal::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.frame_id)
}

// .agricultural.robot.navigation.v1.NavigationOptions options = 5;
inline bool NavigationGoal::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool NavigationGoal::has_options() const {
  return _internal_has_options();
}
inline void NavigationGoal::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::NavigationOptions& NavigationGoal::_internal_options() const {
  const ::agricultural::robot::navigation::v1::NavigationOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::NavigationOptions*>(
      &::agricultural::robot::navigation::v1::_NavigationOptions_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::NavigationOptions& NavigationGoal::options() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.options)
  return _internal_options();
}
inline void NavigationGoal::unsafe_arena_set_allocated_options(
    ::agricultural::robot::navigation::v1::NavigationOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.options)
}
inline ::agricultural::robot::navigation::v1::NavigationOptions* NavigationGoal::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationOptions* NavigationGoal::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationGoal.options)
  
  ::agricultural::robot::navigation::v1::NavigationOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationOptions* NavigationGoal::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::agricultural::robot::navigation::v1::NavigationOptions* NavigationGoal::mutable_options() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.options)
  return _internal_mutable_options();
}
inline void NavigationGoal::set_allocated_options(::agricultural::robot::navigation::v1::NavigationOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.options)
}

// repeated .agricultural.robot.navigation.v1.Waypoint waypoints = 6;
inline int NavigationGoal::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int NavigationGoal::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void NavigationGoal::clear_waypoints() {
  waypoints_.Clear();
}
inline ::agricultural::robot::navigation::v1::Waypoint* NavigationGoal::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.waypoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::Waypoint >*
NavigationGoal::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.NavigationGoal.waypoints)
  return &waypoints_;
}
inline const ::agricultural::robot::navigation::v1::Waypoint& NavigationGoal::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline const ::agricultural::robot::navigation::v1::Waypoint& NavigationGoal::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.waypoints)
  return _internal_waypoints(index);
}
inline ::agricultural::robot::navigation::v1::Waypoint* NavigationGoal::_internal_add_waypoints() {
  return waypoints_.Add();
}
inline ::agricultural::robot::navigation::v1::Waypoint* NavigationGoal::add_waypoints() {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.NavigationGoal.waypoints)
  return _internal_add_waypoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::Waypoint >&
NavigationGoal::waypoints() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.NavigationGoal.waypoints)
  return waypoints_;
}

// .google.protobuf.Timestamp deadline = 7;
inline bool NavigationGoal::_internal_has_deadline() const {
  return this != internal_default_instance() && deadline_ != nullptr;
}
inline bool NavigationGoal::has_deadline() const {
  return _internal_has_deadline();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationGoal::_internal_deadline() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = deadline_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationGoal::deadline() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationGoal.deadline)
  return _internal_deadline();
}
inline void NavigationGoal::unsafe_arena_set_allocated_deadline(
    PROTOBUF_NAMESPACE_ID::Timestamp* deadline) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline_);
  }
  deadline_ = deadline;
  if (deadline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.deadline)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationGoal::release_deadline() {
  auto temp = unsafe_arena_release_deadline();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationGoal::unsafe_arena_release_deadline() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationGoal.deadline)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = deadline_;
  deadline_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationGoal::_internal_mutable_deadline() {
  
  if (deadline_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    deadline_ = p;
  }
  return deadline_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationGoal::mutable_deadline() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationGoal.deadline)
  return _internal_mutable_deadline();
}
inline void NavigationGoal::set_allocated_deadline(PROTOBUF_NAMESPACE_ID::Timestamp* deadline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline_);
  }
  if (deadline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deadline)->GetArena();
    if (message_arena != submessage_arena) {
      deadline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deadline, submessage_arena);
    }
    
  } else {
    
  }
  deadline_ = deadline;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationGoal.deadline)
}

// -------------------------------------------------------------------

// TrajectoryCommand

// string robot_id = 1;
inline void TrajectoryCommand::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrajectoryCommand::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
  return _internal_robot_id();
}
inline void TrajectoryCommand::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
}
inline std::string* TrajectoryCommand::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& TrajectoryCommand::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void TrajectoryCommand::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrajectoryCommand::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
}
inline void TrajectoryCommand::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
}
inline void TrajectoryCommand::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
}
inline std::string* TrajectoryCommand::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrajectoryCommand::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrajectoryCommand::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
}
inline std::string* TrajectoryCommand::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrajectoryCommand::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.robot_id)
}

// string trajectory_id = 2;
inline void TrajectoryCommand::clear_trajectory_id() {
  trajectory_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrajectoryCommand::trajectory_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
  return _internal_trajectory_id();
}
inline void TrajectoryCommand::set_trajectory_id(const std::string& value) {
  _internal_set_trajectory_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
}
inline std::string* TrajectoryCommand::mutable_trajectory_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
  return _internal_mutable_trajectory_id();
}
inline const std::string& TrajectoryCommand::_internal_trajectory_id() const {
  return trajectory_id_.Get();
}
inline void TrajectoryCommand::_internal_set_trajectory_id(const std::string& value) {
  
  trajectory_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrajectoryCommand::set_trajectory_id(std::string&& value) {
  
  trajectory_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
}
inline void TrajectoryCommand::set_trajectory_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  trajectory_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
}
inline void TrajectoryCommand::set_trajectory_id(const char* value,
    size_t size) {
  
  trajectory_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
}
inline std::string* TrajectoryCommand::_internal_mutable_trajectory_id() {
  
  return trajectory_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrajectoryCommand::release_trajectory_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
  return trajectory_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrajectoryCommand::set_allocated_trajectory_id(std::string* trajectory_id) {
  if (trajectory_id != nullptr) {
    
  } else {
    
  }
  trajectory_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trajectory_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
}
inline std::string* TrajectoryCommand::unsafe_arena_release_trajectory_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return trajectory_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrajectoryCommand::unsafe_arena_set_allocated_trajectory_id(
    std::string* trajectory_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trajectory_id != nullptr) {
    
  } else {
    
  }
  trajectory_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trajectory_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id)
}

// repeated .agricultural.robot.navigation.v1.TrajectoryPoint points = 3;
inline int TrajectoryCommand::_internal_points_size() const {
  return points_.size();
}
inline int TrajectoryCommand::points_size() const {
  return _internal_points_size();
}
inline void TrajectoryCommand::clear_points() {
  points_.Clear();
}
inline ::agricultural::robot::navigation::v1::TrajectoryPoint* TrajectoryCommand::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryCommand.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::TrajectoryPoint >*
TrajectoryCommand::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.TrajectoryCommand.points)
  return &points_;
}
inline const ::agricultural::robot::navigation::v1::TrajectoryPoint& TrajectoryCommand::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::agricultural::robot::navigation::v1::TrajectoryPoint& TrajectoryCommand::points(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryCommand.points)
  return _internal_points(index);
}
inline ::agricultural::robot::navigation::v1::TrajectoryPoint* TrajectoryCommand::_internal_add_points() {
  return points_.Add();
}
inline ::agricultural::robot::navigation::v1::TrajectoryPoint* TrajectoryCommand::add_points() {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.TrajectoryCommand.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::TrajectoryPoint >&
TrajectoryCommand::points() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.TrajectoryCommand.points)
  return points_;
}

// .agricultural.robot.navigation.v1.TrajectoryOptions options = 4;
inline bool TrajectoryCommand::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool TrajectoryCommand::has_options() const {
  return _internal_has_options();
}
inline void TrajectoryCommand::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::TrajectoryOptions& TrajectoryCommand::_internal_options() const {
  const ::agricultural::robot::navigation::v1::TrajectoryOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::TrajectoryOptions*>(
      &::agricultural::robot::navigation::v1::_TrajectoryOptions_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::TrajectoryOptions& TrajectoryCommand::options() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryCommand.options)
  return _internal_options();
}
inline void TrajectoryCommand::unsafe_arena_set_allocated_options(
    ::agricultural::robot::navigation::v1::TrajectoryOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.options)
}
inline ::agricultural::robot::navigation::v1::TrajectoryOptions* TrajectoryCommand::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::TrajectoryOptions* TrajectoryCommand::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryCommand.options)
  
  ::agricultural::robot::navigation::v1::TrajectoryOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::TrajectoryOptions* TrajectoryCommand::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::TrajectoryOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::agricultural::robot::navigation::v1::TrajectoryOptions* TrajectoryCommand::mutable_options() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryCommand.options)
  return _internal_mutable_options();
}
inline void TrajectoryCommand::set_allocated_options(::agricultural::robot::navigation::v1::TrajectoryOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.options)
}

// string frame_id = 5;
inline void TrajectoryCommand::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TrajectoryCommand::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
  return _internal_frame_id();
}
inline void TrajectoryCommand::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
}
inline std::string* TrajectoryCommand::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& TrajectoryCommand::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void TrajectoryCommand::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrajectoryCommand::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
}
inline void TrajectoryCommand::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
}
inline void TrajectoryCommand::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
}
inline std::string* TrajectoryCommand::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrajectoryCommand::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrajectoryCommand::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
}
inline std::string* TrajectoryCommand::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrajectoryCommand::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryCommand.frame_id)
}

// -------------------------------------------------------------------

// Waypoint

// string waypoint_id = 1;
inline void Waypoint::clear_waypoint_id() {
  waypoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Waypoint::waypoint_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
  return _internal_waypoint_id();
}
inline void Waypoint::set_waypoint_id(const std::string& value) {
  _internal_set_waypoint_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
}
inline std::string* Waypoint::mutable_waypoint_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
  return _internal_mutable_waypoint_id();
}
inline const std::string& Waypoint::_internal_waypoint_id() const {
  return waypoint_id_.Get();
}
inline void Waypoint::_internal_set_waypoint_id(const std::string& value) {
  
  waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Waypoint::set_waypoint_id(std::string&& value) {
  
  waypoint_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
}
inline void Waypoint::set_waypoint_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
}
inline void Waypoint::set_waypoint_id(const char* value,
    size_t size) {
  
  waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
}
inline std::string* Waypoint::_internal_mutable_waypoint_id() {
  
  return waypoint_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Waypoint::release_waypoint_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
  return waypoint_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Waypoint::set_allocated_waypoint_id(std::string* waypoint_id) {
  if (waypoint_id != nullptr) {
    
  } else {
    
  }
  waypoint_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), waypoint_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
}
inline std::string* Waypoint::unsafe_arena_release_waypoint_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return waypoint_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Waypoint::unsafe_arena_set_allocated_waypoint_id(
    std::string* waypoint_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (waypoint_id != nullptr) {
    
  } else {
    
  }
  waypoint_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      waypoint_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Waypoint.waypoint_id)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
inline bool Waypoint::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Waypoint::has_pose() const {
  return _internal_has_pose();
}
inline void Waypoint::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& Waypoint::_internal_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& Waypoint::pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Waypoint.pose)
  return _internal_pose();
}
inline void Waypoint::unsafe_arena_set_allocated_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Waypoint.pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* Waypoint::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* Waypoint::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Waypoint.pose)
  
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* Waypoint::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* Waypoint::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Waypoint.pose)
  return _internal_mutable_pose();
}
inline void Waypoint::set_allocated_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Waypoint.pose)
}

// .agricultural.robot.navigation.v1.WaypointType type = 3;
inline void Waypoint::clear_type() {
  type_ = 0;
}
inline ::agricultural::robot::navigation::v1::WaypointType Waypoint::_internal_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::WaypointType >(type_);
}
inline ::agricultural::robot::navigation::v1::WaypointType Waypoint::type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Waypoint.type)
  return _internal_type();
}
inline void Waypoint::_internal_set_type(::agricultural::robot::navigation::v1::WaypointType value) {
  
  type_ = value;
}
inline void Waypoint::set_type(::agricultural::robot::navigation::v1::WaypointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Waypoint.type)
}

// .google.protobuf.Duration max_duration_at_waypoint = 4;
inline bool Waypoint::_internal_has_max_duration_at_waypoint() const {
  return this != internal_default_instance() && max_duration_at_waypoint_ != nullptr;
}
inline bool Waypoint::has_max_duration_at_waypoint() const {
  return _internal_has_max_duration_at_waypoint();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Waypoint::_internal_max_duration_at_waypoint() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = max_duration_at_waypoint_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& Waypoint::max_duration_at_waypoint() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Waypoint.max_duration_at_waypoint)
  return _internal_max_duration_at_waypoint();
}
inline void Waypoint::unsafe_arena_set_allocated_max_duration_at_waypoint(
    PROTOBUF_NAMESPACE_ID::Duration* max_duration_at_waypoint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_duration_at_waypoint_);
  }
  max_duration_at_waypoint_ = max_duration_at_waypoint;
  if (max_duration_at_waypoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.Waypoint.max_duration_at_waypoint)
}
inline PROTOBUF_NAMESPACE_ID::Duration* Waypoint::release_max_duration_at_waypoint() {
  auto temp = unsafe_arena_release_max_duration_at_waypoint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Waypoint::unsafe_arena_release_max_duration_at_waypoint() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.Waypoint.max_duration_at_waypoint)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = max_duration_at_waypoint_;
  max_duration_at_waypoint_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Waypoint::_internal_mutable_max_duration_at_waypoint() {
  
  if (max_duration_at_waypoint_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    max_duration_at_waypoint_ = p;
  }
  return max_duration_at_waypoint_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* Waypoint::mutable_max_duration_at_waypoint() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Waypoint.max_duration_at_waypoint)
  return _internal_mutable_max_duration_at_waypoint();
}
inline void Waypoint::set_allocated_max_duration_at_waypoint(PROTOBUF_NAMESPACE_ID::Duration* max_duration_at_waypoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_duration_at_waypoint_);
  }
  if (max_duration_at_waypoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_duration_at_waypoint)->GetArena();
    if (message_arena != submessage_arena) {
      max_duration_at_waypoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_duration_at_waypoint, submessage_arena);
    }
    
  } else {
    
  }
  max_duration_at_waypoint_ = max_duration_at_waypoint;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.Waypoint.max_duration_at_waypoint)
}

// repeated .agricultural.robot.navigation.v1.WaypointAction actions = 5;
inline int Waypoint::_internal_actions_size() const {
  return actions_.size();
}
inline int Waypoint::actions_size() const {
  return _internal_actions_size();
}
inline void Waypoint::clear_actions() {
  actions_.Clear();
}
inline ::agricultural::robot::navigation::v1::WaypointAction* Waypoint::mutable_actions(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.Waypoint.actions)
  return actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::WaypointAction >*
Waypoint::mutable_actions() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.Waypoint.actions)
  return &actions_;
}
inline const ::agricultural::robot::navigation::v1::WaypointAction& Waypoint::_internal_actions(int index) const {
  return actions_.Get(index);
}
inline const ::agricultural::robot::navigation::v1::WaypointAction& Waypoint::actions(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Waypoint.actions)
  return _internal_actions(index);
}
inline ::agricultural::robot::navigation::v1::WaypointAction* Waypoint::_internal_add_actions() {
  return actions_.Add();
}
inline ::agricultural::robot::navigation::v1::WaypointAction* Waypoint::add_actions() {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.Waypoint.actions)
  return _internal_add_actions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::WaypointAction >&
Waypoint::actions() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.Waypoint.actions)
  return actions_;
}

// -------------------------------------------------------------------

// TrajectoryPoint

// .agricultural.robot.navigation.v1.Pose pose = 1;
inline bool TrajectoryPoint::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool TrajectoryPoint::has_pose() const {
  return _internal_has_pose();
}
inline void TrajectoryPoint::clear_pose() {
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Pose& TrajectoryPoint::_internal_pose() const {
  const ::agricultural::robot::navigation::v1::Pose* p = pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Pose*>(
      &::agricultural::robot::navigation::v1::_Pose_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Pose& TrajectoryPoint::pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryPoint.pose)
  return _internal_pose();
}
inline void TrajectoryPoint::unsafe_arena_set_allocated_pose(
    ::agricultural::robot::navigation::v1::Pose* pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryPoint.pose)
}
inline ::agricultural::robot::navigation::v1::Pose* TrajectoryPoint::release_pose() {
  auto temp = unsafe_arena_release_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* TrajectoryPoint::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryPoint.pose)
  
  ::agricultural::robot::navigation::v1::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* TrajectoryPoint::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Pose>(GetArena());
    pose_ = p;
  }
  return pose_;
}
inline ::agricultural::robot::navigation::v1::Pose* TrajectoryPoint::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryPoint.pose)
  return _internal_mutable_pose();
}
inline void TrajectoryPoint::set_allocated_pose(::agricultural::robot::navigation::v1::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryPoint.pose)
}

// .agricultural.robot.navigation.v1.Twist velocity = 2;
inline bool TrajectoryPoint::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool TrajectoryPoint::has_velocity() const {
  return _internal_has_velocity();
}
inline void TrajectoryPoint::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Twist& TrajectoryPoint::_internal_velocity() const {
  const ::agricultural::robot::navigation::v1::Twist* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Twist*>(
      &::agricultural::robot::navigation::v1::_Twist_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Twist& TrajectoryPoint::velocity() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryPoint.velocity)
  return _internal_velocity();
}
inline void TrajectoryPoint::unsafe_arena_set_allocated_velocity(
    ::agricultural::robot::navigation::v1::Twist* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryPoint.velocity)
}
inline ::agricultural::robot::navigation::v1::Twist* TrajectoryPoint::release_velocity() {
  auto temp = unsafe_arena_release_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* TrajectoryPoint::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryPoint.velocity)
  
  ::agricultural::robot::navigation::v1::Twist* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Twist* TrajectoryPoint::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Twist>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::agricultural::robot::navigation::v1::Twist* TrajectoryPoint::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryPoint.velocity)
  return _internal_mutable_velocity();
}
inline void TrajectoryPoint::set_allocated_velocity(::agricultural::robot::navigation::v1::Twist* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryPoint.velocity)
}

// .google.protobuf.Timestamp time_from_start = 3;
inline bool TrajectoryPoint::_internal_has_time_from_start() const {
  return this != internal_default_instance() && time_from_start_ != nullptr;
}
inline bool TrajectoryPoint::has_time_from_start() const {
  return _internal_has_time_from_start();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TrajectoryPoint::_internal_time_from_start() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_from_start_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TrajectoryPoint::time_from_start() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryPoint.time_from_start)
  return _internal_time_from_start();
}
inline void TrajectoryPoint::unsafe_arena_set_allocated_time_from_start(
    PROTOBUF_NAMESPACE_ID::Timestamp* time_from_start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_from_start_);
  }
  time_from_start_ = time_from_start;
  if (time_from_start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.TrajectoryPoint.time_from_start)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TrajectoryPoint::release_time_from_start() {
  auto temp = unsafe_arena_release_time_from_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TrajectoryPoint::unsafe_arena_release_time_from_start() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.TrajectoryPoint.time_from_start)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_from_start_;
  time_from_start_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TrajectoryPoint::_internal_mutable_time_from_start() {
  
  if (time_from_start_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_from_start_ = p;
  }
  return time_from_start_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TrajectoryPoint::mutable_time_from_start() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.TrajectoryPoint.time_from_start)
  return _internal_mutable_time_from_start();
}
inline void TrajectoryPoint::set_allocated_time_from_start(PROTOBUF_NAMESPACE_ID::Timestamp* time_from_start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_from_start_);
  }
  if (time_from_start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_from_start)->GetArena();
    if (message_arena != submessage_arena) {
      time_from_start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_from_start, submessage_arena);
    }
    
  } else {
    
  }
  time_from_start_ = time_from_start;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.TrajectoryPoint.time_from_start)
}

// repeated double accelerations = 4;
inline int TrajectoryPoint::_internal_accelerations_size() const {
  return accelerations_.size();
}
inline int TrajectoryPoint::accelerations_size() const {
  return _internal_accelerations_size();
}
inline void TrajectoryPoint::clear_accelerations() {
  accelerations_.Clear();
}
inline double TrajectoryPoint::_internal_accelerations(int index) const {
  return accelerations_.Get(index);
}
inline double TrajectoryPoint::accelerations(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryPoint.accelerations)
  return _internal_accelerations(index);
}
inline void TrajectoryPoint::set_accelerations(int index, double value) {
  accelerations_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryPoint.accelerations)
}
inline void TrajectoryPoint::_internal_add_accelerations(double value) {
  accelerations_.Add(value);
}
inline void TrajectoryPoint::add_accelerations(double value) {
  _internal_add_accelerations(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.TrajectoryPoint.accelerations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TrajectoryPoint::_internal_accelerations() const {
  return accelerations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
TrajectoryPoint::accelerations() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.TrajectoryPoint.accelerations)
  return _internal_accelerations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TrajectoryPoint::_internal_mutable_accelerations() {
  return &accelerations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
TrajectoryPoint::mutable_accelerations() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.TrajectoryPoint.accelerations)
  return _internal_mutable_accelerations();
}

// -------------------------------------------------------------------

// NavigationOptions

// .agricultural.robot.navigation.v1.PlannerType planner = 1;
inline void NavigationOptions::clear_planner() {
  planner_ = 0;
}
inline ::agricultural::robot::navigation::v1::PlannerType NavigationOptions::_internal_planner() const {
  return static_cast< ::agricultural::robot::navigation::v1::PlannerType >(planner_);
}
inline ::agricultural::robot::navigation::v1::PlannerType NavigationOptions::planner() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.planner)
  return _internal_planner();
}
inline void NavigationOptions::_internal_set_planner(::agricultural::robot::navigation::v1::PlannerType value) {
  
  planner_ = value;
}
inline void NavigationOptions::set_planner(::agricultural::robot::navigation::v1::PlannerType value) {
  _internal_set_planner(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.planner)
}

// double tolerance_linear = 2;
inline void NavigationOptions::clear_tolerance_linear() {
  tolerance_linear_ = 0;
}
inline double NavigationOptions::_internal_tolerance_linear() const {
  return tolerance_linear_;
}
inline double NavigationOptions::tolerance_linear() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.tolerance_linear)
  return _internal_tolerance_linear();
}
inline void NavigationOptions::_internal_set_tolerance_linear(double value) {
  
  tolerance_linear_ = value;
}
inline void NavigationOptions::set_tolerance_linear(double value) {
  _internal_set_tolerance_linear(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.tolerance_linear)
}

// double tolerance_angular = 3;
inline void NavigationOptions::clear_tolerance_angular() {
  tolerance_angular_ = 0;
}
inline double NavigationOptions::_internal_tolerance_angular() const {
  return tolerance_angular_;
}
inline double NavigationOptions::tolerance_angular() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.tolerance_angular)
  return _internal_tolerance_angular();
}
inline void NavigationOptions::_internal_set_tolerance_angular(double value) {
  
  tolerance_angular_ = value;
}
inline void NavigationOptions::set_tolerance_angular(double value) {
  _internal_set_tolerance_angular(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.tolerance_angular)
}

// bool use_obstacle_avoidance = 4;
inline void NavigationOptions::clear_use_obstacle_avoidance() {
  use_obstacle_avoidance_ = false;
}
inline bool NavigationOptions::_internal_use_obstacle_avoidance() const {
  return use_obstacle_avoidance_;
}
inline bool NavigationOptions::use_obstacle_avoidance() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.use_obstacle_avoidance)
  return _internal_use_obstacle_avoidance();
}
inline void NavigationOptions::_internal_set_use_obstacle_avoidance(bool value) {
  
  use_obstacle_avoidance_ = value;
}
inline void NavigationOptions::set_use_obstacle_avoidance(bool value) {
  _internal_set_use_obstacle_avoidance(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.use_obstacle_avoidance)
}

// repeated string avoid_zones = 5;
inline int NavigationOptions::_internal_avoid_zones_size() const {
  return avoid_zones_.size();
}
inline int NavigationOptions::avoid_zones_size() const {
  return _internal_avoid_zones_size();
}
inline void NavigationOptions::clear_avoid_zones() {
  avoid_zones_.Clear();
}
inline std::string* NavigationOptions::add_avoid_zones() {
  // @@protoc_insertion_point(field_add_mutable:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  return _internal_add_avoid_zones();
}
inline const std::string& NavigationOptions::_internal_avoid_zones(int index) const {
  return avoid_zones_.Get(index);
}
inline const std::string& NavigationOptions::avoid_zones(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  return _internal_avoid_zones(index);
}
inline std::string* NavigationOptions::mutable_avoid_zones(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  return avoid_zones_.Mutable(index);
}
inline void NavigationOptions::set_avoid_zones(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  avoid_zones_.Mutable(index)->assign(value);
}
inline void NavigationOptions::set_avoid_zones(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  avoid_zones_.Mutable(index)->assign(std::move(value));
}
inline void NavigationOptions::set_avoid_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  avoid_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
}
inline void NavigationOptions::set_avoid_zones(int index, const char* value, size_t size) {
  avoid_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
}
inline std::string* NavigationOptions::_internal_add_avoid_zones() {
  return avoid_zones_.Add();
}
inline void NavigationOptions::add_avoid_zones(const std::string& value) {
  avoid_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
}
inline void NavigationOptions::add_avoid_zones(std::string&& value) {
  avoid_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
}
inline void NavigationOptions::add_avoid_zones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  avoid_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
}
inline void NavigationOptions::add_avoid_zones(const char* value, size_t size) {
  avoid_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NavigationOptions::avoid_zones() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  return avoid_zones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NavigationOptions::mutable_avoid_zones() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.NavigationOptions.avoid_zones)
  return &avoid_zones_;
}

// .agricultural.robot.navigation.v1.NavigationBehavior behavior = 6;
inline void NavigationOptions::clear_behavior() {
  behavior_ = 0;
}
inline ::agricultural::robot::navigation::v1::NavigationBehavior NavigationOptions::_internal_behavior() const {
  return static_cast< ::agricultural::robot::navigation::v1::NavigationBehavior >(behavior_);
}
inline ::agricultural::robot::navigation::v1::NavigationBehavior NavigationOptions::behavior() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.behavior)
  return _internal_behavior();
}
inline void NavigationOptions::_internal_set_behavior(::agricultural::robot::navigation::v1::NavigationBehavior value) {
  
  behavior_ = value;
}
inline void NavigationOptions::set_behavior(::agricultural::robot::navigation::v1::NavigationBehavior value) {
  _internal_set_behavior(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.behavior)
}

// uint32 max_planning_time_ms = 7;
inline void NavigationOptions::clear_max_planning_time_ms() {
  max_planning_time_ms_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationOptions::_internal_max_planning_time_ms() const {
  return max_planning_time_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationOptions::max_planning_time_ms() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.max_planning_time_ms)
  return _internal_max_planning_time_ms();
}
inline void NavigationOptions::_internal_set_max_planning_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_planning_time_ms_ = value;
}
inline void NavigationOptions::set_max_planning_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_planning_time_ms(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.max_planning_time_ms)
}

// uint32 max_retries = 8;
inline void NavigationOptions::clear_max_retries() {
  max_retries_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationOptions::_internal_max_retries() const {
  return max_retries_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationOptions::max_retries() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationOptions.max_retries)
  return _internal_max_retries();
}
inline void NavigationOptions::_internal_set_max_retries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_retries_ = value;
}
inline void NavigationOptions::set_max_retries(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_retries(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationOptions.max_retries)
}

// -------------------------------------------------------------------

// TrajectoryOptions

// bool interpolate_path = 1;
inline void TrajectoryOptions::clear_interpolate_path() {
  interpolate_path_ = false;
}
inline bool TrajectoryOptions::_internal_interpolate_path() const {
  return interpolate_path_;
}
inline bool TrajectoryOptions::interpolate_path() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryOptions.interpolate_path)
  return _internal_interpolate_path();
}
inline void TrajectoryOptions::_internal_set_interpolate_path(bool value) {
  
  interpolate_path_ = value;
}
inline void TrajectoryOptions::set_interpolate_path(bool value) {
  _internal_set_interpolate_path(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryOptions.interpolate_path)
}

// double velocity_scaling = 2;
inline void TrajectoryOptions::clear_velocity_scaling() {
  velocity_scaling_ = 0;
}
inline double TrajectoryOptions::_internal_velocity_scaling() const {
  return velocity_scaling_;
}
inline double TrajectoryOptions::velocity_scaling() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryOptions.velocity_scaling)
  return _internal_velocity_scaling();
}
inline void TrajectoryOptions::_internal_set_velocity_scaling(double value) {
  
  velocity_scaling_ = value;
}
inline void TrajectoryOptions::set_velocity_scaling(double value) {
  _internal_set_velocity_scaling(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryOptions.velocity_scaling)
}

// bool check_collisions = 3;
inline void TrajectoryOptions::clear_check_collisions() {
  check_collisions_ = false;
}
inline bool TrajectoryOptions::_internal_check_collisions() const {
  return check_collisions_;
}
inline bool TrajectoryOptions::check_collisions() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryOptions.check_collisions)
  return _internal_check_collisions();
}
inline void TrajectoryOptions::_internal_set_check_collisions(bool value) {
  
  check_collisions_ = value;
}
inline void TrajectoryOptions::set_check_collisions(bool value) {
  _internal_set_check_collisions(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryOptions.check_collisions)
}

// .agricultural.robot.navigation.v1.TrajectoryExecutionMode execution_mode = 4;
inline void TrajectoryOptions::clear_execution_mode() {
  execution_mode_ = 0;
}
inline ::agricultural::robot::navigation::v1::TrajectoryExecutionMode TrajectoryOptions::_internal_execution_mode() const {
  return static_cast< ::agricultural::robot::navigation::v1::TrajectoryExecutionMode >(execution_mode_);
}
inline ::agricultural::robot::navigation::v1::TrajectoryExecutionMode TrajectoryOptions::execution_mode() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.TrajectoryOptions.execution_mode)
  return _internal_execution_mode();
}
inline void TrajectoryOptions::_internal_set_execution_mode(::agricultural::robot::navigation::v1::TrajectoryExecutionMode value) {
  
  execution_mode_ = value;
}
inline void TrajectoryOptions::set_execution_mode(::agricultural::robot::navigation::v1::TrajectoryExecutionMode value) {
  _internal_set_execution_mode(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.TrajectoryOptions.execution_mode)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WaypointAction

// .agricultural.robot.navigation.v1.WaypointActionType type = 1;
inline void WaypointAction::clear_type() {
  type_ = 0;
}
inline ::agricultural::robot::navigation::v1::WaypointActionType WaypointAction::_internal_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::WaypointActionType >(type_);
}
inline ::agricultural::robot::navigation::v1::WaypointActionType WaypointAction::type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.WaypointAction.type)
  return _internal_type();
}
inline void WaypointAction::_internal_set_type(::agricultural::robot::navigation::v1::WaypointActionType value) {
  
  type_ = value;
}
inline void WaypointAction::set_type(::agricultural::robot::navigation::v1::WaypointActionType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.WaypointAction.type)
}

// .google.protobuf.Duration duration = 2;
inline bool WaypointAction::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool WaypointAction::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& WaypointAction::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& WaypointAction::duration() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.WaypointAction.duration)
  return _internal_duration();
}
inline void WaypointAction::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.WaypointAction.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* WaypointAction::release_duration() {
  auto temp = unsafe_arena_release_duration();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* WaypointAction::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.WaypointAction.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* WaypointAction::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* WaypointAction::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.WaypointAction.duration)
  return _internal_mutable_duration();
}
inline void WaypointAction::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.WaypointAction.duration)
}

// map<string, string> parameters = 3;
inline int WaypointAction::_internal_parameters_size() const {
  return parameters_.size();
}
inline int WaypointAction::parameters_size() const {
  return _internal_parameters_size();
}
inline void WaypointAction::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WaypointAction::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WaypointAction::parameters() const {
  // @@protoc_insertion_point(field_map:agricultural.robot.navigation.v1.WaypointAction.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WaypointAction::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WaypointAction::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:agricultural.robot.navigation.v1.WaypointAction.parameters)
  return _internal_mutable_parameters();
}

// -------------------------------------------------------------------

// CancelGoalRequest

// string robot_id = 1;
inline void CancelGoalRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CancelGoalRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
  return _internal_robot_id();
}
inline void CancelGoalRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
}
inline std::string* CancelGoalRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& CancelGoalRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void CancelGoalRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CancelGoalRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
}
inline void CancelGoalRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
}
inline void CancelGoalRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
}
inline std::string* CancelGoalRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CancelGoalRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelGoalRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
}
inline std::string* CancelGoalRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CancelGoalRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CancelGoalRequest.robot_id)
}

// string goal_id = 2;
inline bool CancelGoalRequest::_internal_has_goal_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CancelGoalRequest::has_goal_id() const {
  return _internal_has_goal_id();
}
inline void CancelGoalRequest::clear_goal_id() {
  goal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CancelGoalRequest::goal_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
  return _internal_goal_id();
}
inline void CancelGoalRequest::set_goal_id(const std::string& value) {
  _internal_set_goal_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
}
inline std::string* CancelGoalRequest::mutable_goal_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
  return _internal_mutable_goal_id();
}
inline const std::string& CancelGoalRequest::_internal_goal_id() const {
  return goal_id_.Get();
}
inline void CancelGoalRequest::_internal_set_goal_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CancelGoalRequest::set_goal_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  goal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
}
inline void CancelGoalRequest::set_goal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
}
inline void CancelGoalRequest::set_goal_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
}
inline std::string* CancelGoalRequest::_internal_mutable_goal_id() {
  _has_bits_[0] |= 0x00000001u;
  return goal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CancelGoalRequest::release_goal_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
  if (!_internal_has_goal_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return goal_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelGoalRequest::set_allocated_goal_id(std::string* goal_id) {
  if (goal_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  goal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
}
inline std::string* CancelGoalRequest::unsafe_arena_release_goal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return goal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CancelGoalRequest::unsafe_arena_set_allocated_goal_id(
    std::string* goal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (goal_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  goal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      goal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CancelGoalRequest.goal_id)
}

// -------------------------------------------------------------------

// GetNavigationStatusRequest

// string robot_id = 1;
inline void GetNavigationStatusRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetNavigationStatusRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
  return _internal_robot_id();
}
inline void GetNavigationStatusRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
}
inline std::string* GetNavigationStatusRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& GetNavigationStatusRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void GetNavigationStatusRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetNavigationStatusRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
}
inline void GetNavigationStatusRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
}
inline void GetNavigationStatusRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
}
inline std::string* GetNavigationStatusRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetNavigationStatusRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetNavigationStatusRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
}
inline std::string* GetNavigationStatusRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetNavigationStatusRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id)
}

// -------------------------------------------------------------------

// StreamNavigationStatusRequest

// string robot_id = 1;
inline void StreamNavigationStatusRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamNavigationStatusRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
  return _internal_robot_id();
}
inline void StreamNavigationStatusRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
}
inline std::string* StreamNavigationStatusRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& StreamNavigationStatusRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void StreamNavigationStatusRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamNavigationStatusRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
}
inline void StreamNavigationStatusRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
}
inline void StreamNavigationStatusRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
}
inline std::string* StreamNavigationStatusRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamNavigationStatusRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamNavigationStatusRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
}
inline std::string* StreamNavigationStatusRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamNavigationStatusRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id)
}

// uint32 frequency_hz = 2;
inline void StreamNavigationStatusRequest::clear_frequency_hz() {
  frequency_hz_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamNavigationStatusRequest::_internal_frequency_hz() const {
  return frequency_hz_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StreamNavigationStatusRequest::frequency_hz() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.frequency_hz)
  return _internal_frequency_hz();
}
inline void StreamNavigationStatusRequest::_internal_set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frequency_hz_ = value;
}
inline void StreamNavigationStatusRequest::set_frequency_hz(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frequency_hz(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamNavigationStatusRequest.frequency_hz)
}

// -------------------------------------------------------------------

// NavigationResponse

// bool success = 1;
inline void NavigationResponse::clear_success() {
  success_ = false;
}
inline bool NavigationResponse::_internal_success() const {
  return success_;
}
inline bool NavigationResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationResponse.success)
  return _internal_success();
}
inline void NavigationResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void NavigationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationResponse.success)
}

// string message = 2;
inline void NavigationResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationResponse.message)
  return _internal_message();
}
inline void NavigationResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationResponse.message)
}
inline std::string* NavigationResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationResponse.message)
  return _internal_mutable_message();
}
inline const std::string& NavigationResponse::_internal_message() const {
  return message_.Get();
}
inline void NavigationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationResponse.message)
}
inline void NavigationResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationResponse.message)
}
inline void NavigationResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationResponse.message)
}
inline std::string* NavigationResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationResponse.message)
}
inline std::string* NavigationResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationResponse.message)
}

// string goal_id = 3;
inline void NavigationResponse::clear_goal_id() {
  goal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationResponse::goal_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
  return _internal_goal_id();
}
inline void NavigationResponse::set_goal_id(const std::string& value) {
  _internal_set_goal_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
}
inline std::string* NavigationResponse::mutable_goal_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
  return _internal_mutable_goal_id();
}
inline const std::string& NavigationResponse::_internal_goal_id() const {
  return goal_id_.Get();
}
inline void NavigationResponse::_internal_set_goal_id(const std::string& value) {
  
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationResponse::set_goal_id(std::string&& value) {
  
  goal_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
}
inline void NavigationResponse::set_goal_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
}
inline void NavigationResponse::set_goal_id(const char* value,
    size_t size) {
  
  goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
}
inline std::string* NavigationResponse::_internal_mutable_goal_id() {
  
  return goal_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationResponse::release_goal_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
  return goal_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationResponse::set_allocated_goal_id(std::string* goal_id) {
  if (goal_id != nullptr) {
    
  } else {
    
  }
  goal_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), goal_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
}
inline std::string* NavigationResponse::unsafe_arena_release_goal_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return goal_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationResponse::unsafe_arena_set_allocated_goal_id(
    std::string* goal_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (goal_id != nullptr) {
    
  } else {
    
  }
  goal_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      goal_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationResponse.goal_id)
}

// .agricultural.robot.navigation.v1.NavigationResult result = 4;
inline void NavigationResponse::clear_result() {
  result_ = 0;
}
inline ::agricultural::robot::navigation::v1::NavigationResult NavigationResponse::_internal_result() const {
  return static_cast< ::agricultural::robot::navigation::v1::NavigationResult >(result_);
}
inline ::agricultural::robot::navigation::v1::NavigationResult NavigationResponse::result() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationResponse.result)
  return _internal_result();
}
inline void NavigationResponse::_internal_set_result(::agricultural::robot::navigation::v1::NavigationResult value) {
  
  result_ = value;
}
inline void NavigationResponse::set_result(::agricultural::robot::navigation::v1::NavigationResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationResponse.result)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool NavigationResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool NavigationResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationResponse.timestamp)
  return _internal_timestamp();
}
inline void NavigationResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void NavigationResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationResponse.timestamp)
}

// -------------------------------------------------------------------

// NavigationStatusResponse

// .agricultural.robot.navigation.v1.NavigationStatus status = 1;
inline void NavigationStatusResponse::clear_status() {
  status_ = 0;
}
inline ::agricultural::robot::navigation::v1::NavigationStatus NavigationStatusResponse::_internal_status() const {
  return static_cast< ::agricultural::robot::navigation::v1::NavigationStatus >(status_);
}
inline ::agricultural::robot::navigation::v1::NavigationStatus NavigationStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusResponse.status)
  return _internal_status();
}
inline void NavigationStatusResponse::_internal_set_status(::agricultural::robot::navigation::v1::NavigationStatus value) {
  
  status_ = value;
}
inline void NavigationStatusResponse::set_status(::agricultural::robot::navigation::v1::NavigationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationStatusResponse.status)
}

// .agricultural.robot.navigation.v1.NavigationProgress progress = 2;
inline bool NavigationStatusResponse::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool NavigationStatusResponse::has_progress() const {
  return _internal_has_progress();
}
inline void NavigationStatusResponse::clear_progress() {
  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::NavigationProgress& NavigationStatusResponse::_internal_progress() const {
  const ::agricultural::robot::navigation::v1::NavigationProgress* p = progress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::NavigationProgress*>(
      &::agricultural::robot::navigation::v1::_NavigationProgress_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::NavigationProgress& NavigationStatusResponse::progress() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusResponse.progress)
  return _internal_progress();
}
inline void NavigationStatusResponse::unsafe_arena_set_allocated_progress(
    ::agricultural::robot::navigation::v1::NavigationProgress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusResponse.progress)
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusResponse::release_progress() {
  auto temp = unsafe_arena_release_progress();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusResponse::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusResponse.progress)
  
  ::agricultural::robot::navigation::v1::NavigationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusResponse::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationProgress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusResponse::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusResponse.progress)
  return _internal_mutable_progress();
}
inline void NavigationStatusResponse::set_allocated_progress(::agricultural::robot::navigation::v1::NavigationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusResponse.progress)
}

// .agricultural.robot.navigation.v1.NavigationGoal current_goal = 3;
inline bool NavigationStatusResponse::_internal_has_current_goal() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || current_goal_ != nullptr);
  return value;
}
inline bool NavigationStatusResponse::has_current_goal() const {
  return _internal_has_current_goal();
}
inline void NavigationStatusResponse::clear_current_goal() {
  if (GetArena() == nullptr && current_goal_ != nullptr) {
    delete current_goal_;
  }
  current_goal_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agricultural::robot::navigation::v1::NavigationGoal& NavigationStatusResponse::_internal_current_goal() const {
  const ::agricultural::robot::navigation::v1::NavigationGoal* p = current_goal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::NavigationGoal*>(
      &::agricultural::robot::navigation::v1::_NavigationGoal_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::NavigationGoal& NavigationStatusResponse::current_goal() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusResponse.current_goal)
  return _internal_current_goal();
}
inline void NavigationStatusResponse::unsafe_arena_set_allocated_current_goal(
    ::agricultural::robot::navigation::v1::NavigationGoal* current_goal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_goal_);
  }
  current_goal_ = current_goal;
  if (current_goal) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusResponse.current_goal)
}
inline ::agricultural::robot::navigation::v1::NavigationGoal* NavigationStatusResponse::release_current_goal() {
  auto temp = unsafe_arena_release_current_goal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationGoal* NavigationStatusResponse::unsafe_arena_release_current_goal() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusResponse.current_goal)
  _has_bits_[0] &= ~0x00000001u;
  ::agricultural::robot::navigation::v1::NavigationGoal* temp = current_goal_;
  current_goal_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationGoal* NavigationStatusResponse::_internal_mutable_current_goal() {
  _has_bits_[0] |= 0x00000001u;
  if (current_goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationGoal>(GetArena());
    current_goal_ = p;
  }
  return current_goal_;
}
inline ::agricultural::robot::navigation::v1::NavigationGoal* NavigationStatusResponse::mutable_current_goal() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusResponse.current_goal)
  return _internal_mutable_current_goal();
}
inline void NavigationStatusResponse::set_allocated_current_goal(::agricultural::robot::navigation::v1::NavigationGoal* current_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_goal_;
  }
  if (current_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_goal);
    if (message_arena != submessage_arena) {
      current_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_goal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  current_goal_ = current_goal;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusResponse.current_goal)
}

// repeated .agricultural.robot.navigation.v1.NavigationError errors = 4;
inline int NavigationStatusResponse::_internal_errors_size() const {
  return errors_.size();
}
inline int NavigationStatusResponse::errors_size() const {
  return _internal_errors_size();
}
inline void NavigationStatusResponse::clear_errors() {
  errors_.Clear();
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusResponse.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::NavigationError >*
NavigationStatusResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.NavigationStatusResponse.errors)
  return &errors_;
}
inline const ::agricultural::robot::navigation::v1::NavigationError& NavigationStatusResponse::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::agricultural::robot::navigation::v1::NavigationError& NavigationStatusResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusResponse.errors)
  return _internal_errors(index);
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusResponse::_internal_add_errors() {
  return errors_.Add();
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusResponse::add_errors() {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.NavigationStatusResponse.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::NavigationError >&
NavigationStatusResponse::errors() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.NavigationStatusResponse.errors)
  return errors_;
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool NavigationStatusResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool NavigationStatusResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationStatusResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationStatusResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusResponse.timestamp)
  return _internal_timestamp();
}
inline void NavigationStatusResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void NavigationStatusResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusResponse.timestamp)
}

// -------------------------------------------------------------------

// NavigationStatusUpdate

// string robot_id = 1;
inline void NavigationStatusUpdate::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationStatusUpdate::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
  return _internal_robot_id();
}
inline void NavigationStatusUpdate::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
}
inline std::string* NavigationStatusUpdate::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& NavigationStatusUpdate::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void NavigationStatusUpdate::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationStatusUpdate::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
}
inline void NavigationStatusUpdate::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
}
inline void NavigationStatusUpdate::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
}
inline std::string* NavigationStatusUpdate::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationStatusUpdate::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationStatusUpdate::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
}
inline std::string* NavigationStatusUpdate::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationStatusUpdate::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id)
}

// .agricultural.robot.navigation.v1.NavigationStatus status = 2;
inline void NavigationStatusUpdate::clear_status() {
  status_ = 0;
}
inline ::agricultural::robot::navigation::v1::NavigationStatus NavigationStatusUpdate::_internal_status() const {
  return static_cast< ::agricultural::robot::navigation::v1::NavigationStatus >(status_);
}
inline ::agricultural::robot::navigation::v1::NavigationStatus NavigationStatusUpdate::status() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusUpdate.status)
  return _internal_status();
}
inline void NavigationStatusUpdate::_internal_set_status(::agricultural::robot::navigation::v1::NavigationStatus value) {
  
  status_ = value;
}
inline void NavigationStatusUpdate::set_status(::agricultural::robot::navigation::v1::NavigationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationStatusUpdate.status)
}

// .agricultural.robot.navigation.v1.NavigationProgress progress = 3;
inline bool NavigationStatusUpdate::_internal_has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline bool NavigationStatusUpdate::has_progress() const {
  return _internal_has_progress();
}
inline void NavigationStatusUpdate::clear_progress() {
  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::NavigationProgress& NavigationStatusUpdate::_internal_progress() const {
  const ::agricultural::robot::navigation::v1::NavigationProgress* p = progress_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::NavigationProgress*>(
      &::agricultural::robot::navigation::v1::_NavigationProgress_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::NavigationProgress& NavigationStatusUpdate::progress() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusUpdate.progress)
  return _internal_progress();
}
inline void NavigationStatusUpdate::unsafe_arena_set_allocated_progress(
    ::agricultural::robot::navigation::v1::NavigationProgress* progress) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(progress_);
  }
  progress_ = progress;
  if (progress) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.progress)
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusUpdate::release_progress() {
  auto temp = unsafe_arena_release_progress();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusUpdate::unsafe_arena_release_progress() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusUpdate.progress)
  
  ::agricultural::robot::navigation::v1::NavigationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusUpdate::_internal_mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationProgress>(GetArena());
    progress_ = p;
  }
  return progress_;
}
inline ::agricultural::robot::navigation::v1::NavigationProgress* NavigationStatusUpdate::mutable_progress() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusUpdate.progress)
  return _internal_mutable_progress();
}
inline void NavigationStatusUpdate::set_allocated_progress(::agricultural::robot::navigation::v1::NavigationProgress* progress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(progress);
    if (message_arena != submessage_arena) {
      progress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.progress)
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool NavigationStatusUpdate::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool NavigationStatusUpdate::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationStatusUpdate::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationStatusUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusUpdate.timestamp)
  return _internal_timestamp();
}
inline void NavigationStatusUpdate::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusUpdate::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusUpdate::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusUpdate.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusUpdate::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationStatusUpdate::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusUpdate.timestamp)
  return _internal_mutable_timestamp();
}
inline void NavigationStatusUpdate::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.timestamp)
}

// .agricultural.robot.navigation.v1.NavigationError error = 5;
inline bool NavigationStatusUpdate::_internal_has_error() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || error_ != nullptr);
  return value;
}
inline bool NavigationStatusUpdate::has_error() const {
  return _internal_has_error();
}
inline void NavigationStatusUpdate::clear_error() {
  if (GetArena() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agricultural::robot::navigation::v1::NavigationError& NavigationStatusUpdate::_internal_error() const {
  const ::agricultural::robot::navigation::v1::NavigationError* p = error_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::NavigationError*>(
      &::agricultural::robot::navigation::v1::_NavigationError_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::NavigationError& NavigationStatusUpdate::error() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationStatusUpdate.error)
  return _internal_error();
}
inline void NavigationStatusUpdate::unsafe_arena_set_allocated_error(
    ::agricultural::robot::navigation::v1::NavigationError* error) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error_);
  }
  error_ = error;
  if (error) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.error)
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusUpdate::release_error() {
  auto temp = unsafe_arena_release_error();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusUpdate::unsafe_arena_release_error() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationStatusUpdate.error)
  _has_bits_[0] &= ~0x00000001u;
  ::agricultural::robot::navigation::v1::NavigationError* temp = error_;
  error_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusUpdate::_internal_mutable_error() {
  _has_bits_[0] |= 0x00000001u;
  if (error_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::NavigationError>(GetArena());
    error_ = p;
  }
  return error_;
}
inline ::agricultural::robot::navigation::v1::NavigationError* NavigationStatusUpdate::mutable_error() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationStatusUpdate.error)
  return _internal_mutable_error();
}
inline void NavigationStatusUpdate::set_allocated_error(::agricultural::robot::navigation::v1::NavigationError* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete error_;
  }
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(error);
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationStatusUpdate.error)
}

// -------------------------------------------------------------------

// NavigationProgress

// double distance_remaining = 1;
inline void NavigationProgress::clear_distance_remaining() {
  distance_remaining_ = 0;
}
inline double NavigationProgress::_internal_distance_remaining() const {
  return distance_remaining_;
}
inline double NavigationProgress::distance_remaining() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.distance_remaining)
  return _internal_distance_remaining();
}
inline void NavigationProgress::_internal_set_distance_remaining(double value) {
  
  distance_remaining_ = value;
}
inline void NavigationProgress::set_distance_remaining(double value) {
  _internal_set_distance_remaining(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationProgress.distance_remaining)
}

// double distance_traveled = 2;
inline void NavigationProgress::clear_distance_traveled() {
  distance_traveled_ = 0;
}
inline double NavigationProgress::_internal_distance_traveled() const {
  return distance_traveled_;
}
inline double NavigationProgress::distance_traveled() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.distance_traveled)
  return _internal_distance_traveled();
}
inline void NavigationProgress::_internal_set_distance_traveled(double value) {
  
  distance_traveled_ = value;
}
inline void NavigationProgress::set_distance_traveled(double value) {
  _internal_set_distance_traveled(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationProgress.distance_traveled)
}

// .google.protobuf.Duration time_remaining = 3;
inline bool NavigationProgress::_internal_has_time_remaining() const {
  return this != internal_default_instance() && time_remaining_ != nullptr;
}
inline bool NavigationProgress::has_time_remaining() const {
  return _internal_has_time_remaining();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& NavigationProgress::_internal_time_remaining() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = time_remaining_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& NavigationProgress::time_remaining() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.time_remaining)
  return _internal_time_remaining();
}
inline void NavigationProgress::unsafe_arena_set_allocated_time_remaining(
    PROTOBUF_NAMESPACE_ID::Duration* time_remaining) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_remaining_);
  }
  time_remaining_ = time_remaining;
  if (time_remaining) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationProgress.time_remaining)
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::release_time_remaining() {
  auto temp = unsafe_arena_release_time_remaining();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::unsafe_arena_release_time_remaining() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationProgress.time_remaining)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_remaining_;
  time_remaining_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::_internal_mutable_time_remaining() {
  
  if (time_remaining_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    time_remaining_ = p;
  }
  return time_remaining_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::mutable_time_remaining() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationProgress.time_remaining)
  return _internal_mutable_time_remaining();
}
inline void NavigationProgress::set_allocated_time_remaining(PROTOBUF_NAMESPACE_ID::Duration* time_remaining) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_remaining_);
  }
  if (time_remaining) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_remaining)->GetArena();
    if (message_arena != submessage_arena) {
      time_remaining = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_remaining, submessage_arena);
    }
    
  } else {
    
  }
  time_remaining_ = time_remaining;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationProgress.time_remaining)
}

// .google.protobuf.Duration time_elapsed = 4;
inline bool NavigationProgress::_internal_has_time_elapsed() const {
  return this != internal_default_instance() && time_elapsed_ != nullptr;
}
inline bool NavigationProgress::has_time_elapsed() const {
  return _internal_has_time_elapsed();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& NavigationProgress::_internal_time_elapsed() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = time_elapsed_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& NavigationProgress::time_elapsed() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.time_elapsed)
  return _internal_time_elapsed();
}
inline void NavigationProgress::unsafe_arena_set_allocated_time_elapsed(
    PROTOBUF_NAMESPACE_ID::Duration* time_elapsed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_elapsed_);
  }
  time_elapsed_ = time_elapsed;
  if (time_elapsed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationProgress.time_elapsed)
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::release_time_elapsed() {
  auto temp = unsafe_arena_release_time_elapsed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::unsafe_arena_release_time_elapsed() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationProgress.time_elapsed)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = time_elapsed_;
  time_elapsed_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::_internal_mutable_time_elapsed() {
  
  if (time_elapsed_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    time_elapsed_ = p;
  }
  return time_elapsed_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* NavigationProgress::mutable_time_elapsed() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationProgress.time_elapsed)
  return _internal_mutable_time_elapsed();
}
inline void NavigationProgress::set_allocated_time_elapsed(PROTOBUF_NAMESPACE_ID::Duration* time_elapsed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_elapsed_);
  }
  if (time_elapsed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_elapsed)->GetArena();
    if (message_arena != submessage_arena) {
      time_elapsed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_elapsed, submessage_arena);
    }
    
  } else {
    
  }
  time_elapsed_ = time_elapsed;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationProgress.time_elapsed)
}

// uint32 current_waypoint_index = 5;
inline void NavigationProgress::clear_current_waypoint_index() {
  current_waypoint_index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationProgress::_internal_current_waypoint_index() const {
  return current_waypoint_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationProgress::current_waypoint_index() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.current_waypoint_index)
  return _internal_current_waypoint_index();
}
inline void NavigationProgress::_internal_set_current_waypoint_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_waypoint_index_ = value;
}
inline void NavigationProgress::set_current_waypoint_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current_waypoint_index(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationProgress.current_waypoint_index)
}

// uint32 total_waypoints = 6;
inline void NavigationProgress::clear_total_waypoints() {
  total_waypoints_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationProgress::_internal_total_waypoints() const {
  return total_waypoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NavigationProgress::total_waypoints() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.total_waypoints)
  return _internal_total_waypoints();
}
inline void NavigationProgress::_internal_set_total_waypoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_waypoints_ = value;
}
inline void NavigationProgress::set_total_waypoints(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_total_waypoints(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationProgress.total_waypoints)
}

// double completion_percentage = 7;
inline void NavigationProgress::clear_completion_percentage() {
  completion_percentage_ = 0;
}
inline double NavigationProgress::_internal_completion_percentage() const {
  return completion_percentage_;
}
inline double NavigationProgress::completion_percentage() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationProgress.completion_percentage)
  return _internal_completion_percentage();
}
inline void NavigationProgress::_internal_set_completion_percentage(double value) {
  
  completion_percentage_ = value;
}
inline void NavigationProgress::set_completion_percentage(double value) {
  _internal_set_completion_percentage(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationProgress.completion_percentage)
}

// -------------------------------------------------------------------

// NavigationError

// .agricultural.robot.navigation.v1.NavigationErrorCode code = 1;
inline void NavigationError::clear_code() {
  code_ = 0;
}
inline ::agricultural::robot::navigation::v1::NavigationErrorCode NavigationError::_internal_code() const {
  return static_cast< ::agricultural::robot::navigation::v1::NavigationErrorCode >(code_);
}
inline ::agricultural::robot::navigation::v1::NavigationErrorCode NavigationError::code() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationError.code)
  return _internal_code();
}
inline void NavigationError::_internal_set_code(::agricultural::robot::navigation::v1::NavigationErrorCode value) {
  
  code_ = value;
}
inline void NavigationError::set_code(::agricultural::robot::navigation::v1::NavigationErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationError.code)
}

// string description = 2;
inline void NavigationError::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NavigationError::description() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationError.description)
  return _internal_description();
}
inline void NavigationError::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationError.description)
}
inline std::string* NavigationError::mutable_description() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationError.description)
  return _internal_mutable_description();
}
inline const std::string& NavigationError::_internal_description() const {
  return description_.Get();
}
inline void NavigationError::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NavigationError::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.NavigationError.description)
}
inline void NavigationError::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationError.description)
}
inline void NavigationError::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationError.description)
}
inline std::string* NavigationError::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NavigationError::release_description() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationError.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NavigationError::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationError.description)
}
inline std::string* NavigationError::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.NavigationError.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NavigationError::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationError.description)
}

// .google.protobuf.Timestamp occurred_at = 3;
inline bool NavigationError::_internal_has_occurred_at() const {
  return this != internal_default_instance() && occurred_at_ != nullptr;
}
inline bool NavigationError::has_occurred_at() const {
  return _internal_has_occurred_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationError::_internal_occurred_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = occurred_at_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NavigationError::occurred_at() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationError.occurred_at)
  return _internal_occurred_at();
}
inline void NavigationError::unsafe_arena_set_allocated_occurred_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  occurred_at_ = occurred_at;
  if (occurred_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.NavigationError.occurred_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationError::release_occurred_at() {
  auto temp = unsafe_arena_release_occurred_at();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationError::unsafe_arena_release_occurred_at() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.NavigationError.occurred_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = occurred_at_;
  occurred_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationError::_internal_mutable_occurred_at() {
  
  if (occurred_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    occurred_at_ = p;
  }
  return occurred_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NavigationError::mutable_occurred_at() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationError.occurred_at)
  return _internal_mutable_occurred_at();
}
inline void NavigationError::set_allocated_occurred_at(PROTOBUF_NAMESPACE_ID::Timestamp* occurred_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at_);
  }
  if (occurred_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(occurred_at)->GetArena();
    if (message_arena != submessage_arena) {
      occurred_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occurred_at, submessage_arena);
    }
    
  } else {
    
  }
  occurred_at_ = occurred_at;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.NavigationError.occurred_at)
}

// bool recoverable = 4;
inline void NavigationError::clear_recoverable() {
  recoverable_ = false;
}
inline bool NavigationError::_internal_recoverable() const {
  return recoverable_;
}
inline bool NavigationError::recoverable() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationError.recoverable)
  return _internal_recoverable();
}
inline void NavigationError::_internal_set_recoverable(bool value) {
  
  recoverable_ = value;
}
inline void NavigationError::set_recoverable(bool value) {
  _internal_set_recoverable(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationError.recoverable)
}

// repeated string suggested_actions = 5;
inline int NavigationError::_internal_suggested_actions_size() const {
  return suggested_actions_.size();
}
inline int NavigationError::suggested_actions_size() const {
  return _internal_suggested_actions_size();
}
inline void NavigationError::clear_suggested_actions() {
  suggested_actions_.Clear();
}
inline std::string* NavigationError::add_suggested_actions() {
  // @@protoc_insertion_point(field_add_mutable:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  return _internal_add_suggested_actions();
}
inline const std::string& NavigationError::_internal_suggested_actions(int index) const {
  return suggested_actions_.Get(index);
}
inline const std::string& NavigationError::suggested_actions(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  return _internal_suggested_actions(index);
}
inline std::string* NavigationError::mutable_suggested_actions(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  return suggested_actions_.Mutable(index);
}
inline void NavigationError::set_suggested_actions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  suggested_actions_.Mutable(index)->assign(value);
}
inline void NavigationError::set_suggested_actions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  suggested_actions_.Mutable(index)->assign(std::move(value));
}
inline void NavigationError::set_suggested_actions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  suggested_actions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
}
inline void NavigationError::set_suggested_actions(int index, const char* value, size_t size) {
  suggested_actions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
}
inline std::string* NavigationError::_internal_add_suggested_actions() {
  return suggested_actions_.Add();
}
inline void NavigationError::add_suggested_actions(const std::string& value) {
  suggested_actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
}
inline void NavigationError::add_suggested_actions(std::string&& value) {
  suggested_actions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
}
inline void NavigationError::add_suggested_actions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  suggested_actions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
}
inline void NavigationError::add_suggested_actions(const char* value, size_t size) {
  suggested_actions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NavigationError::suggested_actions() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  return suggested_actions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NavigationError::mutable_suggested_actions() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.NavigationError.suggested_actions)
  return &suggested_actions_;
}

// -------------------------------------------------------------------

// GetCameraInfoRequest

// string robot_id = 1;
inline void GetCameraInfoRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCameraInfoRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
  return _internal_robot_id();
}
inline void GetCameraInfoRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
}
inline std::string* GetCameraInfoRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& GetCameraInfoRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void GetCameraInfoRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCameraInfoRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
}
inline void GetCameraInfoRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
}
inline void GetCameraInfoRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
}
inline std::string* GetCameraInfoRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCameraInfoRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCameraInfoRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
}
inline std::string* GetCameraInfoRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetCameraInfoRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id)
}

// string camera_id = 2;
inline void GetCameraInfoRequest::clear_camera_id() {
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCameraInfoRequest::camera_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
  return _internal_camera_id();
}
inline void GetCameraInfoRequest::set_camera_id(const std::string& value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
}
inline std::string* GetCameraInfoRequest::mutable_camera_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
  return _internal_mutable_camera_id();
}
inline const std::string& GetCameraInfoRequest::_internal_camera_id() const {
  return camera_id_.Get();
}
inline void GetCameraInfoRequest::_internal_set_camera_id(const std::string& value) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCameraInfoRequest::set_camera_id(std::string&& value) {
  
  camera_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
}
inline void GetCameraInfoRequest::set_camera_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
}
inline void GetCameraInfoRequest::set_camera_id(const char* value,
    size_t size) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
}
inline std::string* GetCameraInfoRequest::_internal_mutable_camera_id() {
  
  return camera_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCameraInfoRequest::release_camera_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
  return camera_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCameraInfoRequest::set_allocated_camera_id(std::string* camera_id) {
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
}
inline std::string* GetCameraInfoRequest::unsafe_arena_release_camera_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetCameraInfoRequest::unsafe_arena_set_allocated_camera_id(
    std::string* camera_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id)
}

// -------------------------------------------------------------------

// StreamVideoRequest

// string robot_id = 1;
inline void StreamVideoRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamVideoRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
  return _internal_robot_id();
}
inline void StreamVideoRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
}
inline std::string* StreamVideoRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& StreamVideoRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void StreamVideoRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamVideoRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
}
inline void StreamVideoRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
}
inline void StreamVideoRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
}
inline std::string* StreamVideoRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamVideoRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamVideoRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
}
inline std::string* StreamVideoRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamVideoRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StreamVideoRequest.robot_id)
}

// string camera_id = 2;
inline void StreamVideoRequest::clear_camera_id() {
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StreamVideoRequest::camera_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
  return _internal_camera_id();
}
inline void StreamVideoRequest::set_camera_id(const std::string& value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
}
inline std::string* StreamVideoRequest::mutable_camera_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
  return _internal_mutable_camera_id();
}
inline const std::string& StreamVideoRequest::_internal_camera_id() const {
  return camera_id_.Get();
}
inline void StreamVideoRequest::_internal_set_camera_id(const std::string& value) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StreamVideoRequest::set_camera_id(std::string&& value) {
  
  camera_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
}
inline void StreamVideoRequest::set_camera_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
}
inline void StreamVideoRequest::set_camera_id(const char* value,
    size_t size) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
}
inline std::string* StreamVideoRequest::_internal_mutable_camera_id() {
  
  return camera_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StreamVideoRequest::release_camera_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
  return camera_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StreamVideoRequest::set_allocated_camera_id(std::string* camera_id) {
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
}
inline std::string* StreamVideoRequest::unsafe_arena_release_camera_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StreamVideoRequest::unsafe_arena_set_allocated_camera_id(
    std::string* camera_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StreamVideoRequest.camera_id)
}

// .agricultural.robot.navigation.v1.VideoStreamOptions options = 3;
inline bool StreamVideoRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool StreamVideoRequest::has_options() const {
  return _internal_has_options();
}
inline void StreamVideoRequest::clear_options() {
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::VideoStreamOptions& StreamVideoRequest::_internal_options() const {
  const ::agricultural::robot::navigation::v1::VideoStreamOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::VideoStreamOptions*>(
      &::agricultural::robot::navigation::v1::_VideoStreamOptions_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::VideoStreamOptions& StreamVideoRequest::options() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.StreamVideoRequest.options)
  return _internal_options();
}
inline void StreamVideoRequest::unsafe_arena_set_allocated_options(
    ::agricultural::robot::navigation::v1::VideoStreamOptions* options) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(options_);
  }
  options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.StreamVideoRequest.options)
}
inline ::agricultural::robot::navigation::v1::VideoStreamOptions* StreamVideoRequest::release_options() {
  auto temp = unsafe_arena_release_options();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::VideoStreamOptions* StreamVideoRequest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.StreamVideoRequest.options)
  
  ::agricultural::robot::navigation::v1::VideoStreamOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::VideoStreamOptions* StreamVideoRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::VideoStreamOptions>(GetArena());
    options_ = p;
  }
  return options_;
}
inline ::agricultural::robot::navigation::v1::VideoStreamOptions* StreamVideoRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.StreamVideoRequest.options)
  return _internal_mutable_options();
}
inline void StreamVideoRequest::set_allocated_options(::agricultural::robot::navigation::v1::VideoStreamOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.StreamVideoRequest.options)
}

// -------------------------------------------------------------------

// CameraControlRequest

// string robot_id = 1;
inline void CameraControlRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraControlRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
  return _internal_robot_id();
}
inline void CameraControlRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
}
inline std::string* CameraControlRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& CameraControlRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void CameraControlRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraControlRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
}
inline void CameraControlRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
}
inline void CameraControlRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
}
inline std::string* CameraControlRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraControlRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraControlRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
}
inline std::string* CameraControlRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraControlRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraControlRequest.robot_id)
}

// string camera_id = 2;
inline void CameraControlRequest::clear_camera_id() {
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraControlRequest::camera_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
  return _internal_camera_id();
}
inline void CameraControlRequest::set_camera_id(const std::string& value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
}
inline std::string* CameraControlRequest::mutable_camera_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
  return _internal_mutable_camera_id();
}
inline const std::string& CameraControlRequest::_internal_camera_id() const {
  return camera_id_.Get();
}
inline void CameraControlRequest::_internal_set_camera_id(const std::string& value) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraControlRequest::set_camera_id(std::string&& value) {
  
  camera_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
}
inline void CameraControlRequest::set_camera_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
}
inline void CameraControlRequest::set_camera_id(const char* value,
    size_t size) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
}
inline std::string* CameraControlRequest::_internal_mutable_camera_id() {
  
  return camera_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraControlRequest::release_camera_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
  return camera_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraControlRequest::set_allocated_camera_id(std::string* camera_id) {
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
}
inline std::string* CameraControlRequest::unsafe_arena_release_camera_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraControlRequest::unsafe_arena_set_allocated_camera_id(
    std::string* camera_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraControlRequest.camera_id)
}

// .agricultural.robot.navigation.v1.CameraControlCommand command = 3;
inline bool CameraControlRequest::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool CameraControlRequest::has_command() const {
  return _internal_has_command();
}
inline void CameraControlRequest::clear_command() {
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::CameraControlCommand& CameraControlRequest::_internal_command() const {
  const ::agricultural::robot::navigation::v1::CameraControlCommand* p = command_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::CameraControlCommand*>(
      &::agricultural::robot::navigation::v1::_CameraControlCommand_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::CameraControlCommand& CameraControlRequest::command() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlRequest.command)
  return _internal_command();
}
inline void CameraControlRequest::unsafe_arena_set_allocated_command(
    ::agricultural::robot::navigation::v1::CameraControlCommand* command) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraControlRequest.command)
}
inline ::agricultural::robot::navigation::v1::CameraControlCommand* CameraControlRequest::release_command() {
  auto temp = unsafe_arena_release_command();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::CameraControlCommand* CameraControlRequest::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraControlRequest.command)
  
  ::agricultural::robot::navigation::v1::CameraControlCommand* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::CameraControlCommand* CameraControlRequest::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraControlCommand>(GetArena());
    command_ = p;
  }
  return command_;
}
inline ::agricultural::robot::navigation::v1::CameraControlCommand* CameraControlRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraControlRequest.command)
  return _internal_mutable_command();
}
inline void CameraControlRequest::set_allocated_command(::agricultural::robot::navigation::v1::CameraControlCommand* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraControlRequest.command)
}

// -------------------------------------------------------------------

// CameraInfoResponse

// bool success = 1;
inline void CameraInfoResponse::clear_success() {
  success_ = false;
}
inline bool CameraInfoResponse::_internal_success() const {
  return success_;
}
inline bool CameraInfoResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfoResponse.success)
  return _internal_success();
}
inline void CameraInfoResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CameraInfoResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfoResponse.success)
}

// string message = 2;
inline void CameraInfoResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraInfoResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfoResponse.message)
  return _internal_message();
}
inline void CameraInfoResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfoResponse.message)
}
inline std::string* CameraInfoResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfoResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CameraInfoResponse::_internal_message() const {
  return message_.Get();
}
inline void CameraInfoResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraInfoResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraInfoResponse.message)
}
inline void CameraInfoResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraInfoResponse.message)
}
inline void CameraInfoResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraInfoResponse.message)
}
inline std::string* CameraInfoResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraInfoResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfoResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfoResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfoResponse.message)
}
inline std::string* CameraInfoResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraInfoResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraInfoResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfoResponse.message)
}

// repeated .agricultural.robot.navigation.v1.CameraInfo cameras = 3;
inline int CameraInfoResponse::_internal_cameras_size() const {
  return cameras_.size();
}
inline int CameraInfoResponse::cameras_size() const {
  return _internal_cameras_size();
}
inline void CameraInfoResponse::clear_cameras() {
  cameras_.Clear();
}
inline ::agricultural::robot::navigation::v1::CameraInfo* CameraInfoResponse::mutable_cameras(int index) {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfoResponse.cameras)
  return cameras_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::CameraInfo >*
CameraInfoResponse::mutable_cameras() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.CameraInfoResponse.cameras)
  return &cameras_;
}
inline const ::agricultural::robot::navigation::v1::CameraInfo& CameraInfoResponse::_internal_cameras(int index) const {
  return cameras_.Get(index);
}
inline const ::agricultural::robot::navigation::v1::CameraInfo& CameraInfoResponse::cameras(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfoResponse.cameras)
  return _internal_cameras(index);
}
inline ::agricultural::robot::navigation::v1::CameraInfo* CameraInfoResponse::_internal_add_cameras() {
  return cameras_.Add();
}
inline ::agricultural::robot::navigation::v1::CameraInfo* CameraInfoResponse::add_cameras() {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.CameraInfoResponse.cameras)
  return _internal_add_cameras();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::agricultural::robot::navigation::v1::CameraInfo >&
CameraInfoResponse::cameras() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.CameraInfoResponse.cameras)
  return cameras_;
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool CameraInfoResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool CameraInfoResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraInfoResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraInfoResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfoResponse.timestamp)
  return _internal_timestamp();
}
inline void CameraInfoResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfoResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraInfoResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraInfoResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfoResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraInfoResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraInfoResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfoResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void CameraInfoResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfoResponse.timestamp)
}

// -------------------------------------------------------------------

// CameraInfo

// string camera_id = 1;
inline void CameraInfo::clear_camera_id() {
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraInfo::camera_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.camera_id)
  return _internal_camera_id();
}
inline void CameraInfo::set_camera_id(const std::string& value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.camera_id)
}
inline std::string* CameraInfo::mutable_camera_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfo.camera_id)
  return _internal_mutable_camera_id();
}
inline const std::string& CameraInfo::_internal_camera_id() const {
  return camera_id_.Get();
}
inline void CameraInfo::_internal_set_camera_id(const std::string& value) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraInfo::set_camera_id(std::string&& value) {
  
  camera_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraInfo.camera_id)
}
inline void CameraInfo::set_camera_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraInfo.camera_id)
}
inline void CameraInfo::set_camera_id(const char* value,
    size_t size) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraInfo.camera_id)
}
inline std::string* CameraInfo::_internal_mutable_camera_id() {
  
  return camera_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraInfo::release_camera_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfo.camera_id)
  return camera_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_camera_id(std::string* camera_id) {
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfo.camera_id)
}
inline std::string* CameraInfo::unsafe_arena_release_camera_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraInfo.camera_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraInfo::unsafe_arena_set_allocated_camera_id(
    std::string* camera_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfo.camera_id)
}

// string name = 2;
inline void CameraInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraInfo::name() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.name)
  return _internal_name();
}
inline void CameraInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.name)
}
inline std::string* CameraInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CameraInfo::_internal_name() const {
  return name_.Get();
}
inline void CameraInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraInfo.name)
}
inline void CameraInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraInfo.name)
}
inline void CameraInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraInfo.name)
}
inline std::string* CameraInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraInfo::release_name() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfo.name)
}
inline std::string* CameraInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfo.name)
}

// .agricultural.robot.navigation.v1.CameraType type = 3;
inline void CameraInfo::clear_type() {
  type_ = 0;
}
inline ::agricultural::robot::navigation::v1::CameraType CameraInfo::_internal_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::CameraType >(type_);
}
inline ::agricultural::robot::navigation::v1::CameraType CameraInfo::type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.type)
  return _internal_type();
}
inline void CameraInfo::_internal_set_type(::agricultural::robot::navigation::v1::CameraType value) {
  
  type_ = value;
}
inline void CameraInfo::set_type(::agricultural::robot::navigation::v1::CameraType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.type)
}

// .agricultural.robot.navigation.v1.Resolution resolution = 4;
inline bool CameraInfo::_internal_has_resolution() const {
  return this != internal_default_instance() && resolution_ != nullptr;
}
inline bool CameraInfo::has_resolution() const {
  return _internal_has_resolution();
}
inline void CameraInfo::clear_resolution() {
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Resolution& CameraInfo::_internal_resolution() const {
  const ::agricultural::robot::navigation::v1::Resolution* p = resolution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Resolution*>(
      &::agricultural::robot::navigation::v1::_Resolution_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Resolution& CameraInfo::resolution() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.resolution)
  return _internal_resolution();
}
inline void CameraInfo::unsafe_arena_set_allocated_resolution(
    ::agricultural::robot::navigation::v1::Resolution* resolution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolution_);
  }
  resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfo.resolution)
}
inline ::agricultural::robot::navigation::v1::Resolution* CameraInfo::release_resolution() {
  auto temp = unsafe_arena_release_resolution();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Resolution* CameraInfo::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfo.resolution)
  
  ::agricultural::robot::navigation::v1::Resolution* temp = resolution_;
  resolution_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Resolution* CameraInfo::_internal_mutable_resolution() {
  
  if (resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Resolution>(GetArena());
    resolution_ = p;
  }
  return resolution_;
}
inline ::agricultural::robot::navigation::v1::Resolution* CameraInfo::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfo.resolution)
  return _internal_mutable_resolution();
}
inline void CameraInfo::set_allocated_resolution(::agricultural::robot::navigation::v1::Resolution* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resolution_;
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resolution);
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    
  } else {
    
  }
  resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfo.resolution)
}

// double framerate = 5;
inline void CameraInfo::clear_framerate() {
  framerate_ = 0;
}
inline double CameraInfo::_internal_framerate() const {
  return framerate_;
}
inline double CameraInfo::framerate() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.framerate)
  return _internal_framerate();
}
inline void CameraInfo::_internal_set_framerate(double value) {
  
  framerate_ = value;
}
inline void CameraInfo::set_framerate(double value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.framerate)
}

// .agricultural.robot.navigation.v1.CameraIntrinsics intrinsics = 6;
inline bool CameraInfo::_internal_has_intrinsics() const {
  return this != internal_default_instance() && intrinsics_ != nullptr;
}
inline bool CameraInfo::has_intrinsics() const {
  return _internal_has_intrinsics();
}
inline void CameraInfo::clear_intrinsics() {
  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::CameraIntrinsics& CameraInfo::_internal_intrinsics() const {
  const ::agricultural::robot::navigation::v1::CameraIntrinsics* p = intrinsics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::CameraIntrinsics*>(
      &::agricultural::robot::navigation::v1::_CameraIntrinsics_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::CameraIntrinsics& CameraInfo::intrinsics() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.intrinsics)
  return _internal_intrinsics();
}
inline void CameraInfo::unsafe_arena_set_allocated_intrinsics(
    ::agricultural::robot::navigation::v1::CameraIntrinsics* intrinsics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsics_);
  }
  intrinsics_ = intrinsics;
  if (intrinsics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfo.intrinsics)
}
inline ::agricultural::robot::navigation::v1::CameraIntrinsics* CameraInfo::release_intrinsics() {
  auto temp = unsafe_arena_release_intrinsics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::CameraIntrinsics* CameraInfo::unsafe_arena_release_intrinsics() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfo.intrinsics)
  
  ::agricultural::robot::navigation::v1::CameraIntrinsics* temp = intrinsics_;
  intrinsics_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::CameraIntrinsics* CameraInfo::_internal_mutable_intrinsics() {
  
  if (intrinsics_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraIntrinsics>(GetArena());
    intrinsics_ = p;
  }
  return intrinsics_;
}
inline ::agricultural::robot::navigation::v1::CameraIntrinsics* CameraInfo::mutable_intrinsics() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfo.intrinsics)
  return _internal_mutable_intrinsics();
}
inline void CameraInfo::set_allocated_intrinsics(::agricultural::robot::navigation::v1::CameraIntrinsics* intrinsics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete intrinsics_;
  }
  if (intrinsics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(intrinsics);
    if (message_arena != submessage_arena) {
      intrinsics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsics, submessage_arena);
    }
    
  } else {
    
  }
  intrinsics_ = intrinsics;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfo.intrinsics)
}

// .agricultural.robot.navigation.v1.CameraDistortion distortion = 7;
inline bool CameraInfo::_internal_has_distortion() const {
  return this != internal_default_instance() && distortion_ != nullptr;
}
inline bool CameraInfo::has_distortion() const {
  return _internal_has_distortion();
}
inline void CameraInfo::clear_distortion() {
  if (GetArena() == nullptr && distortion_ != nullptr) {
    delete distortion_;
  }
  distortion_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::CameraDistortion& CameraInfo::_internal_distortion() const {
  const ::agricultural::robot::navigation::v1::CameraDistortion* p = distortion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::CameraDistortion*>(
      &::agricultural::robot::navigation::v1::_CameraDistortion_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::CameraDistortion& CameraInfo::distortion() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.distortion)
  return _internal_distortion();
}
inline void CameraInfo::unsafe_arena_set_allocated_distortion(
    ::agricultural::robot::navigation::v1::CameraDistortion* distortion) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distortion_);
  }
  distortion_ = distortion;
  if (distortion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfo.distortion)
}
inline ::agricultural::robot::navigation::v1::CameraDistortion* CameraInfo::release_distortion() {
  auto temp = unsafe_arena_release_distortion();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::CameraDistortion* CameraInfo::unsafe_arena_release_distortion() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfo.distortion)
  
  ::agricultural::robot::navigation::v1::CameraDistortion* temp = distortion_;
  distortion_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::CameraDistortion* CameraInfo::_internal_mutable_distortion() {
  
  if (distortion_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::CameraDistortion>(GetArena());
    distortion_ = p;
  }
  return distortion_;
}
inline ::agricultural::robot::navigation::v1::CameraDistortion* CameraInfo::mutable_distortion() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfo.distortion)
  return _internal_mutable_distortion();
}
inline void CameraInfo::set_allocated_distortion(::agricultural::robot::navigation::v1::CameraDistortion* distortion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete distortion_;
  }
  if (distortion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(distortion);
    if (message_arena != submessage_arena) {
      distortion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion, submessage_arena);
    }
    
  } else {
    
  }
  distortion_ = distortion;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfo.distortion)
}

// string frame_id = 8;
inline void CameraInfo::clear_frame_id() {
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraInfo::frame_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.frame_id)
  return _internal_frame_id();
}
inline void CameraInfo::set_frame_id(const std::string& value) {
  _internal_set_frame_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.frame_id)
}
inline std::string* CameraInfo::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraInfo.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& CameraInfo::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void CameraInfo::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraInfo::set_frame_id(std::string&& value) {
  
  frame_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraInfo.frame_id)
}
inline void CameraInfo::set_frame_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraInfo.frame_id)
}
inline void CameraInfo::set_frame_id(const char* value,
    size_t size) {
  
  frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraInfo.frame_id)
}
inline std::string* CameraInfo::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraInfo::release_frame_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraInfo.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraInfo::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraInfo.frame_id)
}
inline std::string* CameraInfo::unsafe_arena_release_frame_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraInfo.frame_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return frame_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraInfo::unsafe_arena_set_allocated_frame_id(
    std::string* frame_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      frame_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraInfo.frame_id)
}

// .agricultural.robot.navigation.v1.CameraStatus status = 9;
inline void CameraInfo::clear_status() {
  status_ = 0;
}
inline ::agricultural::robot::navigation::v1::CameraStatus CameraInfo::_internal_status() const {
  return static_cast< ::agricultural::robot::navigation::v1::CameraStatus >(status_);
}
inline ::agricultural::robot::navigation::v1::CameraStatus CameraInfo::status() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.status)
  return _internal_status();
}
inline void CameraInfo::_internal_set_status(::agricultural::robot::navigation::v1::CameraStatus value) {
  
  status_ = value;
}
inline void CameraInfo::set_status(::agricultural::robot::navigation::v1::CameraStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.status)
}

// repeated .agricultural.robot.navigation.v1.VideoFormat supported_formats = 10;
inline int CameraInfo::_internal_supported_formats_size() const {
  return supported_formats_.size();
}
inline int CameraInfo::supported_formats_size() const {
  return _internal_supported_formats_size();
}
inline void CameraInfo::clear_supported_formats() {
  supported_formats_.Clear();
}
inline ::agricultural::robot::navigation::v1::VideoFormat CameraInfo::_internal_supported_formats(int index) const {
  return static_cast< ::agricultural::robot::navigation::v1::VideoFormat >(supported_formats_.Get(index));
}
inline ::agricultural::robot::navigation::v1::VideoFormat CameraInfo::supported_formats(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraInfo.supported_formats)
  return _internal_supported_formats(index);
}
inline void CameraInfo::set_supported_formats(int index, ::agricultural::robot::navigation::v1::VideoFormat value) {
  supported_formats_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraInfo.supported_formats)
}
inline void CameraInfo::_internal_add_supported_formats(::agricultural::robot::navigation::v1::VideoFormat value) {
  supported_formats_.Add(value);
}
inline void CameraInfo::add_supported_formats(::agricultural::robot::navigation::v1::VideoFormat value) {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.CameraInfo.supported_formats)
  _internal_add_supported_formats(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
CameraInfo::supported_formats() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.CameraInfo.supported_formats)
  return supported_formats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CameraInfo::_internal_mutable_supported_formats() {
  return &supported_formats_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
CameraInfo::mutable_supported_formats() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.CameraInfo.supported_formats)
  return _internal_mutable_supported_formats();
}

// -------------------------------------------------------------------

// VideoFrame

// string camera_id = 1;
inline void VideoFrame::clear_camera_id() {
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VideoFrame::camera_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.camera_id)
  return _internal_camera_id();
}
inline void VideoFrame::set_camera_id(const std::string& value) {
  _internal_set_camera_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoFrame.camera_id)
}
inline std::string* VideoFrame::mutable_camera_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VideoFrame.camera_id)
  return _internal_mutable_camera_id();
}
inline const std::string& VideoFrame::_internal_camera_id() const {
  return camera_id_.Get();
}
inline void VideoFrame::_internal_set_camera_id(const std::string& value) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VideoFrame::set_camera_id(std::string&& value) {
  
  camera_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.VideoFrame.camera_id)
}
inline void VideoFrame::set_camera_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.VideoFrame.camera_id)
}
inline void VideoFrame::set_camera_id(const char* value,
    size_t size) {
  
  camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.VideoFrame.camera_id)
}
inline std::string* VideoFrame::_internal_mutable_camera_id() {
  
  return camera_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VideoFrame::release_camera_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VideoFrame.camera_id)
  return camera_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoFrame::set_allocated_camera_id(std::string* camera_id) {
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VideoFrame.camera_id)
}
inline std::string* VideoFrame::unsafe_arena_release_camera_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.VideoFrame.camera_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return camera_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VideoFrame::unsafe_arena_set_allocated_camera_id(
    std::string* camera_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (camera_id != nullptr) {
    
  } else {
    
  }
  camera_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      camera_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VideoFrame.camera_id)
}

// bytes image_data = 2;
inline void VideoFrame::clear_image_data() {
  image_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VideoFrame::image_data() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.image_data)
  return _internal_image_data();
}
inline void VideoFrame::set_image_data(const std::string& value) {
  _internal_set_image_data(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoFrame.image_data)
}
inline std::string* VideoFrame::mutable_image_data() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VideoFrame.image_data)
  return _internal_mutable_image_data();
}
inline const std::string& VideoFrame::_internal_image_data() const {
  return image_data_.Get();
}
inline void VideoFrame::_internal_set_image_data(const std::string& value) {
  
  image_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VideoFrame::set_image_data(std::string&& value) {
  
  image_data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.VideoFrame.image_data)
}
inline void VideoFrame::set_image_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.VideoFrame.image_data)
}
inline void VideoFrame::set_image_data(const void* value,
    size_t size) {
  
  image_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.VideoFrame.image_data)
}
inline std::string* VideoFrame::_internal_mutable_image_data() {
  
  return image_data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VideoFrame::release_image_data() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VideoFrame.image_data)
  return image_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VideoFrame::set_allocated_image_data(std::string* image_data) {
  if (image_data != nullptr) {
    
  } else {
    
  }
  image_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VideoFrame.image_data)
}
inline std::string* VideoFrame::unsafe_arena_release_image_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.VideoFrame.image_data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VideoFrame::unsafe_arena_set_allocated_image_data(
    std::string* image_data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_data != nullptr) {
    
  } else {
    
  }
  image_data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VideoFrame.image_data)
}

// .agricultural.robot.navigation.v1.VideoFormat format = 3;
inline void VideoFrame::clear_format() {
  format_ = 0;
}
inline ::agricultural::robot::navigation::v1::VideoFormat VideoFrame::_internal_format() const {
  return static_cast< ::agricultural::robot::navigation::v1::VideoFormat >(format_);
}
inline ::agricultural::robot::navigation::v1::VideoFormat VideoFrame::format() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.format)
  return _internal_format();
}
inline void VideoFrame::_internal_set_format(::agricultural::robot::navigation::v1::VideoFormat value) {
  
  format_ = value;
}
inline void VideoFrame::set_format(::agricultural::robot::navigation::v1::VideoFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoFrame.format)
}

// .agricultural.robot.navigation.v1.Resolution resolution = 4;
inline bool VideoFrame::_internal_has_resolution() const {
  return this != internal_default_instance() && resolution_ != nullptr;
}
inline bool VideoFrame::has_resolution() const {
  return _internal_has_resolution();
}
inline void VideoFrame::clear_resolution() {
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Resolution& VideoFrame::_internal_resolution() const {
  const ::agricultural::robot::navigation::v1::Resolution* p = resolution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Resolution*>(
      &::agricultural::robot::navigation::v1::_Resolution_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Resolution& VideoFrame::resolution() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.resolution)
  return _internal_resolution();
}
inline void VideoFrame::unsafe_arena_set_allocated_resolution(
    ::agricultural::robot::navigation::v1::Resolution* resolution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolution_);
  }
  resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VideoFrame.resolution)
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoFrame::release_resolution() {
  auto temp = unsafe_arena_release_resolution();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoFrame::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VideoFrame.resolution)
  
  ::agricultural::robot::navigation::v1::Resolution* temp = resolution_;
  resolution_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoFrame::_internal_mutable_resolution() {
  
  if (resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Resolution>(GetArena());
    resolution_ = p;
  }
  return resolution_;
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoFrame::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VideoFrame.resolution)
  return _internal_mutable_resolution();
}
inline void VideoFrame::set_allocated_resolution(::agricultural::robot::navigation::v1::Resolution* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resolution_;
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resolution);
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    
  } else {
    
  }
  resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VideoFrame.resolution)
}

// .google.protobuf.Timestamp timestamp = 5;
inline bool VideoFrame::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool VideoFrame::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& VideoFrame::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& VideoFrame::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.timestamp)
  return _internal_timestamp();
}
inline void VideoFrame::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VideoFrame.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VideoFrame::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VideoFrame::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VideoFrame.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VideoFrame::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* VideoFrame::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VideoFrame.timestamp)
  return _internal_mutable_timestamp();
}
inline void VideoFrame::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VideoFrame.timestamp)
}

// uint64 frame_number = 6;
inline void VideoFrame::clear_frame_number() {
  frame_number_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VideoFrame::_internal_frame_number() const {
  return frame_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VideoFrame::frame_number() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.frame_number)
  return _internal_frame_number();
}
inline void VideoFrame::_internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_number_ = value;
}
inline void VideoFrame::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoFrame.frame_number)
}

// .agricultural.robot.navigation.v1.FrameMetadata metadata = 7;
inline bool VideoFrame::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool VideoFrame::has_metadata() const {
  return _internal_has_metadata();
}
inline void VideoFrame::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::FrameMetadata& VideoFrame::_internal_metadata() const {
  const ::agricultural::robot::navigation::v1::FrameMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::FrameMetadata*>(
      &::agricultural::robot::navigation::v1::_FrameMetadata_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::FrameMetadata& VideoFrame::metadata() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoFrame.metadata)
  return _internal_metadata();
}
inline void VideoFrame::unsafe_arena_set_allocated_metadata(
    ::agricultural::robot::navigation::v1::FrameMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VideoFrame.metadata)
}
inline ::agricultural::robot::navigation::v1::FrameMetadata* VideoFrame::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::FrameMetadata* VideoFrame::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VideoFrame.metadata)
  
  ::agricultural::robot::navigation::v1::FrameMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::FrameMetadata* VideoFrame::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::FrameMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::agricultural::robot::navigation::v1::FrameMetadata* VideoFrame::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VideoFrame.metadata)
  return _internal_mutable_metadata();
}
inline void VideoFrame::set_allocated_metadata(::agricultural::robot::navigation::v1::FrameMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VideoFrame.metadata)
}

// -------------------------------------------------------------------

// VideoStreamOptions

// .agricultural.robot.navigation.v1.VideoFormat format = 1;
inline void VideoStreamOptions::clear_format() {
  format_ = 0;
}
inline ::agricultural::robot::navigation::v1::VideoFormat VideoStreamOptions::_internal_format() const {
  return static_cast< ::agricultural::robot::navigation::v1::VideoFormat >(format_);
}
inline ::agricultural::robot::navigation::v1::VideoFormat VideoStreamOptions::format() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoStreamOptions.format)
  return _internal_format();
}
inline void VideoStreamOptions::_internal_set_format(::agricultural::robot::navigation::v1::VideoFormat value) {
  
  format_ = value;
}
inline void VideoStreamOptions::set_format(::agricultural::robot::navigation::v1::VideoFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoStreamOptions.format)
}

// .agricultural.robot.navigation.v1.Resolution resolution = 2;
inline bool VideoStreamOptions::_internal_has_resolution() const {
  return this != internal_default_instance() && resolution_ != nullptr;
}
inline bool VideoStreamOptions::has_resolution() const {
  return _internal_has_resolution();
}
inline void VideoStreamOptions::clear_resolution() {
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::Resolution& VideoStreamOptions::_internal_resolution() const {
  const ::agricultural::robot::navigation::v1::Resolution* p = resolution_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Resolution*>(
      &::agricultural::robot::navigation::v1::_Resolution_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Resolution& VideoStreamOptions::resolution() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoStreamOptions.resolution)
  return _internal_resolution();
}
inline void VideoStreamOptions::unsafe_arena_set_allocated_resolution(
    ::agricultural::robot::navigation::v1::Resolution* resolution) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resolution_);
  }
  resolution_ = resolution;
  if (resolution) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.VideoStreamOptions.resolution)
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoStreamOptions::release_resolution() {
  auto temp = unsafe_arena_release_resolution();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoStreamOptions::unsafe_arena_release_resolution() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.VideoStreamOptions.resolution)
  
  ::agricultural::robot::navigation::v1::Resolution* temp = resolution_;
  resolution_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoStreamOptions::_internal_mutable_resolution() {
  
  if (resolution_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Resolution>(GetArena());
    resolution_ = p;
  }
  return resolution_;
}
inline ::agricultural::robot::navigation::v1::Resolution* VideoStreamOptions::mutable_resolution() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.VideoStreamOptions.resolution)
  return _internal_mutable_resolution();
}
inline void VideoStreamOptions::set_allocated_resolution(::agricultural::robot::navigation::v1::Resolution* resolution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete resolution_;
  }
  if (resolution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(resolution);
    if (message_arena != submessage_arena) {
      resolution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resolution, submessage_arena);
    }
    
  } else {
    
  }
  resolution_ = resolution;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.VideoStreamOptions.resolution)
}

// uint32 framerate = 3;
inline void VideoStreamOptions::clear_framerate() {
  framerate_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoStreamOptions::_internal_framerate() const {
  return framerate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoStreamOptions::framerate() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoStreamOptions.framerate)
  return _internal_framerate();
}
inline void VideoStreamOptions::_internal_set_framerate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  framerate_ = value;
}
inline void VideoStreamOptions::set_framerate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_framerate(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoStreamOptions.framerate)
}

// .agricultural.robot.navigation.v1.VideoQuality quality = 4;
inline void VideoStreamOptions::clear_quality() {
  quality_ = 0;
}
inline ::agricultural::robot::navigation::v1::VideoQuality VideoStreamOptions::_internal_quality() const {
  return static_cast< ::agricultural::robot::navigation::v1::VideoQuality >(quality_);
}
inline ::agricultural::robot::navigation::v1::VideoQuality VideoStreamOptions::quality() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoStreamOptions.quality)
  return _internal_quality();
}
inline void VideoStreamOptions::_internal_set_quality(::agricultural::robot::navigation::v1::VideoQuality value) {
  
  quality_ = value;
}
inline void VideoStreamOptions::set_quality(::agricultural::robot::navigation::v1::VideoQuality value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoStreamOptions.quality)
}

// bool enable_compression = 5;
inline void VideoStreamOptions::clear_enable_compression() {
  enable_compression_ = false;
}
inline bool VideoStreamOptions::_internal_enable_compression() const {
  return enable_compression_;
}
inline bool VideoStreamOptions::enable_compression() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoStreamOptions.enable_compression)
  return _internal_enable_compression();
}
inline void VideoStreamOptions::_internal_set_enable_compression(bool value) {
  
  enable_compression_ = value;
}
inline void VideoStreamOptions::set_enable_compression(bool value) {
  _internal_set_enable_compression(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoStreamOptions.enable_compression)
}

// repeated .agricultural.robot.navigation.v1.OverlayType overlays = 6;
inline int VideoStreamOptions::_internal_overlays_size() const {
  return overlays_.size();
}
inline int VideoStreamOptions::overlays_size() const {
  return _internal_overlays_size();
}
inline void VideoStreamOptions::clear_overlays() {
  overlays_.Clear();
}
inline ::agricultural::robot::navigation::v1::OverlayType VideoStreamOptions::_internal_overlays(int index) const {
  return static_cast< ::agricultural::robot::navigation::v1::OverlayType >(overlays_.Get(index));
}
inline ::agricultural::robot::navigation::v1::OverlayType VideoStreamOptions::overlays(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.VideoStreamOptions.overlays)
  return _internal_overlays(index);
}
inline void VideoStreamOptions::set_overlays(int index, ::agricultural::robot::navigation::v1::OverlayType value) {
  overlays_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.VideoStreamOptions.overlays)
}
inline void VideoStreamOptions::_internal_add_overlays(::agricultural::robot::navigation::v1::OverlayType value) {
  overlays_.Add(value);
}
inline void VideoStreamOptions::add_overlays(::agricultural::robot::navigation::v1::OverlayType value) {
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.VideoStreamOptions.overlays)
  _internal_add_overlays(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
VideoStreamOptions::overlays() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.VideoStreamOptions.overlays)
  return overlays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
VideoStreamOptions::_internal_mutable_overlays() {
  return &overlays_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
VideoStreamOptions::mutable_overlays() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.VideoStreamOptions.overlays)
  return _internal_mutable_overlays();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CameraControlCommand

// .agricultural.robot.navigation.v1.CameraControlType type = 1;
inline void CameraControlCommand::clear_type() {
  type_ = 0;
}
inline ::agricultural::robot::navigation::v1::CameraControlType CameraControlCommand::_internal_type() const {
  return static_cast< ::agricultural::robot::navigation::v1::CameraControlType >(type_);
}
inline ::agricultural::robot::navigation::v1::CameraControlType CameraControlCommand::type() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlCommand.type)
  return _internal_type();
}
inline void CameraControlCommand::_internal_set_type(::agricultural::robot::navigation::v1::CameraControlType value) {
  
  type_ = value;
}
inline void CameraControlCommand::set_type(::agricultural::robot::navigation::v1::CameraControlType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraControlCommand.type)
}

// map<string, double> parameters = 2;
inline int CameraControlCommand::_internal_parameters_size() const {
  return parameters_.size();
}
inline int CameraControlCommand::parameters_size() const {
  return _internal_parameters_size();
}
inline void CameraControlCommand::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
CameraControlCommand::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
CameraControlCommand::parameters() const {
  // @@protoc_insertion_point(field_map:agricultural.robot.navigation.v1.CameraControlCommand.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
CameraControlCommand::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
CameraControlCommand::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:agricultural.robot.navigation.v1.CameraControlCommand.parameters)
  return _internal_mutable_parameters();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CameraControlResponse

// bool success = 1;
inline void CameraControlResponse::clear_success() {
  success_ = false;
}
inline bool CameraControlResponse::_internal_success() const {
  return success_;
}
inline bool CameraControlResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlResponse.success)
  return _internal_success();
}
inline void CameraControlResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CameraControlResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraControlResponse.success)
}

// string message = 2;
inline void CameraControlResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CameraControlResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlResponse.message)
  return _internal_message();
}
inline void CameraControlResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraControlResponse.message)
}
inline std::string* CameraControlResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraControlResponse.message)
  return _internal_mutable_message();
}
inline const std::string& CameraControlResponse::_internal_message() const {
  return message_.Get();
}
inline void CameraControlResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CameraControlResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.CameraControlResponse.message)
}
inline void CameraControlResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.CameraControlResponse.message)
}
inline void CameraControlResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.CameraControlResponse.message)
}
inline std::string* CameraControlResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CameraControlResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraControlResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CameraControlResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraControlResponse.message)
}
inline std::string* CameraControlResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.CameraControlResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CameraControlResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraControlResponse.message)
}

// map<string, double> current_settings = 3;
inline int CameraControlResponse::_internal_current_settings_size() const {
  return current_settings_.size();
}
inline int CameraControlResponse::current_settings_size() const {
  return _internal_current_settings_size();
}
inline void CameraControlResponse::clear_current_settings() {
  current_settings_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
CameraControlResponse::_internal_current_settings() const {
  return current_settings_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >&
CameraControlResponse::current_settings() const {
  // @@protoc_insertion_point(field_map:agricultural.robot.navigation.v1.CameraControlResponse.current_settings)
  return _internal_current_settings();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
CameraControlResponse::_internal_mutable_current_settings() {
  return current_settings_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >*
CameraControlResponse::mutable_current_settings() {
  // @@protoc_insertion_point(field_mutable_map:agricultural.robot.navigation.v1.CameraControlResponse.current_settings)
  return _internal_mutable_current_settings();
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool CameraControlResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool CameraControlResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraControlResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CameraControlResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraControlResponse.timestamp)
  return _internal_timestamp();
}
inline void CameraControlResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.CameraControlResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraControlResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraControlResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.CameraControlResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraControlResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CameraControlResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.CameraControlResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void CameraControlResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.CameraControlResponse.timestamp)
}

// -------------------------------------------------------------------

// Resolution

// uint32 width = 1;
inline void Resolution::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Resolution::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Resolution::width() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Resolution.width)
  return _internal_width();
}
inline void Resolution::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Resolution::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Resolution.width)
}

// uint32 height = 2;
inline void Resolution::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Resolution::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Resolution::height() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.Resolution.height)
  return _internal_height();
}
inline void Resolution::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Resolution::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.Resolution.height)
}

// -------------------------------------------------------------------

// CameraIntrinsics

// double focal_length_x = 1;
inline void CameraIntrinsics::clear_focal_length_x() {
  focal_length_x_ = 0;
}
inline double CameraIntrinsics::_internal_focal_length_x() const {
  return focal_length_x_;
}
inline double CameraIntrinsics::focal_length_x() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraIntrinsics.focal_length_x)
  return _internal_focal_length_x();
}
inline void CameraIntrinsics::_internal_set_focal_length_x(double value) {
  
  focal_length_x_ = value;
}
inline void CameraIntrinsics::set_focal_length_x(double value) {
  _internal_set_focal_length_x(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraIntrinsics.focal_length_x)
}

// double focal_length_y = 2;
inline void CameraIntrinsics::clear_focal_length_y() {
  focal_length_y_ = 0;
}
inline double CameraIntrinsics::_internal_focal_length_y() const {
  return focal_length_y_;
}
inline double CameraIntrinsics::focal_length_y() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraIntrinsics.focal_length_y)
  return _internal_focal_length_y();
}
inline void CameraIntrinsics::_internal_set_focal_length_y(double value) {
  
  focal_length_y_ = value;
}
inline void CameraIntrinsics::set_focal_length_y(double value) {
  _internal_set_focal_length_y(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraIntrinsics.focal_length_y)
}

// double principal_point_x = 3;
inline void CameraIntrinsics::clear_principal_point_x() {
  principal_point_x_ = 0;
}
inline double CameraIntrinsics::_internal_principal_point_x() const {
  return principal_point_x_;
}
inline double CameraIntrinsics::principal_point_x() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraIntrinsics.principal_point_x)
  return _internal_principal_point_x();
}
inline void CameraIntrinsics::_internal_set_principal_point_x(double value) {
  
  principal_point_x_ = value;
}
inline void CameraIntrinsics::set_principal_point_x(double value) {
  _internal_set_principal_point_x(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraIntrinsics.principal_point_x)
}

// double principal_point_y = 4;
inline void CameraIntrinsics::clear_principal_point_y() {
  principal_point_y_ = 0;
}
inline double CameraIntrinsics::_internal_principal_point_y() const {
  return principal_point_y_;
}
inline double CameraIntrinsics::principal_point_y() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraIntrinsics.principal_point_y)
  return _internal_principal_point_y();
}
inline void CameraIntrinsics::_internal_set_principal_point_y(double value) {
  
  principal_point_y_ = value;
}
inline void CameraIntrinsics::set_principal_point_y(double value) {
  _internal_set_principal_point_y(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraIntrinsics.principal_point_y)
}

// repeated double camera_matrix = 5;
inline int CameraIntrinsics::_internal_camera_matrix_size() const {
  return camera_matrix_.size();
}
inline int CameraIntrinsics::camera_matrix_size() const {
  return _internal_camera_matrix_size();
}
inline void CameraIntrinsics::clear_camera_matrix() {
  camera_matrix_.Clear();
}
inline double CameraIntrinsics::_internal_camera_matrix(int index) const {
  return camera_matrix_.Get(index);
}
inline double CameraIntrinsics::camera_matrix(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraIntrinsics.camera_matrix)
  return _internal_camera_matrix(index);
}
inline void CameraIntrinsics::set_camera_matrix(int index, double value) {
  camera_matrix_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraIntrinsics.camera_matrix)
}
inline void CameraIntrinsics::_internal_add_camera_matrix(double value) {
  camera_matrix_.Add(value);
}
inline void CameraIntrinsics::add_camera_matrix(double value) {
  _internal_add_camera_matrix(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.CameraIntrinsics.camera_matrix)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraIntrinsics::_internal_camera_matrix() const {
  return camera_matrix_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraIntrinsics::camera_matrix() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.CameraIntrinsics.camera_matrix)
  return _internal_camera_matrix();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraIntrinsics::_internal_mutable_camera_matrix() {
  return &camera_matrix_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraIntrinsics::mutable_camera_matrix() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.CameraIntrinsics.camera_matrix)
  return _internal_mutable_camera_matrix();
}

// -------------------------------------------------------------------

// CameraDistortion

// .agricultural.robot.navigation.v1.DistortionModel model = 1;
inline void CameraDistortion::clear_model() {
  model_ = 0;
}
inline ::agricultural::robot::navigation::v1::DistortionModel CameraDistortion::_internal_model() const {
  return static_cast< ::agricultural::robot::navigation::v1::DistortionModel >(model_);
}
inline ::agricultural::robot::navigation::v1::DistortionModel CameraDistortion::model() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraDistortion.model)
  return _internal_model();
}
inline void CameraDistortion::_internal_set_model(::agricultural::robot::navigation::v1::DistortionModel value) {
  
  model_ = value;
}
inline void CameraDistortion::set_model(::agricultural::robot::navigation::v1::DistortionModel value) {
  _internal_set_model(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraDistortion.model)
}

// repeated double coefficients = 2;
inline int CameraDistortion::_internal_coefficients_size() const {
  return coefficients_.size();
}
inline int CameraDistortion::coefficients_size() const {
  return _internal_coefficients_size();
}
inline void CameraDistortion::clear_coefficients() {
  coefficients_.Clear();
}
inline double CameraDistortion::_internal_coefficients(int index) const {
  return coefficients_.Get(index);
}
inline double CameraDistortion::coefficients(int index) const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.CameraDistortion.coefficients)
  return _internal_coefficients(index);
}
inline void CameraDistortion::set_coefficients(int index, double value) {
  coefficients_.Set(index, value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.CameraDistortion.coefficients)
}
inline void CameraDistortion::_internal_add_coefficients(double value) {
  coefficients_.Add(value);
}
inline void CameraDistortion::add_coefficients(double value) {
  _internal_add_coefficients(value);
  // @@protoc_insertion_point(field_add:agricultural.robot.navigation.v1.CameraDistortion.coefficients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraDistortion::_internal_coefficients() const {
  return coefficients_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
CameraDistortion::coefficients() const {
  // @@protoc_insertion_point(field_list:agricultural.robot.navigation.v1.CameraDistortion.coefficients)
  return _internal_coefficients();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraDistortion::_internal_mutable_coefficients() {
  return &coefficients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
CameraDistortion::mutable_coefficients() {
  // @@protoc_insertion_point(field_mutable_list:agricultural.robot.navigation.v1.CameraDistortion.coefficients)
  return _internal_mutable_coefficients();
}

// -------------------------------------------------------------------

// FrameMetadata

// double exposure_time = 1;
inline void FrameMetadata::clear_exposure_time() {
  exposure_time_ = 0;
}
inline double FrameMetadata::_internal_exposure_time() const {
  return exposure_time_;
}
inline double FrameMetadata::exposure_time() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.FrameMetadata.exposure_time)
  return _internal_exposure_time();
}
inline void FrameMetadata::_internal_set_exposure_time(double value) {
  
  exposure_time_ = value;
}
inline void FrameMetadata::set_exposure_time(double value) {
  _internal_set_exposure_time(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.FrameMetadata.exposure_time)
}

// double gain = 2;
inline void FrameMetadata::clear_gain() {
  gain_ = 0;
}
inline double FrameMetadata::_internal_gain() const {
  return gain_;
}
inline double FrameMetadata::gain() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.FrameMetadata.gain)
  return _internal_gain();
}
inline void FrameMetadata::_internal_set_gain(double value) {
  
  gain_ = value;
}
inline void FrameMetadata::set_gain(double value) {
  _internal_set_gain(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.FrameMetadata.gain)
}

// double white_balance = 3;
inline void FrameMetadata::clear_white_balance() {
  white_balance_ = 0;
}
inline double FrameMetadata::_internal_white_balance() const {
  return white_balance_;
}
inline double FrameMetadata::white_balance() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.FrameMetadata.white_balance)
  return _internal_white_balance();
}
inline void FrameMetadata::_internal_set_white_balance(double value) {
  
  white_balance_ = value;
}
inline void FrameMetadata::set_white_balance(double value) {
  _internal_set_white_balance(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.FrameMetadata.white_balance)
}

// .google.protobuf.Timestamp capture_time = 4;
inline bool FrameMetadata::_internal_has_capture_time() const {
  return this != internal_default_instance() && capture_time_ != nullptr;
}
inline bool FrameMetadata::has_capture_time() const {
  return _internal_has_capture_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& FrameMetadata::_internal_capture_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = capture_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& FrameMetadata::capture_time() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.FrameMetadata.capture_time)
  return _internal_capture_time();
}
inline void FrameMetadata::unsafe_arena_set_allocated_capture_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* capture_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_time_);
  }
  capture_time_ = capture_time;
  if (capture_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.FrameMetadata.capture_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FrameMetadata::release_capture_time() {
  auto temp = unsafe_arena_release_capture_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FrameMetadata::unsafe_arena_release_capture_time() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.FrameMetadata.capture_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = capture_time_;
  capture_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FrameMetadata::_internal_mutable_capture_time() {
  
  if (capture_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    capture_time_ = p;
  }
  return capture_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* FrameMetadata::mutable_capture_time() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.FrameMetadata.capture_time)
  return _internal_mutable_capture_time();
}
inline void FrameMetadata::set_allocated_capture_time(PROTOBUF_NAMESPACE_ID::Timestamp* capture_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_time_);
  }
  if (capture_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capture_time)->GetArena();
    if (message_arena != submessage_arena) {
      capture_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capture_time, submessage_arena);
    }
    
  } else {
    
  }
  capture_time_ = capture_time;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.FrameMetadata.capture_time)
}

// .agricultural.robot.navigation.v1.Pose camera_pose = 5;
inline bool FrameMetadata::_internal_has_camera_pose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || camera_pose_ != nullptr);
  return value;
}
inline bool FrameMetadata::has_camera_pose() const {
  return _internal_has_camera_pose();
}
inline void FrameMetadata::clear_camera_pose() {
  if (GetArena() == nullptr && camera_pose_ != nullptr) {
    delete camera_pose_;
  }
  camera_pose_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agricultural::robot::navigation::v1::Pose& FrameMetadata::_internal_camera_pose() const {
  const ::agricultural::robot::navigation::v1::Pose* p = camera_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::Pose*>(
      &::agricultural::robot::navigation::v1::_Pose_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::Pose& FrameMetadata::camera_pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.FrameMetadata.camera_pose)
  return _internal_camera_pose();
}
inline void FrameMetadata::unsafe_arena_set_allocated_camera_pose(
    ::agricultural::robot::navigation::v1::Pose* camera_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_pose_);
  }
  camera_pose_ = camera_pose;
  if (camera_pose) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.FrameMetadata.camera_pose)
}
inline ::agricultural::robot::navigation::v1::Pose* FrameMetadata::release_camera_pose() {
  auto temp = unsafe_arena_release_camera_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* FrameMetadata::unsafe_arena_release_camera_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.FrameMetadata.camera_pose)
  _has_bits_[0] &= ~0x00000001u;
  ::agricultural::robot::navigation::v1::Pose* temp = camera_pose_;
  camera_pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::Pose* FrameMetadata::_internal_mutable_camera_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (camera_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::Pose>(GetArena());
    camera_pose_ = p;
  }
  return camera_pose_;
}
inline ::agricultural::robot::navigation::v1::Pose* FrameMetadata::mutable_camera_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.FrameMetadata.camera_pose)
  return _internal_mutable_camera_pose();
}
inline void FrameMetadata::set_allocated_camera_pose(::agricultural::robot::navigation::v1::Pose* camera_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete camera_pose_;
  }
  if (camera_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(camera_pose);
    if (message_arena != submessage_arena) {
      camera_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  camera_pose_ = camera_pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.FrameMetadata.camera_pose)
}

// -------------------------------------------------------------------

// GetLocalizationStatusRequest

// string robot_id = 1;
inline void GetLocalizationStatusRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetLocalizationStatusRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
  return _internal_robot_id();
}
inline void GetLocalizationStatusRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
}
inline std::string* GetLocalizationStatusRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& GetLocalizationStatusRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void GetLocalizationStatusRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetLocalizationStatusRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
}
inline void GetLocalizationStatusRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
}
inline void GetLocalizationStatusRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
}
inline std::string* GetLocalizationStatusRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetLocalizationStatusRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetLocalizationStatusRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
}
inline std::string* GetLocalizationStatusRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetLocalizationStatusRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// InitializeLocalizationRequest

// string robot_id = 1;
inline void InitializeLocalizationRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitializeLocalizationRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
  return _internal_robot_id();
}
inline void InitializeLocalizationRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
}
inline std::string* InitializeLocalizationRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& InitializeLocalizationRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void InitializeLocalizationRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitializeLocalizationRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
}
inline void InitializeLocalizationRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
}
inline void InitializeLocalizationRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
}
inline std::string* InitializeLocalizationRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitializeLocalizationRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitializeLocalizationRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
}
inline std::string* InitializeLocalizationRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InitializeLocalizationRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance initial_pose = 2;
inline bool InitializeLocalizationRequest::_internal_has_initial_pose() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || initial_pose_ != nullptr);
  return value;
}
inline bool InitializeLocalizationRequest::has_initial_pose() const {
  return _internal_has_initial_pose();
}
inline void InitializeLocalizationRequest::clear_initial_pose() {
  if (GetArena() == nullptr && initial_pose_ != nullptr) {
    delete initial_pose_;
  }
  initial_pose_ = nullptr;
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& InitializeLocalizationRequest::_internal_initial_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = initial_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& InitializeLocalizationRequest::initial_pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.InitializeLocalizationRequest.initial_pose)
  return _internal_initial_pose();
}
inline void InitializeLocalizationRequest::unsafe_arena_set_allocated_initial_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* initial_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initial_pose_);
  }
  initial_pose_ = initial_pose;
  if (initial_pose) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.InitializeLocalizationRequest.initial_pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* InitializeLocalizationRequest::release_initial_pose() {
  auto temp = unsafe_arena_release_initial_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* InitializeLocalizationRequest::unsafe_arena_release_initial_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.InitializeLocalizationRequest.initial_pose)
  _has_bits_[0] &= ~0x00000001u;
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = initial_pose_;
  initial_pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* InitializeLocalizationRequest::_internal_mutable_initial_pose() {
  _has_bits_[0] |= 0x00000001u;
  if (initial_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    initial_pose_ = p;
  }
  return initial_pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* InitializeLocalizationRequest::mutable_initial_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.InitializeLocalizationRequest.initial_pose)
  return _internal_mutable_initial_pose();
}
inline void InitializeLocalizationRequest::set_allocated_initial_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* initial_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete initial_pose_;
  }
  if (initial_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initial_pose);
    if (message_arena != submessage_arena) {
      initial_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initial_pose, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  initial_pose_ = initial_pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.InitializeLocalizationRequest.initial_pose)
}

// .agricultural.robot.navigation.v1.LocalizationMethod method = 3;
inline void InitializeLocalizationRequest::clear_method() {
  method_ = 0;
}
inline ::agricultural::robot::navigation::v1::LocalizationMethod InitializeLocalizationRequest::_internal_method() const {
  return static_cast< ::agricultural::robot::navigation::v1::LocalizationMethod >(method_);
}
inline ::agricultural::robot::navigation::v1::LocalizationMethod InitializeLocalizationRequest::method() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.InitializeLocalizationRequest.method)
  return _internal_method();
}
inline void InitializeLocalizationRequest::_internal_set_method(::agricultural::robot::navigation::v1::LocalizationMethod value) {
  
  method_ = value;
}
inline void InitializeLocalizationRequest::set_method(::agricultural::robot::navigation::v1::LocalizationMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.InitializeLocalizationRequest.method)
}

// map<string, string> parameters = 4;
inline int InitializeLocalizationRequest::_internal_parameters_size() const {
  return parameters_.size();
}
inline int InitializeLocalizationRequest::parameters_size() const {
  return _internal_parameters_size();
}
inline void InitializeLocalizationRequest::clear_parameters() {
  parameters_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitializeLocalizationRequest::_internal_parameters() const {
  return parameters_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
InitializeLocalizationRequest::parameters() const {
  // @@protoc_insertion_point(field_map:agricultural.robot.navigation.v1.InitializeLocalizationRequest.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitializeLocalizationRequest::_internal_mutable_parameters() {
  return parameters_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
InitializeLocalizationRequest::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_map:agricultural.robot.navigation.v1.InitializeLocalizationRequest.parameters)
  return _internal_mutable_parameters();
}

// -------------------------------------------------------------------

// ResetLocalizationRequest

// string robot_id = 1;
inline void ResetLocalizationRequest::clear_robot_id() {
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ResetLocalizationRequest::robot_id() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
  return _internal_robot_id();
}
inline void ResetLocalizationRequest::set_robot_id(const std::string& value) {
  _internal_set_robot_id(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
}
inline std::string* ResetLocalizationRequest::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& ResetLocalizationRequest::_internal_robot_id() const {
  return robot_id_.Get();
}
inline void ResetLocalizationRequest::_internal_set_robot_id(const std::string& value) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ResetLocalizationRequest::set_robot_id(std::string&& value) {
  
  robot_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
}
inline void ResetLocalizationRequest::set_robot_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
}
inline void ResetLocalizationRequest::set_robot_id(const char* value,
    size_t size) {
  
  robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
}
inline std::string* ResetLocalizationRequest::_internal_mutable_robot_id() {
  
  return robot_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ResetLocalizationRequest::release_robot_id() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
  return robot_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ResetLocalizationRequest::set_allocated_robot_id(std::string* robot_id) {
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), robot_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
}
inline std::string* ResetLocalizationRequest::unsafe_arena_release_robot_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return robot_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ResetLocalizationRequest::unsafe_arena_set_allocated_robot_id(
    std::string* robot_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (robot_id != nullptr) {
    
  } else {
    
  }
  robot_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      robot_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id)
}

// bool clear_map = 2;
inline void ResetLocalizationRequest::clear_clear_map() {
  clear_map_ = false;
}
inline bool ResetLocalizationRequest::_internal_clear_map() const {
  return clear_map_;
}
inline bool ResetLocalizationRequest::clear_map() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.ResetLocalizationRequest.clear_map)
  return _internal_clear_map();
}
inline void ResetLocalizationRequest::_internal_set_clear_map(bool value) {
  
  clear_map_ = value;
}
inline void ResetLocalizationRequest::set_clear_map(bool value) {
  _internal_set_clear_map(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.ResetLocalizationRequest.clear_map)
}

// -------------------------------------------------------------------

// LocalizationStatusResponse

// .agricultural.robot.navigation.v1.LocalizationStatus status = 1;
inline void LocalizationStatusResponse::clear_status() {
  status_ = 0;
}
inline ::agricultural::robot::navigation::v1::LocalizationStatus LocalizationStatusResponse::_internal_status() const {
  return static_cast< ::agricultural::robot::navigation::v1::LocalizationStatus >(status_);
}
inline ::agricultural::robot::navigation::v1::LocalizationStatus LocalizationStatusResponse::status() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationStatusResponse.status)
  return _internal_status();
}
inline void LocalizationStatusResponse::_internal_set_status(::agricultural::robot::navigation::v1::LocalizationStatus value) {
  
  status_ = value;
}
inline void LocalizationStatusResponse::set_status(::agricultural::robot::navigation::v1::LocalizationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationStatusResponse.status)
}

// .agricultural.robot.navigation.v1.LocalizationQuality quality = 2;
inline bool LocalizationStatusResponse::_internal_has_quality() const {
  return this != internal_default_instance() && quality_ != nullptr;
}
inline bool LocalizationStatusResponse::has_quality() const {
  return _internal_has_quality();
}
inline void LocalizationStatusResponse::clear_quality() {
  if (GetArena() == nullptr && quality_ != nullptr) {
    delete quality_;
  }
  quality_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::LocalizationQuality& LocalizationStatusResponse::_internal_quality() const {
  const ::agricultural::robot::navigation::v1::LocalizationQuality* p = quality_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::LocalizationQuality*>(
      &::agricultural::robot::navigation::v1::_LocalizationQuality_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::LocalizationQuality& LocalizationStatusResponse::quality() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationStatusResponse.quality)
  return _internal_quality();
}
inline void LocalizationStatusResponse::unsafe_arena_set_allocated_quality(
    ::agricultural::robot::navigation::v1::LocalizationQuality* quality) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(quality_);
  }
  quality_ = quality;
  if (quality) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.quality)
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* LocalizationStatusResponse::release_quality() {
  auto temp = unsafe_arena_release_quality();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* LocalizationStatusResponse::unsafe_arena_release_quality() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationStatusResponse.quality)
  
  ::agricultural::robot::navigation::v1::LocalizationQuality* temp = quality_;
  quality_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* LocalizationStatusResponse::_internal_mutable_quality() {
  
  if (quality_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationQuality>(GetArena());
    quality_ = p;
  }
  return quality_;
}
inline ::agricultural::robot::navigation::v1::LocalizationQuality* LocalizationStatusResponse::mutable_quality() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationStatusResponse.quality)
  return _internal_mutable_quality();
}
inline void LocalizationStatusResponse::set_allocated_quality(::agricultural::robot::navigation::v1::LocalizationQuality* quality) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete quality_;
  }
  if (quality) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(quality);
    if (message_arena != submessage_arena) {
      quality = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quality, submessage_arena);
    }
    
  } else {
    
  }
  quality_ = quality;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.quality)
}

// .agricultural.robot.navigation.v1.PoseWithCovariance current_pose = 3;
inline bool LocalizationStatusResponse::_internal_has_current_pose() const {
  return this != internal_default_instance() && current_pose_ != nullptr;
}
inline bool LocalizationStatusResponse::has_current_pose() const {
  return _internal_has_current_pose();
}
inline void LocalizationStatusResponse::clear_current_pose() {
  if (GetArena() == nullptr && current_pose_ != nullptr) {
    delete current_pose_;
  }
  current_pose_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& LocalizationStatusResponse::_internal_current_pose() const {
  const ::agricultural::robot::navigation::v1::PoseWithCovariance* p = current_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::PoseWithCovariance& LocalizationStatusResponse::current_pose() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationStatusResponse.current_pose)
  return _internal_current_pose();
}
inline void LocalizationStatusResponse::unsafe_arena_set_allocated_current_pose(
    ::agricultural::robot::navigation::v1::PoseWithCovariance* current_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_pose_);
  }
  current_pose_ = current_pose;
  if (current_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.current_pose)
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* LocalizationStatusResponse::release_current_pose() {
  auto temp = unsafe_arena_release_current_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* LocalizationStatusResponse::unsafe_arena_release_current_pose() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationStatusResponse.current_pose)
  
  ::agricultural::robot::navigation::v1::PoseWithCovariance* temp = current_pose_;
  current_pose_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* LocalizationStatusResponse::_internal_mutable_current_pose() {
  
  if (current_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::PoseWithCovariance>(GetArena());
    current_pose_ = p;
  }
  return current_pose_;
}
inline ::agricultural::robot::navigation::v1::PoseWithCovariance* LocalizationStatusResponse::mutable_current_pose() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationStatusResponse.current_pose)
  return _internal_mutable_current_pose();
}
inline void LocalizationStatusResponse::set_allocated_current_pose(::agricultural::robot::navigation::v1::PoseWithCovariance* current_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete current_pose_;
  }
  if (current_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(current_pose);
    if (message_arena != submessage_arena) {
      current_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_pose, submessage_arena);
    }
    
  } else {
    
  }
  current_pose_ = current_pose;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.current_pose)
}

// .agricultural.robot.navigation.v1.LocalizationMethod method = 4;
inline void LocalizationStatusResponse::clear_method() {
  method_ = 0;
}
inline ::agricultural::robot::navigation::v1::LocalizationMethod LocalizationStatusResponse::_internal_method() const {
  return static_cast< ::agricultural::robot::navigation::v1::LocalizationMethod >(method_);
}
inline ::agricultural::robot::navigation::v1::LocalizationMethod LocalizationStatusResponse::method() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationStatusResponse.method)
  return _internal_method();
}
inline void LocalizationStatusResponse::_internal_set_method(::agricultural::robot::navigation::v1::LocalizationMethod value) {
  
  method_ = value;
}
inline void LocalizationStatusResponse::set_method(::agricultural::robot::navigation::v1::LocalizationMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationStatusResponse.method)
}

// .agricultural.robot.navigation.v1.LocalizationMetrics metrics = 5;
inline bool LocalizationStatusResponse::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool LocalizationStatusResponse::has_metrics() const {
  return _internal_has_metrics();
}
inline void LocalizationStatusResponse::clear_metrics() {
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::agricultural::robot::navigation::v1::LocalizationMetrics& LocalizationStatusResponse::_internal_metrics() const {
  const ::agricultural::robot::navigation::v1::LocalizationMetrics* p = metrics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::agricultural::robot::navigation::v1::LocalizationMetrics*>(
      &::agricultural::robot::navigation::v1::_LocalizationMetrics_default_instance_);
}
inline const ::agricultural::robot::navigation::v1::LocalizationMetrics& LocalizationStatusResponse::metrics() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationStatusResponse.metrics)
  return _internal_metrics();
}
inline void LocalizationStatusResponse::unsafe_arena_set_allocated_metrics(
    ::agricultural::robot::navigation::v1::LocalizationMetrics* metrics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.metrics)
}
inline ::agricultural::robot::navigation::v1::LocalizationMetrics* LocalizationStatusResponse::release_metrics() {
  auto temp = unsafe_arena_release_metrics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::agricultural::robot::navigation::v1::LocalizationMetrics* LocalizationStatusResponse::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationStatusResponse.metrics)
  
  ::agricultural::robot::navigation::v1::LocalizationMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::agricultural::robot::navigation::v1::LocalizationMetrics* LocalizationStatusResponse::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::agricultural::robot::navigation::v1::LocalizationMetrics>(GetArena());
    metrics_ = p;
  }
  return metrics_;
}
inline ::agricultural::robot::navigation::v1::LocalizationMetrics* LocalizationStatusResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationStatusResponse.metrics)
  return _internal_mutable_metrics();
}
inline void LocalizationStatusResponse::set_allocated_metrics(::agricultural::robot::navigation::v1::LocalizationMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.metrics)
}

// .google.protobuf.Timestamp timestamp = 6;
inline bool LocalizationStatusResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool LocalizationStatusResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LocalizationStatusResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LocalizationStatusResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationStatusResponse.timestamp)
  return _internal_timestamp();
}
inline void LocalizationStatusResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationStatusResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationStatusResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationStatusResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationStatusResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationStatusResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationStatusResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void LocalizationStatusResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationStatusResponse.timestamp)
}

// -------------------------------------------------------------------

// LocalizationResponse

// bool success = 1;
inline void LocalizationResponse::clear_success() {
  success_ = false;
}
inline bool LocalizationResponse::_internal_success() const {
  return success_;
}
inline bool LocalizationResponse::success() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationResponse.success)
  return _internal_success();
}
inline void LocalizationResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void LocalizationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationResponse.success)
}

// string message = 2;
inline void LocalizationResponse::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& LocalizationResponse::message() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationResponse.message)
  return _internal_message();
}
inline void LocalizationResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationResponse.message)
}
inline std::string* LocalizationResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationResponse.message)
  return _internal_mutable_message();
}
inline const std::string& LocalizationResponse::_internal_message() const {
  return message_.Get();
}
inline void LocalizationResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LocalizationResponse::set_message(std::string&& value) {
  
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:agricultural.robot.navigation.v1.LocalizationResponse.message)
}
inline void LocalizationResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:agricultural.robot.navigation.v1.LocalizationResponse.message)
}
inline void LocalizationResponse::set_message(const char* value,
    size_t size) {
  
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:agricultural.robot.navigation.v1.LocalizationResponse.message)
}
inline std::string* LocalizationResponse::_internal_mutable_message() {
  
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LocalizationResponse::release_message() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LocalizationResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationResponse.message)
}
inline std::string* LocalizationResponse::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:agricultural.robot.navigation.v1.LocalizationResponse.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LocalizationResponse::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    
  } else {
    
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationResponse.message)
}

// .agricultural.robot.navigation.v1.LocalizationStatus status = 3;
inline void LocalizationResponse::clear_status() {
  status_ = 0;
}
inline ::agricultural::robot::navigation::v1::LocalizationStatus LocalizationResponse::_internal_status() const {
  return static_cast< ::agricultural::robot::navigation::v1::LocalizationStatus >(status_);
}
inline ::agricultural::robot::navigation::v1::LocalizationStatus LocalizationResponse::status() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationResponse.status)
  return _internal_status();
}
inline void LocalizationResponse::_internal_set_status(::agricultural::robot::navigation::v1::LocalizationStatus value) {
  
  status_ = value;
}
inline void LocalizationResponse::set_status(::agricultural::robot::navigation::v1::LocalizationStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationResponse.status)
}

// .google.protobuf.Timestamp timestamp = 4;
inline bool LocalizationResponse::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool LocalizationResponse::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LocalizationResponse::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LocalizationResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationResponse.timestamp)
  return _internal_timestamp();
}
inline void LocalizationResponse::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationResponse.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationResponse::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationResponse::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationResponse.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationResponse::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LocalizationResponse::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationResponse.timestamp)
  return _internal_mutable_timestamp();
}
inline void LocalizationResponse::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationResponse.timestamp)
}

// -------------------------------------------------------------------

// LocalizationQuality

// double confidence = 1;
inline void LocalizationQuality::clear_confidence() {
  confidence_ = 0;
}
inline double LocalizationQuality::_internal_confidence() const {
  return confidence_;
}
inline double LocalizationQuality::confidence() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationQuality.confidence)
  return _internal_confidence();
}
inline void LocalizationQuality::_internal_set_confidence(double value) {
  
  confidence_ = value;
}
inline void LocalizationQuality::set_confidence(double value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationQuality.confidence)
}

// double position_uncertainty = 2;
inline void LocalizationQuality::clear_position_uncertainty() {
  position_uncertainty_ = 0;
}
inline double LocalizationQuality::_internal_position_uncertainty() const {
  return position_uncertainty_;
}
inline double LocalizationQuality::position_uncertainty() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationQuality.position_uncertainty)
  return _internal_position_uncertainty();
}
inline void LocalizationQuality::_internal_set_position_uncertainty(double value) {
  
  position_uncertainty_ = value;
}
inline void LocalizationQuality::set_position_uncertainty(double value) {
  _internal_set_position_uncertainty(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationQuality.position_uncertainty)
}

// double orientation_uncertainty = 3;
inline void LocalizationQuality::clear_orientation_uncertainty() {
  orientation_uncertainty_ = 0;
}
inline double LocalizationQuality::_internal_orientation_uncertainty() const {
  return orientation_uncertainty_;
}
inline double LocalizationQuality::orientation_uncertainty() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationQuality.orientation_uncertainty)
  return _internal_orientation_uncertainty();
}
inline void LocalizationQuality::_internal_set_orientation_uncertainty(double value) {
  
  orientation_uncertainty_ = value;
}
inline void LocalizationQuality::set_orientation_uncertainty(double value) {
  _internal_set_orientation_uncertainty(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationQuality.orientation_uncertainty)
}

// uint32 matched_features = 4;
inline void LocalizationQuality::clear_matched_features() {
  matched_features_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalizationQuality::_internal_matched_features() const {
  return matched_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalizationQuality::matched_features() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationQuality.matched_features)
  return _internal_matched_features();
}
inline void LocalizationQuality::_internal_set_matched_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  matched_features_ = value;
}
inline void LocalizationQuality::set_matched_features(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_matched_features(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationQuality.matched_features)
}

// double drift_estimate = 5;
inline void LocalizationQuality::clear_drift_estimate() {
  drift_estimate_ = 0;
}
inline double LocalizationQuality::_internal_drift_estimate() const {
  return drift_estimate_;
}
inline double LocalizationQuality::drift_estimate() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationQuality.drift_estimate)
  return _internal_drift_estimate();
}
inline void LocalizationQuality::_internal_set_drift_estimate(double value) {
  
  drift_estimate_ = value;
}
inline void LocalizationQuality::set_drift_estimate(double value) {
  _internal_set_drift_estimate(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationQuality.drift_estimate)
}

// .agricultural.robot.navigation.v1.LocalizationHealth health = 6;
inline void LocalizationQuality::clear_health() {
  health_ = 0;
}
inline ::agricultural::robot::navigation::v1::LocalizationHealth LocalizationQuality::_internal_health() const {
  return static_cast< ::agricultural::robot::navigation::v1::LocalizationHealth >(health_);
}
inline ::agricultural::robot::navigation::v1::LocalizationHealth LocalizationQuality::health() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationQuality.health)
  return _internal_health();
}
inline void LocalizationQuality::_internal_set_health(::agricultural::robot::navigation::v1::LocalizationHealth value) {
  
  health_ = value;
}
inline void LocalizationQuality::set_health(::agricultural::robot::navigation::v1::LocalizationHealth value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationQuality.health)
}

// -------------------------------------------------------------------

// LocalizationMetrics

// uint32 particle_count = 1;
inline void LocalizationMetrics::clear_particle_count() {
  particle_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalizationMetrics::_internal_particle_count() const {
  return particle_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalizationMetrics::particle_count() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationMetrics.particle_count)
  return _internal_particle_count();
}
inline void LocalizationMetrics::_internal_set_particle_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  particle_count_ = value;
}
inline void LocalizationMetrics::set_particle_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_particle_count(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationMetrics.particle_count)
}

// double effective_sample_size = 2;
inline void LocalizationMetrics::clear_effective_sample_size() {
  effective_sample_size_ = 0;
}
inline double LocalizationMetrics::_internal_effective_sample_size() const {
  return effective_sample_size_;
}
inline double LocalizationMetrics::effective_sample_size() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationMetrics.effective_sample_size)
  return _internal_effective_sample_size();
}
inline void LocalizationMetrics::_internal_set_effective_sample_size(double value) {
  
  effective_sample_size_ = value;
}
inline void LocalizationMetrics::set_effective_sample_size(double value) {
  _internal_set_effective_sample_size(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationMetrics.effective_sample_size)
}

// double convergence_rate = 3;
inline void LocalizationMetrics::clear_convergence_rate() {
  convergence_rate_ = 0;
}
inline double LocalizationMetrics::_internal_convergence_rate() const {
  return convergence_rate_;
}
inline double LocalizationMetrics::convergence_rate() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationMetrics.convergence_rate)
  return _internal_convergence_rate();
}
inline void LocalizationMetrics::_internal_set_convergence_rate(double value) {
  
  convergence_rate_ = value;
}
inline void LocalizationMetrics::set_convergence_rate(double value) {
  _internal_set_convergence_rate(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationMetrics.convergence_rate)
}

// .google.protobuf.Duration update_frequency = 4;
inline bool LocalizationMetrics::_internal_has_update_frequency() const {
  return this != internal_default_instance() && update_frequency_ != nullptr;
}
inline bool LocalizationMetrics::has_update_frequency() const {
  return _internal_has_update_frequency();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& LocalizationMetrics::_internal_update_frequency() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = update_frequency_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration*>(
      &PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& LocalizationMetrics::update_frequency() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationMetrics.update_frequency)
  return _internal_update_frequency();
}
inline void LocalizationMetrics::unsafe_arena_set_allocated_update_frequency(
    PROTOBUF_NAMESPACE_ID::Duration* update_frequency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_frequency_);
  }
  update_frequency_ = update_frequency;
  if (update_frequency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:agricultural.robot.navigation.v1.LocalizationMetrics.update_frequency)
}
inline PROTOBUF_NAMESPACE_ID::Duration* LocalizationMetrics::release_update_frequency() {
  auto temp = unsafe_arena_release_update_frequency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* LocalizationMetrics::unsafe_arena_release_update_frequency() {
  // @@protoc_insertion_point(field_release:agricultural.robot.navigation.v1.LocalizationMetrics.update_frequency)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = update_frequency_;
  update_frequency_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* LocalizationMetrics::_internal_mutable_update_frequency() {
  
  if (update_frequency_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    update_frequency_ = p;
  }
  return update_frequency_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* LocalizationMetrics::mutable_update_frequency() {
  // @@protoc_insertion_point(field_mutable:agricultural.robot.navigation.v1.LocalizationMetrics.update_frequency)
  return _internal_mutable_update_frequency();
}
inline void LocalizationMetrics::set_allocated_update_frequency(PROTOBUF_NAMESPACE_ID::Duration* update_frequency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_frequency_);
  }
  if (update_frequency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_frequency)->GetArena();
    if (message_arena != submessage_arena) {
      update_frequency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_frequency, submessage_arena);
    }
    
  } else {
    
  }
  update_frequency_ = update_frequency;
  // @@protoc_insertion_point(field_set_allocated:agricultural.robot.navigation.v1.LocalizationMetrics.update_frequency)
}

// uint32 sensor_updates_count = 5;
inline void LocalizationMetrics::clear_sensor_updates_count() {
  sensor_updates_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalizationMetrics::_internal_sensor_updates_count() const {
  return sensor_updates_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LocalizationMetrics::sensor_updates_count() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationMetrics.sensor_updates_count)
  return _internal_sensor_updates_count();
}
inline void LocalizationMetrics::_internal_set_sensor_updates_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sensor_updates_count_ = value;
}
inline void LocalizationMetrics::set_sensor_updates_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sensor_updates_count(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationMetrics.sensor_updates_count)
}

// double map_match_score = 6;
inline void LocalizationMetrics::clear_map_match_score() {
  map_match_score_ = 0;
}
inline double LocalizationMetrics::_internal_map_match_score() const {
  return map_match_score_;
}
inline double LocalizationMetrics::map_match_score() const {
  // @@protoc_insertion_point(field_get:agricultural.robot.navigation.v1.LocalizationMetrics.map_match_score)
  return _internal_map_match_score();
}
inline void LocalizationMetrics::_internal_set_map_match_score(double value) {
  
  map_match_score_ = value;
}
inline void LocalizationMetrics::set_map_match_score(double value) {
  _internal_set_map_match_score(value);
  // @@protoc_insertion_point(field_set:agricultural.robot.navigation.v1.LocalizationMetrics.map_match_score)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace navigation
}  // namespace robot
}  // namespace agricultural

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::MapType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::MapType>() {
  return ::agricultural::robot::navigation::v1::MapType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::MapSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::MapSource>() {
  return ::agricultural::robot::navigation::v1::MapSource_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::ControlMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::ControlMode>() {
  return ::agricultural::robot::navigation::v1::ControlMode_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::EmergencyStopType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::EmergencyStopType>() {
  return ::agricultural::robot::navigation::v1::EmergencyStopType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::SafetyViolationType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::SafetyViolationType>() {
  return ::agricultural::robot::navigation::v1::SafetyViolationType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::WaypointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::WaypointType>() {
  return ::agricultural::robot::navigation::v1::WaypointType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::WaypointActionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::WaypointActionType>() {
  return ::agricultural::robot::navigation::v1::WaypointActionType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::PlannerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::PlannerType>() {
  return ::agricultural::robot::navigation::v1::PlannerType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::NavigationBehavior> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::NavigationBehavior>() {
  return ::agricultural::robot::navigation::v1::NavigationBehavior_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::TrajectoryExecutionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::TrajectoryExecutionMode>() {
  return ::agricultural::robot::navigation::v1::TrajectoryExecutionMode_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::NavigationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::NavigationStatus>() {
  return ::agricultural::robot::navigation::v1::NavigationStatus_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::NavigationResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::NavigationResult>() {
  return ::agricultural::robot::navigation::v1::NavigationResult_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::NavigationErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::NavigationErrorCode>() {
  return ::agricultural::robot::navigation::v1::NavigationErrorCode_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::CameraType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::CameraType>() {
  return ::agricultural::robot::navigation::v1::CameraType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::VideoFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::VideoFormat>() {
  return ::agricultural::robot::navigation::v1::VideoFormat_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::VideoQuality> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::VideoQuality>() {
  return ::agricultural::robot::navigation::v1::VideoQuality_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::CameraStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::CameraStatus>() {
  return ::agricultural::robot::navigation::v1::CameraStatus_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::CameraControlType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::CameraControlType>() {
  return ::agricultural::robot::navigation::v1::CameraControlType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::DistortionModel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::DistortionModel>() {
  return ::agricultural::robot::navigation::v1::DistortionModel_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::OverlayType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::OverlayType>() {
  return ::agricultural::robot::navigation::v1::OverlayType_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::LocalizationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::LocalizationStatus>() {
  return ::agricultural::robot::navigation::v1::LocalizationStatus_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::LocalizationMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::LocalizationMethod>() {
  return ::agricultural::robot::navigation::v1::LocalizationMethod_descriptor();
}
template <> struct is_proto_enum< ::agricultural::robot::navigation::v1::LocalizationHealth> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::agricultural::robot::navigation::v1::LocalizationHealth>() {
  return ::agricultural::robot::navigation::v1::LocalizationHealth_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_2fnavigation_2frobot_2dnavigation_2eproto
