// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot/navigation/robot-navigation.proto

#include "robot/navigation/robot-navigation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraControlCommand_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraControlResponse_CurrentSettingsEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitializeLocalizationRequest_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_robot_2fnavigation_2frobot_2dnavigation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaypointAction_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace agricultural {
namespace robot {
namespace navigation {
namespace v1 {
class GetMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetMapRequest> _instance;
} _GetMapRequest_default_instance_;
class SetMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMapRequest> _instance;
} _SetMapRequest_default_instance_;
class UpdateMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMapRequest> _instance;
} _UpdateMapRequest_default_instance_;
class ClearMapRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ClearMapRequest> _instance;
} _ClearMapRequest_default_instance_;
class MapResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapResponse> _instance;
} _MapResponse_default_instance_;
class OccupancyGridMapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OccupancyGridMap> _instance;
} _OccupancyGridMap_default_instance_;
class MapMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapMetadata> _instance;
} _MapMetadata_default_instance_;
class MapUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapUpdate> _instance;
} _MapUpdate_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rectangle> _instance;
} _Rectangle_default_instance_;
class GetPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPositionRequest> _instance;
} _GetPositionRequest_default_instance_;
class SetPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetPositionRequest> _instance;
} _SetPositionRequest_default_instance_;
class StreamPositionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamPositionRequest> _instance;
} _StreamPositionRequest_default_instance_;
class PositionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionResponse> _instance;
} _PositionResponse_default_instance_;
class PositionUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PositionUpdate> _instance;
} _PositionUpdate_default_instance_;
class PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose> _instance;
} _Pose_default_instance_;
class PoseWithCovarianceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PoseWithCovariance> _instance;
} _PoseWithCovariance_default_instance_;
class Point2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point2D> _instance;
} _Point2D_default_instance_;
class Point3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point3D> _instance;
} _Point3D_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Quaternion> _instance;
} _Quaternion_default_instance_;
class TwistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Twist> _instance;
} _Twist_default_instance_;
class Vector3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3> _instance;
} _Vector3_default_instance_;
class VelocityCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityCommand> _instance;
} _VelocityCommand_default_instance_;
class JoystickInputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JoystickInput> _instance;
} _JoystickInput_default_instance_;
class VelocityResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VelocityResponse> _instance;
} _VelocityResponse_default_instance_;
class StopMovementRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopMovementRequest> _instance;
} _StopMovementRequest_default_instance_;
class SafetyConstraintsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SafetyConstraints> _instance;
} _SafetyConstraints_default_instance_;
class SafetyViolationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SafetyViolation> _instance;
} _SafetyViolation_default_instance_;
class NavigationGoalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationGoal> _instance;
} _NavigationGoal_default_instance_;
class TrajectoryCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryCommand> _instance;
} _TrajectoryCommand_default_instance_;
class WaypointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Waypoint> _instance;
} _Waypoint_default_instance_;
class TrajectoryPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryPoint> _instance;
} _TrajectoryPoint_default_instance_;
class NavigationOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationOptions> _instance;
} _NavigationOptions_default_instance_;
class TrajectoryOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrajectoryOptions> _instance;
} _TrajectoryOptions_default_instance_;
class WaypointAction_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaypointAction_ParametersEntry_DoNotUse> _instance;
} _WaypointAction_ParametersEntry_DoNotUse_default_instance_;
class WaypointActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WaypointAction> _instance;
} _WaypointAction_default_instance_;
class CancelGoalRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelGoalRequest> _instance;
} _CancelGoalRequest_default_instance_;
class GetNavigationStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNavigationStatusRequest> _instance;
} _GetNavigationStatusRequest_default_instance_;
class StreamNavigationStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamNavigationStatusRequest> _instance;
} _StreamNavigationStatusRequest_default_instance_;
class NavigationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationResponse> _instance;
} _NavigationResponse_default_instance_;
class NavigationStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationStatusResponse> _instance;
} _NavigationStatusResponse_default_instance_;
class NavigationStatusUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationStatusUpdate> _instance;
} _NavigationStatusUpdate_default_instance_;
class NavigationProgressDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationProgress> _instance;
} _NavigationProgress_default_instance_;
class NavigationErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NavigationError> _instance;
} _NavigationError_default_instance_;
class GetCameraInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCameraInfoRequest> _instance;
} _GetCameraInfoRequest_default_instance_;
class StreamVideoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamVideoRequest> _instance;
} _StreamVideoRequest_default_instance_;
class CameraControlRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraControlRequest> _instance;
} _CameraControlRequest_default_instance_;
class CameraInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraInfoResponse> _instance;
} _CameraInfoResponse_default_instance_;
class CameraInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraInfo> _instance;
} _CameraInfo_default_instance_;
class VideoFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFrame> _instance;
} _VideoFrame_default_instance_;
class VideoStreamOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoStreamOptions> _instance;
} _VideoStreamOptions_default_instance_;
class CameraControlCommand_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraControlCommand_ParametersEntry_DoNotUse> _instance;
} _CameraControlCommand_ParametersEntry_DoNotUse_default_instance_;
class CameraControlCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraControlCommand> _instance;
} _CameraControlCommand_default_instance_;
class CameraControlResponse_CurrentSettingsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraControlResponse_CurrentSettingsEntry_DoNotUse> _instance;
} _CameraControlResponse_CurrentSettingsEntry_DoNotUse_default_instance_;
class CameraControlResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraControlResponse> _instance;
} _CameraControlResponse_default_instance_;
class ResolutionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Resolution> _instance;
} _Resolution_default_instance_;
class CameraIntrinsicsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraIntrinsics> _instance;
} _CameraIntrinsics_default_instance_;
class CameraDistortionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CameraDistortion> _instance;
} _CameraDistortion_default_instance_;
class FrameMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FrameMetadata> _instance;
} _FrameMetadata_default_instance_;
class GetLocalizationStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetLocalizationStatusRequest> _instance;
} _GetLocalizationStatusRequest_default_instance_;
class InitializeLocalizationRequest_ParametersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitializeLocalizationRequest_ParametersEntry_DoNotUse> _instance;
} _InitializeLocalizationRequest_ParametersEntry_DoNotUse_default_instance_;
class InitializeLocalizationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitializeLocalizationRequest> _instance;
} _InitializeLocalizationRequest_default_instance_;
class ResetLocalizationRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetLocalizationRequest> _instance;
} _ResetLocalizationRequest_default_instance_;
class LocalizationStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationStatusResponse> _instance;
} _LocalizationStatusResponse_default_instance_;
class LocalizationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationResponse> _instance;
} _LocalizationResponse_default_instance_;
class LocalizationQualityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationQuality> _instance;
} _LocalizationQuality_default_instance_;
class LocalizationMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LocalizationMetrics> _instance;
} _LocalizationMetrics_default_instance_;
}  // namespace v1
}  // namespace navigation
}  // namespace robot
}  // namespace agricultural
static void InitDefaultsscc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraControlCommand_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraControlCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraControlCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_CameraControlCommand_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_CameraControlCommand_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraControlCommand_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse();
  }
  ::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraControlCommand_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraControlCommand_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_CameraControlRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraControlRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraControlRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraControlRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CameraControlRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CameraControlRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_CameraControlResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraControlResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraControlResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraControlResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraControlResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CameraControlResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_CameraControlResponse_CurrentSettingsEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CameraControlResponse_CurrentSettingsEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraControlResponse_CurrentSettingsEntry_DoNotUse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse();
  }
  ::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraControlResponse_CurrentSettingsEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraControlResponse_CurrentSettingsEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraDistortion_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraDistortion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraDistortion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraInfo_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_CameraInfoResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraInfoResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CameraInfoResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CameraInfoResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CameraIntrinsics_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CameraIntrinsics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CameraIntrinsics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_CancelGoalRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_CancelGoalRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::CancelGoalRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::CancelGoalRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CancelGoalRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CancelGoalRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_ClearMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_ClearMapRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::ClearMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::ClearMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ClearMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ClearMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_FrameMetadata_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::FrameMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::FrameMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_GetCameraInfoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_GetCameraInfoRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::GetCameraInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::GetCameraInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCameraInfoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCameraInfoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_GetLocalizationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_GetLocalizationStatusRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetLocalizationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetLocalizationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_GetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_GetMapRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::GetMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::GetMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_GetNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_GetNavigationStatusRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::GetNavigationStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::GetNavigationStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_GetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_GetPositionRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::GetPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::GetPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_InitializeLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_InitializeLocalizationRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::InitializeLocalizationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::InitializeLocalizationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitializeLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InitializeLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_InitializeLocalizationRequest_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_InitializeLocalizationRequest_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_InitializeLocalizationRequest_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse();
  }
  ::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InitializeLocalizationRequest_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InitializeLocalizationRequest_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_JoystickInput_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::JoystickInput();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::JoystickInput::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_LocalizationMetrics_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::LocalizationMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::LocalizationMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_LocalizationQuality_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::LocalizationQuality();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::LocalizationQuality::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_LocalizationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_LocalizationResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::LocalizationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::LocalizationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LocalizationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LocalizationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LocalizationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_LocalizationStatusResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::LocalizationStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::LocalizationStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_LocalizationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_LocalizationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_MapMetadata_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::MapMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::MapMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_MapResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_MapResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::MapResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::MapResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MapResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MapResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_MapUpdate_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::MapUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::MapUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationError_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationGoal_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationGoal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationGoal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationOptions_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationProgress_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationProgress();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationProgress::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_NavigationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NavigationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NavigationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationStatusResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NavigationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NavigationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_NavigationStatusUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_NavigationStatusUpdate_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::NavigationStatusUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::NavigationStatusUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_NavigationStatusUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_NavigationStatusUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_OccupancyGridMap_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::OccupancyGridMap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::OccupancyGridMap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Point2D_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Point2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Point2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Point3D_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Point3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Point3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Pose_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::PoseWithCovariance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::PoseWithCovariance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_PositionResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_PositionResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::PositionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::PositionResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PositionResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PositionResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_PositionUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_PositionUpdate_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::PositionUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::PositionUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PositionUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_PositionUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Quaternion_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Quaternion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Quaternion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Rectangle_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Rectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Rectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_ResetLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_ResetLocalizationRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::ResetLocalizationRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::ResetLocalizationRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Resolution_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Resolution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Resolution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_SafetyConstraints_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::SafetyConstraints();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::SafetyConstraints::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_SafetyViolation_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::SafetyViolation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::SafetyViolation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_SetMapRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::SetMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::SetMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_SetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_SetPositionRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::SetPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::SetPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_StopMovementRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_StopMovementRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::StopMovementRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::StopMovementRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopMovementRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopMovementRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_StreamNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_StreamNavigationStatusRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_StreamPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_StreamPositionRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::StreamPositionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::StreamPositionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_StreamVideoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_StreamVideoRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::StreamVideoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::StreamVideoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamVideoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamVideoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_TrajectoryCommand_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::TrajectoryCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::TrajectoryCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TrajectoryCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TrajectoryCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_TrajectoryOptions_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::TrajectoryOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::TrajectoryOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_TrajectoryPoint_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::TrajectoryPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::TrajectoryPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Twist_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Twist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Twist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_UpdateMapRequest_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::UpdateMapRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::UpdateMapRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Vector3_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Vector3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Vector3::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static void InitDefaultsscc_info_VelocityCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_VelocityCommand_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::VelocityCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::VelocityCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_VelocityCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_VelocityCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_VelocityResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_VelocityResponse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::VelocityResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::VelocityResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VelocityResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VelocityResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_VideoFrame_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_VideoFrame_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::VideoFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::VideoFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_VideoFrame_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_VideoFrame_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_VideoStreamOptions_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::VideoStreamOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::VideoStreamOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_Waypoint_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::Waypoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::Waypoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_WaypointAction_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::WaypointAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::agricultural::robot::navigation::v1::WaypointAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_WaypointAction_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,}};

static void InitDefaultsscc_info_WaypointAction_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::agricultural::robot::navigation::v1::_WaypointAction_ParametersEntry_DoNotUse_default_instance_;
    new (ptr) ::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse();
  }
  ::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WaypointAction_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WaypointAction_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_2fnavigation_2frobot_2dnavigation_2eproto[66];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[23];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetMapRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetMapRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetMapRequest, map_type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetMapRequest, frame_id_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetMapRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetMapRequest, map_data_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetMapRequest, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::UpdateMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::UpdateMapRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::UpdateMapRequest, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::ClearMapRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::ClearMapRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::ClearMapRequest, map_type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, map_data_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, metadata_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapResponse, timestamp_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::OccupancyGridMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::OccupancyGridMap, info_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::OccupancyGridMap, data_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::OccupancyGridMap, encoding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, map_load_time_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, resolution_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, width_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, height_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, origin_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, frame_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, version_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapMetadata, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapUpdate, update_region_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapUpdate, data_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::MapUpdate, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Rectangle, min_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Rectangle, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetPositionRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetPositionRequest, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetPositionRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetPositionRequest, pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SetPositionRequest, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamPositionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamPositionRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamPositionRequest, frame_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamPositionRequest, frequency_hz_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionResponse, pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionResponse, timestamp_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, velocity_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, frame_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PositionUpdate, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Pose, position_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Pose, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PoseWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PoseWithCovariance, pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::PoseWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point2D, x_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point3D, x_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point3D, y_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Point3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Quaternion, x_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Quaternion, y_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Quaternion, z_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Quaternion, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Twist, linear_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Twist, angular_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, cmd_vel_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, timeout_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, joystick_input_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, safety_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityCommand, control_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::JoystickInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::JoystickInput, axes_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::JoystickInput, buttons_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::JoystickInput, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::JoystickInput, controller_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityResponse, actual_velocity_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VelocityResponse, safety_violations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StopMovementRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StopMovementRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StopMovementRequest, stop_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, max_linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, max_angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, max_acceleration_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, obstacle_avoidance_enabled_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, safety_margin_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyConstraints, forbidden_zones_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyViolation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyViolation, type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyViolation, description_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyViolation, severity_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::SafetyViolation, detected_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, goal_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, target_pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, frame_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, options_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, waypoints_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationGoal, deadline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryCommand, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryCommand, trajectory_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryCommand, points_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryCommand, options_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryCommand, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Waypoint, waypoint_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Waypoint, pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Waypoint, type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Waypoint, max_duration_at_waypoint_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Waypoint, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryPoint, pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryPoint, velocity_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryPoint, time_from_start_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryPoint, accelerations_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, planner_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, tolerance_linear_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, tolerance_angular_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, use_obstacle_avoidance_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, avoid_zones_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, behavior_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, max_planning_time_ms_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationOptions, max_retries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryOptions, interpolate_path_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryOptions, velocity_scaling_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryOptions, check_collisions_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::TrajectoryOptions, execution_mode_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction, type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction, duration_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::WaypointAction, parameters_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CancelGoalRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CancelGoalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CancelGoalRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CancelGoalRequest, goal_id_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetNavigationStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetNavigationStatusRequest, robot_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, frequency_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationResponse, goal_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationResponse, result_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationResponse, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, progress_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, current_goal_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, errors_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusResponse, timestamp_),
  ~0u,
  ~0u,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, status_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, progress_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationStatusUpdate, error_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, distance_remaining_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, distance_traveled_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, time_remaining_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, time_elapsed_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, current_waypoint_index_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, total_waypoints_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationProgress, completion_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationError, code_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationError, description_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationError, occurred_at_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationError, recoverable_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::NavigationError, suggested_actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetCameraInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetCameraInfoRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetCameraInfoRequest, camera_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamVideoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamVideoRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamVideoRequest, camera_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::StreamVideoRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlRequest, camera_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlRequest, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfoResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfoResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfoResponse, cameras_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfoResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, camera_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, name_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, resolution_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, framerate_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, intrinsics_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, distortion_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, frame_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, status_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraInfo, supported_formats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, camera_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, image_data_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, format_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, resolution_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, timestamp_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, frame_number_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoFrame, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, format_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, resolution_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, framerate_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, quality_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, enable_compression_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::VideoStreamOptions, overlays_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand, type_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlCommand, parameters_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse, current_settings_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraControlResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Resolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Resolution, width_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::Resolution, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraIntrinsics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraIntrinsics, focal_length_x_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraIntrinsics, focal_length_y_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraIntrinsics, principal_point_x_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraIntrinsics, principal_point_y_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraIntrinsics, camera_matrix_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraDistortion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraDistortion, model_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::CameraDistortion, coefficients_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, exposure_time_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, gain_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, white_balance_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, capture_time_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::FrameMetadata, camera_pose_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest, initial_pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest, method_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::InitializeLocalizationRequest, parameters_),
  ~0u,
  0,
  ~0u,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::ResetLocalizationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::ResetLocalizationRequest, robot_id_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::ResetLocalizationRequest, clear_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, status_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, quality_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, current_pose_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, method_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, metrics_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationStatusResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationResponse, success_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationResponse, message_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationResponse, timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, confidence_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, position_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, orientation_uncertainty_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, matched_features_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, drift_estimate_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationQuality, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, particle_count_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, effective_sample_size_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, convergence_rate_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, update_frequency_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, sensor_updates_count_),
  PROTOBUF_FIELD_OFFSET(::agricultural::robot::navigation::v1::LocalizationMetrics, map_match_score_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::agricultural::robot::navigation::v1::GetMapRequest)},
  { 11, -1, sizeof(::agricultural::robot::navigation::v1::SetMapRequest)},
  { 19, -1, sizeof(::agricultural::robot::navigation::v1::UpdateMapRequest)},
  { 26, -1, sizeof(::agricultural::robot::navigation::v1::ClearMapRequest)},
  { 33, 43, sizeof(::agricultural::robot::navigation::v1::MapResponse)},
  { 48, -1, sizeof(::agricultural::robot::navigation::v1::OccupancyGridMap)},
  { 56, -1, sizeof(::agricultural::robot::navigation::v1::MapMetadata)},
  { 69, -1, sizeof(::agricultural::robot::navigation::v1::MapUpdate)},
  { 77, -1, sizeof(::agricultural::robot::navigation::v1::Rectangle)},
  { 84, -1, sizeof(::agricultural::robot::navigation::v1::GetPositionRequest)},
  { 91, -1, sizeof(::agricultural::robot::navigation::v1::SetPositionRequest)},
  { 99, -1, sizeof(::agricultural::robot::navigation::v1::StreamPositionRequest)},
  { 107, 116, sizeof(::agricultural::robot::navigation::v1::PositionResponse)},
  { 120, -1, sizeof(::agricultural::robot::navigation::v1::PositionUpdate)},
  { 131, -1, sizeof(::agricultural::robot::navigation::v1::Pose)},
  { 138, -1, sizeof(::agricultural::robot::navigation::v1::PoseWithCovariance)},
  { 145, -1, sizeof(::agricultural::robot::navigation::v1::Point2D)},
  { 152, -1, sizeof(::agricultural::robot::navigation::v1::Point3D)},
  { 160, -1, sizeof(::agricultural::robot::navigation::v1::Quaternion)},
  { 169, -1, sizeof(::agricultural::robot::navigation::v1::Twist)},
  { 176, -1, sizeof(::agricultural::robot::navigation::v1::Vector3)},
  { 184, -1, sizeof(::agricultural::robot::navigation::v1::VelocityCommand)},
  { 195, -1, sizeof(::agricultural::robot::navigation::v1::JoystickInput)},
  { 204, -1, sizeof(::agricultural::robot::navigation::v1::VelocityResponse)},
  { 214, -1, sizeof(::agricultural::robot::navigation::v1::StopMovementRequest)},
  { 221, -1, sizeof(::agricultural::robot::navigation::v1::SafetyConstraints)},
  { 232, -1, sizeof(::agricultural::robot::navigation::v1::SafetyViolation)},
  { 241, -1, sizeof(::agricultural::robot::navigation::v1::NavigationGoal)},
  { 253, -1, sizeof(::agricultural::robot::navigation::v1::TrajectoryCommand)},
  { 263, -1, sizeof(::agricultural::robot::navigation::v1::Waypoint)},
  { 273, -1, sizeof(::agricultural::robot::navigation::v1::TrajectoryPoint)},
  { 282, -1, sizeof(::agricultural::robot::navigation::v1::NavigationOptions)},
  { 295, -1, sizeof(::agricultural::robot::navigation::v1::TrajectoryOptions)},
  { 304, 311, sizeof(::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse)},
  { 313, -1, sizeof(::agricultural::robot::navigation::v1::WaypointAction)},
  { 321, 328, sizeof(::agricultural::robot::navigation::v1::CancelGoalRequest)},
  { 330, -1, sizeof(::agricultural::robot::navigation::v1::GetNavigationStatusRequest)},
  { 336, -1, sizeof(::agricultural::robot::navigation::v1::StreamNavigationStatusRequest)},
  { 343, -1, sizeof(::agricultural::robot::navigation::v1::NavigationResponse)},
  { 353, 363, sizeof(::agricultural::robot::navigation::v1::NavigationStatusResponse)},
  { 368, 378, sizeof(::agricultural::robot::navigation::v1::NavigationStatusUpdate)},
  { 383, -1, sizeof(::agricultural::robot::navigation::v1::NavigationProgress)},
  { 395, -1, sizeof(::agricultural::robot::navigation::v1::NavigationError)},
  { 405, -1, sizeof(::agricultural::robot::navigation::v1::GetCameraInfoRequest)},
  { 412, -1, sizeof(::agricultural::robot::navigation::v1::StreamVideoRequest)},
  { 420, -1, sizeof(::agricultural::robot::navigation::v1::CameraControlRequest)},
  { 428, -1, sizeof(::agricultural::robot::navigation::v1::CameraInfoResponse)},
  { 437, -1, sizeof(::agricultural::robot::navigation::v1::CameraInfo)},
  { 452, -1, sizeof(::agricultural::robot::navigation::v1::VideoFrame)},
  { 464, -1, sizeof(::agricultural::robot::navigation::v1::VideoStreamOptions)},
  { 475, 482, sizeof(::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse)},
  { 484, -1, sizeof(::agricultural::robot::navigation::v1::CameraControlCommand)},
  { 491, 498, sizeof(::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse)},
  { 500, -1, sizeof(::agricultural::robot::navigation::v1::CameraControlResponse)},
  { 509, -1, sizeof(::agricultural::robot::navigation::v1::Resolution)},
  { 516, -1, sizeof(::agricultural::robot::navigation::v1::CameraIntrinsics)},
  { 526, -1, sizeof(::agricultural::robot::navigation::v1::CameraDistortion)},
  { 533, 543, sizeof(::agricultural::robot::navigation::v1::FrameMetadata)},
  { 548, -1, sizeof(::agricultural::robot::navigation::v1::GetLocalizationStatusRequest)},
  { 554, 561, sizeof(::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse)},
  { 563, 572, sizeof(::agricultural::robot::navigation::v1::InitializeLocalizationRequest)},
  { 576, -1, sizeof(::agricultural::robot::navigation::v1::ResetLocalizationRequest)},
  { 583, -1, sizeof(::agricultural::robot::navigation::v1::LocalizationStatusResponse)},
  { 594, -1, sizeof(::agricultural::robot::navigation::v1::LocalizationResponse)},
  { 603, -1, sizeof(::agricultural::robot::navigation::v1::LocalizationQuality)},
  { 614, -1, sizeof(::agricultural::robot::navigation::v1::LocalizationMetrics)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_GetMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_SetMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_UpdateMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_ClearMapRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_MapResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_OccupancyGridMap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_MapMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_MapUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Rectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_GetPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_SetPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_StreamPositionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_PositionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_PositionUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Point2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Point3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Quaternion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Twist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_VelocityCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_JoystickInput_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_VelocityResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_StopMovementRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_SafetyConstraints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_SafetyViolation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationGoal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_TrajectoryCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Waypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_TrajectoryOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_WaypointAction_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_WaypointAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CancelGoalRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_GetNavigationStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_StreamNavigationStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationStatusUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationProgress_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_NavigationError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_GetCameraInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_StreamVideoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_VideoFrame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_VideoStreamOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraControlCommand_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraControlCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraControlResponse_CurrentSettingsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_Resolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraIntrinsics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_CameraDistortion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_FrameMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_GetLocalizationStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_InitializeLocalizationRequest_ParametersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_InitializeLocalizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_ResetLocalizationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_LocalizationStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_LocalizationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_LocalizationQuality_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::agricultural::robot::navigation::v1::_LocalizationMetrics_default_instance_),
};

const char descriptor_table_protodef_robot_2fnavigation_2frobot_2dnavigation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'robot/navigation/robot-navigation.prot"
  "o\022 agricultural.robot.navigation.v1\032\037goo"
  "gle/protobuf/timestamp.proto\032\036google/pro"
  "tobuf/duration.proto\032\033google/protobuf/em"
  "pty.proto\"\202\001\n\rGetMapRequest\022\020\n\010robot_id\030"
  "\001 \001(\t\022;\n\010map_type\030\002 \001(\0162).agricultural.r"
  "obot.navigation.v1.MapType\022\025\n\010frame_id\030\003"
  " \001(\tH\000\210\001\001B\013\n\t_frame_id\"\250\001\n\rSetMapRequest"
  "\022\020\n\010robot_id\030\001 \001(\t\022D\n\010map_data\030\002 \001(\01322.a"
  "gricultural.robot.navigation.v1.Occupanc"
  "yGridMap\022\?\n\010metadata\030\003 \001(\0132-.agricultura"
  "l.robot.navigation.v1.MapMetadata\"a\n\020Upd"
  "ateMapRequest\022\020\n\010robot_id\030\001 \001(\t\022;\n\006updat"
  "e\030\002 \001(\0132+.agricultural.robot.navigation."
  "v1.MapUpdate\"`\n\017ClearMapRequest\022\020\n\010robot"
  "_id\030\001 \001(\t\022;\n\010map_type\030\002 \001(\0162).agricultur"
  "al.robot.navigation.v1.MapType\"\211\002\n\013MapRe"
  "sponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t"
  "\022I\n\010map_data\030\003 \001(\01322.agricultural.robot."
  "navigation.v1.OccupancyGridMapH\000\210\001\001\022D\n\010m"
  "etadata\030\004 \001(\0132-.agricultural.robot.navig"
  "ation.v1.MapMetadataH\001\210\001\001\022-\n\ttimestamp\030\005"
  " \001(\0132\032.google.protobuf.TimestampB\013\n\t_map"
  "_dataB\013\n\t_metadata\"o\n\020OccupancyGridMap\022;"
  "\n\004info\030\001 \001(\0132-.agricultural.robot.naviga"
  "tion.v1.MapMetadata\022\014\n\004data\030\002 \001(\014\022\020\n\010enc"
  "oding\030\003 \001(\t\"\213\002\n\013MapMetadata\0221\n\rmap_load_"
  "time\030\001 \001(\0132\032.google.protobuf.Timestamp\022\022"
  "\n\nresolution\030\002 \001(\002\022\r\n\005width\030\003 \001(\r\022\016\n\006hei"
  "ght\030\004 \001(\r\0226\n\006origin\030\005 \001(\0132&.agricultural"
  ".robot.navigation.v1.Pose\022\020\n\010frame_id\030\006 "
  "\001(\t\022\017\n\007version\030\007 \001(\r\022;\n\006source\030\010 \001(\0162+.a"
  "gricultural.robot.navigation.v1.MapSourc"
  "e\"\214\001\n\tMapUpdate\022B\n\rupdate_region\030\001 \001(\0132+"
  ".agricultural.robot.navigation.v1.Rectan"
  "gle\022\014\n\004data\030\002 \001(\014\022-\n\ttimestamp\030\003 \001(\0132\032.g"
  "oogle.protobuf.Timestamp\"{\n\tRectangle\0226\n"
  "\003min\030\001 \001(\0132).agricultural.robot.navigati"
  "on.v1.Point2D\0226\n\003max\030\002 \001(\0132).agricultura"
  "l.robot.navigation.v1.Point2D\"8\n\022GetPosi"
  "tionRequest\022\020\n\010robot_id\030\001 \001(\t\022\020\n\010frame_i"
  "d\030\002 \001(\t\"|\n\022SetPositionRequest\022\020\n\010robot_i"
  "d\030\001 \001(\t\022B\n\004pose\030\002 \001(\01324.agricultural.rob"
  "ot.navigation.v1.PoseWithCovariance\022\020\n\010f"
  "rame_id\030\003 \001(\t\"Q\n\025StreamPositionRequest\022\020"
  "\n\010robot_id\030\001 \001(\t\022\020\n\010frame_id\030\002 \001(\t\022\024\n\014fr"
  "equency_hz\030\003 \001(\r\"\265\001\n\020PositionResponse\022\017\n"
  "\007success\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022G\n\004pose\030"
  "\003 \001(\01324.agricultural.robot.navigation.v1"
  ".PoseWithCovarianceH\000\210\001\001\022-\n\ttimestamp\030\004 "
  "\001(\0132\032.google.protobuf.TimestampB\007\n\005_pose"
  "\"\252\002\n\016PositionUpdate\022\020\n\010robot_id\030\001 \001(\t\022B\n"
  "\004pose\030\002 \001(\01324.agricultural.robot.navigat"
  "ion.v1.PoseWithCovariance\0229\n\010velocity\030\003 "
  "\001(\0132\'.agricultural.robot.navigation.v1.T"
  "wist\022\020\n\010frame_id\030\004 \001(\t\022-\n\ttimestamp\030\005 \001("
  "\0132\032.google.protobuf.Timestamp\022F\n\007quality"
  "\030\006 \001(\01325.agricultural.robot.navigation.v"
  "1.LocalizationQuality\"\206\001\n\004Pose\022;\n\010positi"
  "on\030\001 \001(\0132).agricultural.robot.navigation"
  ".v1.Point3D\022A\n\013orientation\030\002 \001(\0132,.agric"
  "ultural.robot.navigation.v1.Quaternion\"^"
  "\n\022PoseWithCovariance\0224\n\004pose\030\001 \001(\0132&.agr"
  "icultural.robot.navigation.v1.Pose\022\022\n\nco"
  "variance\030\002 \003(\001\"\037\n\007Point2D\022\t\n\001x\030\001 \001(\001\022\t\n\001"
  "y\030\002 \001(\001\"*\n\007Point3D\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001"
  "\022\t\n\001z\030\003 \001(\001\"8\n\nQuaternion\022\t\n\001x\030\001 \001(\001\022\t\n\001"
  "y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001w\030\004 \001(\001\"~\n\005Twist\0229"
  "\n\006linear\030\001 \001(\0132).agricultural.robot.navi"
  "gation.v1.Vector3\022:\n\007angular\030\002 \001(\0132).agr"
  "icultural.robot.navigation.v1.Vector3\"*\n"
  "\007Vector3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001("
  "\001\"\334\002\n\017VelocityCommand\022\020\n\010robot_id\030\001 \001(\t\022"
  "8\n\007cmd_vel\030\002 \001(\0132\'.agricultural.robot.na"
  "vigation.v1.Twist\022*\n\007timeout\030\003 \001(\0132\031.goo"
  "gle.protobuf.Duration\022G\n\016joystick_input\030"
  "\004 \001(\0132/.agricultural.robot.navigation.v1"
  ".JoystickInput\022C\n\006safety\030\005 \001(\01323.agricul"
  "tural.robot.navigation.v1.SafetyConstrai"
  "nts\022C\n\014control_mode\030\006 \001(\0162-.agricultural"
  ".robot.navigation.v1.ControlMode\"t\n\rJoys"
  "tickInput\022\014\n\004axes\030\001 \003(\002\022\017\n\007buttons\030\002 \003(\010"
  "\022-\n\ttimestamp\030\003 \001(\0132\032.google.protobuf.Ti"
  "mestamp\022\025\n\rcontroller_id\030\004 \001(\t\"\363\001\n\020Veloc"
  "ityResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
  "\002 \001(\t\022@\n\017actual_velocity\030\003 \001(\0132\'.agricul"
  "tural.robot.navigation.v1.Twist\022-\n\ttimes"
  "tamp\030\004 \001(\0132\032.google.protobuf.Timestamp\022L"
  "\n\021safety_violations\030\005 \003(\01321.agricultural"
  ".robot.navigation.v1.SafetyViolation\"o\n\023"
  "StopMovementRequest\022\020\n\010robot_id\030\001 \001(\t\022F\n"
  "\tstop_type\030\002 \001(\01623.agricultural.robot.na"
  "vigation.v1.EmergencyStopType\"\274\001\n\021Safety"
  "Constraints\022\033\n\023max_linear_velocity\030\001 \001(\001"
  "\022\034\n\024max_angular_velocity\030\002 \001(\001\022\030\n\020max_ac"
  "celeration\030\003 \001(\001\022\"\n\032obstacle_avoidance_e"
  "nabled\030\004 \001(\010\022\025\n\rsafety_margin\030\005 \001(\001\022\027\n\017f"
  "orbidden_zones\030\006 \003(\t\"\256\001\n\017SafetyViolation"
  "\022C\n\004type\030\001 \001(\01625.agricultural.robot.navi"
  "gation.v1.SafetyViolationType\022\023\n\013descrip"
  "tion\030\002 \001(\t\022\020\n\010severity\030\003 \001(\001\022/\n\013detected"
  "_at\030\004 \001(\0132\032.google.protobuf.Timestamp\"\303\002"
  "\n\016NavigationGoal\022\020\n\010robot_id\030\001 \001(\t\022\017\n\007go"
  "al_id\030\002 \001(\t\022I\n\013target_pose\030\003 \001(\01324.agric"
  "ultural.robot.navigation.v1.PoseWithCova"
  "riance\022\020\n\010frame_id\030\004 \001(\t\022D\n\007options\030\005 \001("
  "\01323.agricultural.robot.navigation.v1.Nav"
  "igationOptions\022=\n\twaypoints\030\006 \003(\0132*.agri"
  "cultural.robot.navigation.v1.Waypoint\022,\n"
  "\010deadline\030\007 \001(\0132\032.google.protobuf.Timest"
  "amp\"\327\001\n\021TrajectoryCommand\022\020\n\010robot_id\030\001 "
  "\001(\t\022\025\n\rtrajectory_id\030\002 \001(\t\022A\n\006points\030\003 \003"
  "(\01321.agricultural.robot.navigation.v1.Tr"
  "ajectoryPoint\022D\n\007options\030\004 \001(\01323.agricul"
  "tural.robot.navigation.v1.TrajectoryOpti"
  "ons\022\020\n\010frame_id\030\005 \001(\t\"\241\002\n\010Waypoint\022\023\n\013wa"
  "ypoint_id\030\001 \001(\t\022B\n\004pose\030\002 \001(\01324.agricult"
  "ural.robot.navigation.v1.PoseWithCovaria"
  "nce\022<\n\004type\030\003 \001(\0162..agricultural.robot.n"
  "avigation.v1.WaypointType\022;\n\030max_duratio"
  "n_at_waypoint\030\004 \001(\0132\031.google.protobuf.Du"
  "ration\022A\n\007actions\030\005 \003(\01320.agricultural.r"
  "obot.navigation.v1.WaypointAction\"\316\001\n\017Tr"
  "ajectoryPoint\0224\n\004pose\030\001 \001(\0132&.agricultur"
  "al.robot.navigation.v1.Pose\0229\n\010velocity\030"
  "\002 \001(\0132\'.agricultural.robot.navigation.v1"
  ".Twist\0223\n\017time_from_start\030\003 \001(\0132\032.google"
  ".protobuf.Timestamp\022\025\n\raccelerations\030\004 \003"
  "(\001\"\270\002\n\021NavigationOptions\022>\n\007planner\030\001 \001("
  "\0162-.agricultural.robot.navigation.v1.Pla"
  "nnerType\022\030\n\020tolerance_linear\030\002 \001(\001\022\031\n\021to"
  "lerance_angular\030\003 \001(\001\022\036\n\026use_obstacle_av"
  "oidance\030\004 \001(\010\022\023\n\013avoid_zones\030\005 \003(\t\022F\n\010be"
  "havior\030\006 \001(\01624.agricultural.robot.naviga"
  "tion.v1.NavigationBehavior\022\034\n\024max_planni"
  "ng_time_ms\030\007 \001(\r\022\023\n\013max_retries\030\010 \001(\r\"\264\001"
  "\n\021TrajectoryOptions\022\030\n\020interpolate_path\030"
  "\001 \001(\010\022\030\n\020velocity_scaling\030\002 \001(\001\022\030\n\020check"
  "_collisions\030\003 \001(\010\022Q\n\016execution_mode\030\004 \001("
  "\01629.agricultural.robot.navigation.v1.Tra"
  "jectoryExecutionMode\"\212\002\n\016WaypointAction\022"
  "B\n\004type\030\001 \001(\01624.agricultural.robot.navig"
  "ation.v1.WaypointActionType\022+\n\010duration\030"
  "\002 \001(\0132\031.google.protobuf.Duration\022T\n\npara"
  "meters\030\003 \003(\0132@.agricultural.robot.naviga"
  "tion.v1.WaypointAction.ParametersEntry\0321"
  "\n\017ParametersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030"
  "\002 \001(\t:\0028\001\"G\n\021CancelGoalRequest\022\020\n\010robot_"
  "id\030\001 \001(\t\022\024\n\007goal_id\030\002 \001(\tH\000\210\001\001B\n\n\010_goal_"
  "id\".\n\032GetNavigationStatusRequest\022\020\n\010robo"
  "t_id\030\001 \001(\t\"G\n\035StreamNavigationStatusRequ"
  "est\022\020\n\010robot_id\030\001 \001(\t\022\024\n\014frequency_hz\030\002 "
  "\001(\r\"\272\001\n\022NavigationResponse\022\017\n\007success\030\001 "
  "\001(\010\022\017\n\007message\030\002 \001(\t\022\017\n\007goal_id\030\003 \001(\t\022B\n"
  "\006result\030\004 \001(\01622.agricultural.robot.navig"
  "ation.v1.NavigationResult\022-\n\ttimestamp\030\005"
  " \001(\0132\032.google.protobuf.Timestamp\"\366\002\n\030Nav"
  "igationStatusResponse\022B\n\006status\030\001 \001(\01622."
  "agricultural.robot.navigation.v1.Navigat"
  "ionStatus\022F\n\010progress\030\002 \001(\01324.agricultur"
  "al.robot.navigation.v1.NavigationProgres"
  "s\022K\n\014current_goal\030\003 \001(\01320.agricultural.r"
  "obot.navigation.v1.NavigationGoalH\000\210\001\001\022A"
  "\n\006errors\030\004 \003(\01321.agricultural.robot.navi"
  "gation.v1.NavigationError\022-\n\ttimestamp\030\005"
  " \001(\0132\032.google.protobuf.TimestampB\017\n\r_cur"
  "rent_goal\"\266\002\n\026NavigationStatusUpdate\022\020\n\010"
  "robot_id\030\001 \001(\t\022B\n\006status\030\002 \001(\01622.agricul"
  "tural.robot.navigation.v1.NavigationStat"
  "us\022F\n\010progress\030\003 \001(\01324.agricultural.robo"
  "t.navigation.v1.NavigationProgress\022-\n\tti"
  "mestamp\030\004 \001(\0132\032.google.protobuf.Timestam"
  "p\022E\n\005error\030\005 \001(\01321.agricultural.robot.na"
  "vigation.v1.NavigationErrorH\000\210\001\001B\010\n\006_err"
  "or\"\207\002\n\022NavigationProgress\022\032\n\022distance_re"
  "maining\030\001 \001(\001\022\031\n\021distance_traveled\030\002 \001(\001"
  "\0221\n\016time_remaining\030\003 \001(\0132\031.google.protob"
  "uf.Duration\022/\n\014time_elapsed\030\004 \001(\0132\031.goog"
  "le.protobuf.Duration\022\036\n\026current_waypoint"
  "_index\030\005 \001(\r\022\027\n\017total_waypoints\030\006 \001(\r\022\035\n"
  "\025completion_percentage\030\007 \001(\001\"\314\001\n\017Navigat"
  "ionError\022C\n\004code\030\001 \001(\01625.agricultural.ro"
  "bot.navigation.v1.NavigationErrorCode\022\023\n"
  "\013description\030\002 \001(\t\022/\n\013occurred_at\030\003 \001(\0132"
  "\032.google.protobuf.Timestamp\022\023\n\013recoverab"
  "le\030\004 \001(\010\022\031\n\021suggested_actions\030\005 \003(\t\";\n\024G"
  "etCameraInfoRequest\022\020\n\010robot_id\030\001 \001(\t\022\021\n"
  "\tcamera_id\030\002 \001(\t\"\200\001\n\022StreamVideoRequest\022"
  "\020\n\010robot_id\030\001 \001(\t\022\021\n\tcamera_id\030\002 \001(\t\022E\n\007"
  "options\030\003 \001(\01324.agricultural.robot.navig"
  "ation.v1.VideoStreamOptions\"\204\001\n\024CameraCo"
  "ntrolRequest\022\020\n\010robot_id\030\001 \001(\t\022\021\n\tcamera"
  "_id\030\002 \001(\t\022G\n\007command\030\003 \001(\01326.agricultura"
  "l.robot.navigation.v1.CameraControlComma"
  "nd\"\244\001\n\022CameraInfoResponse\022\017\n\007success\030\001 \001"
  "(\010\022\017\n\007message\030\002 \001(\t\022=\n\007cameras\030\003 \003(\0132,.a"
  "gricultural.robot.navigation.v1.CameraIn"
  "fo\022-\n\ttimestamp\030\004 \001(\0132\032.google.protobuf."
  "Timestamp\"\352\003\n\nCameraInfo\022\021\n\tcamera_id\030\001 "
  "\001(\t\022\014\n\004name\030\002 \001(\t\022:\n\004type\030\003 \001(\0162,.agricu"
  "ltural.robot.navigation.v1.CameraType\022@\n"
  "\nresolution\030\004 \001(\0132,.agricultural.robot.n"
  "avigation.v1.Resolution\022\021\n\tframerate\030\005 \001"
  "(\001\022F\n\nintrinsics\030\006 \001(\01322.agricultural.ro"
  "bot.navigation.v1.CameraIntrinsics\022F\n\ndi"
  "stortion\030\007 \001(\01322.agricultural.robot.navi"
  "gation.v1.CameraDistortion\022\020\n\010frame_id\030\010"
  " \001(\t\022>\n\006status\030\t \001(\0162..agricultural.robo"
  "t.navigation.v1.CameraStatus\022H\n\021supporte"
  "d_formats\030\n \003(\0162-.agricultural.robot.nav"
  "igation.v1.VideoFormat\"\274\002\n\nVideoFrame\022\021\n"
  "\tcamera_id\030\001 \001(\t\022\022\n\nimage_data\030\002 \001(\014\022=\n\006"
  "format\030\003 \001(\0162-.agricultural.robot.naviga"
  "tion.v1.VideoFormat\022@\n\nresolution\030\004 \001(\0132"
  ",.agricultural.robot.navigation.v1.Resol"
  "ution\022-\n\ttimestamp\030\005 \001(\0132\032.google.protob"
  "uf.Timestamp\022\024\n\014frame_number\030\006 \001(\004\022A\n\010me"
  "tadata\030\007 \001(\0132/.agricultural.robot.naviga"
  "tion.v1.FrameMetadata\"\306\002\n\022VideoStreamOpt"
  "ions\022=\n\006format\030\001 \001(\0162-.agricultural.robo"
  "t.navigation.v1.VideoFormat\022@\n\nresolutio"
  "n\030\002 \001(\0132,.agricultural.robot.navigation."
  "v1.Resolution\022\021\n\tframerate\030\003 \001(\r\022\?\n\007qual"
  "ity\030\004 \001(\0162..agricultural.robot.navigatio"
  "n.v1.VideoQuality\022\032\n\022enable_compression\030"
  "\005 \001(\010\022\?\n\010overlays\030\006 \003(\0162-.agricultural.r"
  "obot.navigation.v1.OverlayType\"\350\001\n\024Camer"
  "aControlCommand\022A\n\004type\030\001 \001(\01623.agricult"
  "ural.robot.navigation.v1.CameraControlTy"
  "pe\022Z\n\nparameters\030\002 \003(\0132F.agricultural.ro"
  "bot.navigation.v1.CameraControlCommand.P"
  "arametersEntry\0321\n\017ParametersEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"\210\002\n\025CameraCont"
  "rolResponse\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
  "\002 \001(\t\022f\n\020current_settings\030\003 \003(\0132L.agricu"
  "ltural.robot.navigation.v1.CameraControl"
  "Response.CurrentSettingsEntry\022-\n\ttimesta"
  "mp\030\004 \001(\0132\032.google.protobuf.Timestamp\0326\n\024"
  "CurrentSettingsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005val"
  "ue\030\002 \001(\001:\0028\001\"+\n\nResolution\022\r\n\005width\030\001 \001("
  "\r\022\016\n\006height\030\002 \001(\r\"\217\001\n\020CameraIntrinsics\022\026"
  "\n\016focal_length_x\030\001 \001(\001\022\026\n\016focal_length_y"
  "\030\002 \001(\001\022\031\n\021principal_point_x\030\003 \001(\001\022\031\n\021pri"
  "ncipal_point_y\030\004 \001(\001\022\025\n\rcamera_matrix\030\005 "
  "\003(\001\"j\n\020CameraDistortion\022@\n\005model\030\001 \001(\01621"
  ".agricultural.robot.navigation.v1.Distor"
  "tionModel\022\024\n\014coefficients\030\002 \003(\001\"\317\001\n\rFram"
  "eMetadata\022\025\n\rexposure_time\030\001 \001(\001\022\014\n\004gain"
  "\030\002 \001(\001\022\025\n\rwhite_balance\030\003 \001(\001\0220\n\014capture"
  "_time\030\004 \001(\0132\032.google.protobuf.Timestamp\022"
  "@\n\013camera_pose\030\005 \001(\0132&.agricultural.robo"
  "t.navigation.v1.PoseH\000\210\001\001B\016\n\014_camera_pos"
  "e\"0\n\034GetLocalizationStatusRequest\022\020\n\010rob"
  "ot_id\030\001 \001(\t\"\361\002\n\035InitializeLocalizationRe"
  "quest\022\020\n\010robot_id\030\001 \001(\t\022O\n\014initial_pose\030"
  "\002 \001(\01324.agricultural.robot.navigation.v1"
  ".PoseWithCovarianceH\000\210\001\001\022D\n\006method\030\003 \001(\016"
  "24.agricultural.robot.navigation.v1.Loca"
  "lizationMethod\022c\n\nparameters\030\004 \003(\0132O.agr"
  "icultural.robot.navigation.v1.Initialize"
  "LocalizationRequest.ParametersEntry\0321\n\017P"
  "arametersEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
  "(\t:\0028\001B\017\n\r_initial_pose\"\?\n\030ResetLocaliza"
  "tionRequest\022\020\n\010robot_id\030\001 \001(\t\022\021\n\tclear_m"
  "ap\030\002 \001(\010\"\263\003\n\032LocalizationStatusResponse\022"
  "D\n\006status\030\001 \001(\01624.agricultural.robot.nav"
  "igation.v1.LocalizationStatus\022F\n\007quality"
  "\030\002 \001(\01325.agricultural.robot.navigation.v"
  "1.LocalizationQuality\022J\n\014current_pose\030\003 "
  "\001(\01324.agricultural.robot.navigation.v1.P"
  "oseWithCovariance\022D\n\006method\030\004 \001(\01624.agri"
  "cultural.robot.navigation.v1.Localizatio"
  "nMethod\022F\n\007metrics\030\005 \001(\01325.agricultural."
  "robot.navigation.v1.LocalizationMetrics\022"
  "-\n\ttimestamp\030\006 \001(\0132\032.google.protobuf.Tim"
  "estamp\"\255\001\n\024LocalizationResponse\022\017\n\007succe"
  "ss\030\001 \001(\010\022\017\n\007message\030\002 \001(\t\022D\n\006status\030\003 \001("
  "\01624.agricultural.robot.navigation.v1.Loc"
  "alizationStatus\022-\n\ttimestamp\030\004 \001(\0132\032.goo"
  "gle.protobuf.Timestamp\"\340\001\n\023LocalizationQ"
  "uality\022\022\n\nconfidence\030\001 \001(\001\022\034\n\024position_u"
  "ncertainty\030\002 \001(\001\022\037\n\027orientation_uncertai"
  "nty\030\003 \001(\001\022\030\n\020matched_features\030\004 \001(\r\022\026\n\016d"
  "rift_estimate\030\005 \001(\001\022D\n\006health\030\006 \001(\01624.ag"
  "ricultural.robot.navigation.v1.Localizat"
  "ionHealth\"\322\001\n\023LocalizationMetrics\022\026\n\016par"
  "ticle_count\030\001 \001(\r\022\035\n\025effective_sample_si"
  "ze\030\002 \001(\001\022\030\n\020convergence_rate\030\003 \001(\001\0223\n\020up"
  "date_frequency\030\004 \001(\0132\031.google.protobuf.D"
  "uration\022\034\n\024sensor_updates_count\030\005 \001(\r\022\027\n"
  "\017map_match_score\030\006 \001(\001*\205\001\n\007MapType\022\030\n\024MA"
  "P_TYPE_UNSPECIFIED\020\000\022\033\n\027MAP_TYPE_OCCUPAN"
  "CY_GRID\020\001\022\024\n\020MAP_TYPE_COSTMAP\020\002\022\025\n\021MAP_T"
  "YPE_SEMANTIC\020\003\022\026\n\022MAP_TYPE_ELEVATION\020\004*\210"
  "\001\n\tMapSource\022\032\n\026MAP_SOURCE_UNSPECIFIED\020\000"
  "\022\023\n\017MAP_SOURCE_SLAM\020\001\022\027\n\023MAP_SOURCE_UPLO"
  "ADED\020\002\022\027\n\023MAP_SOURCE_SURVEYED\020\003\022\030\n\024MAP_S"
  "OURCE_SATELLITE\020\004*|\n\013ControlMode\022\034\n\030CONT"
  "ROL_MODE_UNSPECIFIED\020\000\022\027\n\023CONTROL_MODE_M"
  "ANUAL\020\001\022\031\n\025CONTROL_MODE_ASSISTED\020\002\022\033\n\027CO"
  "NTROL_MODE_AUTONOMOUS\020\003*\222\001\n\021EmergencySto"
  "pType\022#\n\037EMERGENCY_STOP_TYPE_UNSPECIFIED"
  "\020\000\022\034\n\030EMERGENCY_STOP_TYPE_SOFT\020\001\022\034\n\030EMER"
  "GENCY_STOP_TYPE_HARD\020\002\022\034\n\030EMERGENCY_STOP"
  "_TYPE_FULL\020\003*\357\001\n\023SafetyViolationType\022%\n!"
  "SAFETY_VIOLATION_TYPE_UNSPECIFIED\020\000\022%\n!S"
  "AFETY_VIOLATION_TYPE_SPEED_LIMIT\020\001\022\"\n\036SA"
  "FETY_VIOLATION_TYPE_OBSTACLE\020\002\022\"\n\036SAFETY"
  "_VIOLATION_TYPE_BOUNDARY\020\003\022\037\n\033SAFETY_VIO"
  "LATION_TYPE_SLOPE\020\004\022!\n\035SAFETY_VIOLATION_"
  "TYPE_BATTERY\020\005*\265\001\n\014WaypointType\022\035\n\031WAYPO"
  "INT_TYPE_UNSPECIFIED\020\000\022\036\n\032WAYPOINT_TYPE_"
  "PASS_THROUGH\020\001\022\026\n\022WAYPOINT_TYPE_STOP\020\002\022\034"
  "\n\030WAYPOINT_TYPE_INSPECTION\020\003\022\026\n\022WAYPOINT"
  "_TYPE_WORK\020\004\022\030\n\024WAYPOINT_TYPE_CHARGE\020\005*\352"
  "\001\n\022WaypointActionType\022$\n WAYPOINT_ACTION"
  "_TYPE_UNSPECIFIED\020\000\022\036\n\032WAYPOINT_ACTION_T"
  "YPE_PAUSE\020\001\022&\n\"WAYPOINT_ACTION_TYPE_CAPT"
  "URE_IMAGE\020\002\022\036\n\032WAYPOINT_ACTION_TYPE_SPRA"
  "Y\020\003\022\035\n\031WAYPOINT_ACTION_TYPE_SCAN\020\004\022\'\n#WA"
  "YPOINT_ACTION_TYPE_COLLECT_SAMPLE\020\005*\237\001\n\013"
  "PlannerType\022\034\n\030PLANNER_TYPE_UNSPECIFIED\020"
  "\000\022\027\n\023PLANNER_TYPE_A_STAR\020\001\022\024\n\020PLANNER_TY"
  "PE_RRT\020\002\022\024\n\020PLANNER_TYPE_DWA\020\003\022\024\n\020PLANNE"
  "R_TYPE_TEB\020\004\022\027\n\023PLANNER_TYPE_SPLINE\020\005*\306\001"
  "\n\022NavigationBehavior\022#\n\037NAVIGATION_BEHAV"
  "IOR_UNSPECIFIED\020\000\022\036\n\032NAVIGATION_BEHAVIOR"
  "_DIRECT\020\001\022$\n NAVIGATION_BEHAVIOR_CONSERV"
  "ATIVE\020\002\022\"\n\036NAVIGATION_BEHAVIOR_AGGRESSIV"
  "E\020\003\022!\n\035NAVIGATION_BEHAVIOR_PRECISION\020\004*\274"
  "\001\n\027TrajectoryExecutionMode\022)\n%TRAJECTORY"
  "_EXECUTION_MODE_UNSPECIFIED\020\000\022\'\n#TRAJECT"
  "ORY_EXECUTION_MODE_IMMEDIATE\020\001\022$\n TRAJEC"
  "TORY_EXECUTION_MODE_QUEUED\020\002\022\'\n#TRAJECTO"
  "RY_EXECUTION_MODE_SCHEDULED\020\003*\262\002\n\020Naviga"
  "tionStatus\022!\n\035NAVIGATION_STATUS_UNSPECIF"
  "IED\020\000\022\032\n\026NAVIGATION_STATUS_IDLE\020\001\022\036\n\032NAV"
  "IGATION_STATUS_PLANNING\020\002\022\037\n\033NAVIGATION_"
  "STATUS_EXECUTING\020\003\022\034\n\030NAVIGATION_STATUS_"
  "PAUSED\020\004\022\037\n\033NAVIGATION_STATUS_COMPLETED\020"
  "\005\022\034\n\030NAVIGATION_STATUS_FAILED\020\006\022\037\n\033NAVIG"
  "ATION_STATUS_CANCELLED\020\007\022 \n\034NAVIGATION_S"
  "TATUS_RECOVERING\020\010*\236\002\n\020NavigationResult\022"
  "!\n\035NAVIGATION_RESULT_UNSPECIFIED\020\000\022\035\n\031NA"
  "VIGATION_RESULT_SUCCESS\020\001\022\035\n\031NAVIGATION_"
  "RESULT_TIMEOUT\020\002\022\036\n\032NAVIGATION_RESULT_OB"
  "STACLE\020\003\022\"\n\036NAVIGATION_RESULT_INVALID_GO"
  "AL\020\004\022%\n!NAVIGATION_RESULT_PLANNING_FAILE"
  "D\020\005\022\037\n\033NAVIGATION_RESULT_PREEMPTED\020\006\022\035\n\031"
  "NAVIGATION_RESULT_ABORTED\020\007*\324\002\n\023Navigati"
  "onErrorCode\022%\n!NAVIGATION_ERROR_CODE_UNS"
  "PECIFIED\020\000\022!\n\035NAVIGATION_ERROR_CODE_NO_P"
  "ATH\020\001\022!\n\035NAVIGATION_ERROR_CODE_TIMEOUT\020\002"
  "\022\"\n\036NAVIGATION_ERROR_CODE_OBSTACLE\020\003\022+\n\'"
  "NAVIGATION_ERROR_CODE_LOCALIZATION_LOST\020"
  "\004\022,\n(NAVIGATION_ERROR_CODE_CONTROLLER_FA"
  "ILURE\020\005\022&\n\"NAVIGATION_ERROR_CODE_INVALID"
  "_GOAL\020\006\022)\n%NAVIGATION_ERROR_CODE_RECOVER"
  "Y_FAILED\020\007*\274\001\n\nCameraType\022\033\n\027CAMERA_TYPE"
  "_UNSPECIFIED\020\000\022\023\n\017CAMERA_TYPE_RGB\020\001\022\025\n\021C"
  "AMERA_TYPE_DEPTH\020\002\022\027\n\023CAMERA_TYPE_THERMA"
  "L\020\003\022\035\n\031CAMERA_TYPE_MULTISPECTRAL\020\004\022\026\n\022CA"
  "MERA_TYPE_STEREO\020\005\022\025\n\021CAMERA_TYPE_LIDAR\020"
  "\006*\263\001\n\013VideoFormat\022\034\n\030VIDEO_FORMAT_UNSPEC"
  "IFIED\020\000\022\026\n\022VIDEO_FORMAT_MJPEG\020\001\022\025\n\021VIDEO"
  "_FORMAT_H264\020\002\022\025\n\021VIDEO_FORMAT_H265\020\003\022\024\n"
  "\020VIDEO_FORMAT_VP8\020\004\022\024\n\020VIDEO_FORMAT_VP9\020"
  "\005\022\024\n\020VIDEO_FORMAT_RAW\020\006*\217\001\n\014VideoQuality"
  "\022\035\n\031VIDEO_QUALITY_UNSPECIFIED\020\000\022\025\n\021VIDEO"
  "_QUALITY_LOW\020\001\022\030\n\024VIDEO_QUALITY_MEDIUM\020\002"
  "\022\026\n\022VIDEO_QUALITY_HIGH\020\003\022\027\n\023VIDEO_QUALIT"
  "Y_ULTRA\020\004*\233\001\n\014CameraStatus\022\035\n\031CAMERA_STA"
  "TUS_UNSPECIFIED\020\000\022\030\n\024CAMERA_STATUS_ACTIV"
  "E\020\001\022\032\n\026CAMERA_STATUS_INACTIVE\020\002\022\027\n\023CAMER"
  "A_STATUS_ERROR\020\003\022\035\n\031CAMERA_STATUS_CALIBR"
  "ATING\020\004*\227\002\n\021CameraControlType\022#\n\037CAMERA_"
  "CONTROL_TYPE_UNSPECIFIED\020\000\022\033\n\027CAMERA_CON"
  "TROL_TYPE_PAN\020\001\022\034\n\030CAMERA_CONTROL_TYPE_T"
  "ILT\020\002\022\034\n\030CAMERA_CONTROL_TYPE_ZOOM\020\003\022\035\n\031C"
  "AMERA_CONTROL_TYPE_FOCUS\020\004\022 \n\034CAMERA_CON"
  "TROL_TYPE_EXPOSURE\020\005\022%\n!CAMERA_CONTROL_T"
  "YPE_WHITE_BALANCE\020\006\022\034\n\030CAMERA_CONTROL_TY"
  "PE_GAIN\020\007*\237\001\n\017DistortionModel\022 \n\034DISTORT"
  "ION_MODEL_UNSPECIFIED\020\000\022\036\n\032DISTORTION_MO"
  "DEL_PLUMB_BOB\020\001\022(\n$DISTORTION_MODEL_RATI"
  "ONAL_POLYNOMIAL\020\002\022 \n\034DISTORTION_MODEL_EQ"
  "UIDISTANT\020\003*\317\001\n\013OverlayType\022\034\n\030OVERLAY_T"
  "YPE_UNSPECIFIED\020\000\022\032\n\026OVERLAY_TYPE_CROSSH"
  "AIR\020\001\022\025\n\021OVERLAY_TYPE_GRID\020\002\022\025\n\021OVERLAY_"
  "TYPE_POSE\020\003\022 \n\034OVERLAY_TYPE_NAVIGATION_P"
  "ATH\020\004\022\032\n\026OVERLAY_TYPE_OBSTACLES\020\005\022\032\n\026OVE"
  "RLAY_TYPE_TIMESTAMP\020\006*\345\001\n\022LocalizationSt"
  "atus\022#\n\037LOCALIZATION_STATUS_UNSPECIFIED\020"
  "\000\022$\n LOCALIZATION_STATUS_INITIALIZING\020\001\022"
  " \n\034LOCALIZATION_STATUS_TRACKING\020\002\022\034\n\030LOC"
  "ALIZATION_STATUS_LOST\020\003\022\"\n\036LOCALIZATION_"
  "STATUS_RECOVERING\020\004\022 \n\034LOCALIZATION_STAT"
  "US_DEGRADED\020\005*\203\002\n\022LocalizationMethod\022#\n\037"
  "LOCALIZATION_METHOD_UNSPECIFIED\020\000\022\034\n\030LOC"
  "ALIZATION_METHOD_AMCL\020\001\022\033\n\027LOCALIZATION_"
  "METHOD_EKF\020\002\022\'\n#LOCALIZATION_METHOD_PART"
  "ICLE_FILTER\020\003\022#\n\037LOCALIZATION_METHOD_VIS"
  "UAL_SLAM\020\004\022\037\n\033LOCALIZATION_METHOD_GPS_RT"
  "K\020\005\022\036\n\032LOCALIZATION_METHOD_HYBRID\020\006*\265\001\n\022"
  "LocalizationHealth\022#\n\037LOCALIZATION_HEALT"
  "H_UNSPECIFIED\020\000\022\034\n\030LOCALIZATION_HEALTH_G"
  "OOD\020\001\022\034\n\030LOCALIZATION_HEALTH_FAIR\020\002\022\034\n\030L"
  "OCALIZATION_HEALTH_POOR\020\003\022 \n\034LOCALIZATIO"
  "N_HEALTH_CRITICAL\020\0042\344\024\n\026RobotNavigationS"
  "ervice\022h\n\006GetMap\022/.agricultural.robot.na"
  "vigation.v1.GetMapRequest\032-.agricultural"
  ".robot.navigation.v1.MapResponse\022h\n\006SetM"
  "ap\022/.agricultural.robot.navigation.v1.Se"
  "tMapRequest\032-.agricultural.robot.navigat"
  "ion.v1.MapResponse\022n\n\tUpdateMap\0222.agricu"
  "ltural.robot.navigation.v1.UpdateMapRequ"
  "est\032-.agricultural.robot.navigation.v1.M"
  "apResponse\022U\n\010ClearMap\0221.agricultural.ro"
  "bot.navigation.v1.ClearMapRequest\032\026.goog"
  "le.protobuf.Empty\022w\n\013GetPosition\0224.agric"
  "ultural.robot.navigation.v1.GetPositionR"
  "equest\0322.agricultural.robot.navigation.v"
  "1.PositionResponse\022w\n\013SetPosition\0224.agri"
  "cultural.robot.navigation.v1.SetPosition"
  "Request\0322.agricultural.robot.navigation."
  "v1.PositionResponse\022}\n\016StreamPosition\0227."
  "agricultural.robot.navigation.v1.StreamP"
  "ositionRequest\0320.agricultural.robot.navi"
  "gation.v1.PositionUpdate0\001\022|\n\023SendVeloci"
  "tyCommand\0221.agricultural.robot.navigatio"
  "n.v1.VelocityCommand\0322.agricultural.robo"
  "t.navigation.v1.VelocityResponse\022\203\001\n\026Str"
  "eamVelocityCommands\0221.agricultural.robot"
  ".navigation.v1.VelocityCommand\0322.agricul"
  "tural.robot.navigation.v1.VelocityRespon"
  "se(\0010\001\022y\n\014StopMovement\0225.agricultural.ro"
  "bot.navigation.v1.StopMovementRequest\0322."
  "agricultural.robot.navigation.v1.Velocit"
  "yResponse\022r\n\010SendGoal\0220.agricultural.rob"
  "ot.navigation.v1.NavigationGoal\0324.agricu"
  "ltural.robot.navigation.v1.NavigationRes"
  "ponse\022{\n\016SendTrajectory\0223.agricultural.r"
  "obot.navigation.v1.TrajectoryCommand\0324.a"
  "gricultural.robot.navigation.v1.Navigati"
  "onResponse\022w\n\nCancelGoal\0223.agricultural."
  "robot.navigation.v1.CancelGoalRequest\0324."
  "agricultural.robot.navigation.v1.Navigat"
  "ionResponse\022\217\001\n\023GetNavigationStatus\022<.ag"
  "ricultural.robot.navigation.v1.GetNaviga"
  "tionStatusRequest\032:.agricultural.robot.n"
  "avigation.v1.NavigationStatusResponse\022\225\001"
  "\n\026StreamNavigationStatus\022\?.agricultural."
  "robot.navigation.v1.StreamNavigationStat"
  "usRequest\0328.agricultural.robot.navigatio"
  "n.v1.NavigationStatusUpdate0\001\022}\n\rGetCame"
  "raInfo\0226.agricultural.robot.navigation.v"
  "1.GetCameraInfoRequest\0324.agricultural.ro"
  "bot.navigation.v1.CameraInfoResponse\022s\n\013"
  "StreamVideo\0224.agricultural.robot.navigat"
  "ion.v1.StreamVideoRequest\032,.agricultural"
  ".robot.navigation.v1.VideoFrame0\001\022\200\001\n\rCo"
  "ntrolCamera\0226.agricultural.robot.navigat"
  "ion.v1.CameraControlRequest\0327.agricultur"
  "al.robot.navigation.v1.CameraControlResp"
  "onse\022\225\001\n\025GetLocalizationStatus\022>.agricul"
  "tural.robot.navigation.v1.GetLocalizatio"
  "nStatusRequest\032<.agricultural.robot.navi"
  "gation.v1.LocalizationStatusResponse\022\221\001\n"
  "\026InitializeLocalization\022\?.agricultural.r"
  "obot.navigation.v1.InitializeLocalizatio"
  "nRequest\0326.agricultural.robot.navigation"
  ".v1.LocalizationResponse\022\207\001\n\021ResetLocali"
  "zation\022:.agricultural.robot.navigation.v"
  "1.ResetLocalizationRequest\0326.agricultura"
  "l.robot.navigation.v1.LocalizationRespon"
  "seB\235\001\n/com.valencloud.agricultural.robot"
  ".navigation.v1B\024RobotNavigationProtoP\001ZR"
  "github.com/valencloud/agricultural-platf"
  "orm/proto/robot/navigation/v1;navigation"
  "v1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto_sccs[66] = {
  &scc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraControlCommand_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraControlRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraControlResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraControlResponse_CurrentSettingsEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraInfoResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_CancelGoalRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_ClearMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_GetCameraInfoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_GetLocalizationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_GetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_GetNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_GetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_InitializeLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_InitializeLocalizationRequest_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_LocalizationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_LocalizationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_MapResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_NavigationStatusUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_PositionResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_PositionUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_ResetLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_SetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_SetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_StopMovementRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_StreamNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_StreamPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_StreamVideoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_TrajectoryCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_UpdateMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_VelocityCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_VelocityResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_VideoFrame_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
  &scc_info_WaypointAction_ParametersEntry_DoNotUse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto = {
  false, false, descriptor_table_protodef_robot_2fnavigation_2frobot_2dnavigation_2eproto, "robot/navigation/robot-navigation.proto", 19170,
  &descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto_once, descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto_sccs, descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto_deps, 66, 3,
  schemas, file_default_instances, TableStruct_robot_2fnavigation_2frobot_2dnavigation_2eproto::offsets,
  file_level_metadata_robot_2fnavigation_2frobot_2dnavigation_2eproto, 66, file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto, file_level_service_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_robot_2fnavigation_2frobot_2dnavigation_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto)), true);
namespace agricultural {
namespace robot {
namespace navigation {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[0];
}
bool MapType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[1];
}
bool MapSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[2];
}
bool ControlMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EmergencyStopType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[3];
}
bool EmergencyStopType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SafetyViolationType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[4];
}
bool SafetyViolationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaypointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[5];
}
bool WaypointType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WaypointActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[6];
}
bool WaypointActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PlannerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[7];
}
bool PlannerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationBehavior_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[8];
}
bool NavigationBehavior_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrajectoryExecutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[9];
}
bool TrajectoryExecutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[10];
}
bool NavigationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationResult_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[11];
}
bool NavigationResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NavigationErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[12];
}
bool NavigationErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[13];
}
bool CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[14];
}
bool VideoFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VideoQuality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[15];
}
bool VideoQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[16];
}
bool CameraStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[17];
}
bool CameraControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DistortionModel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[18];
}
bool DistortionModel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OverlayType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[19];
}
bool OverlayType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[20];
}
bool LocalizationStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[21];
}
bool LocalizationMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LocalizationHealth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_2fnavigation_2frobot_2dnavigation_2eproto);
  return file_level_enum_descriptors_robot_2fnavigation_2frobot_2dnavigation_2eproto[22];
}
bool LocalizationHealth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void GetMapRequest::InitAsDefaultInstance() {
}
class GetMapRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMapRequest>()._has_bits_);
  static void set_has_frame_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetMapRequest::GetMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.GetMapRequest)
}
GetMapRequest::GetMapRequest(const GetMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_frame_id()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  map_type_ = from.map_type_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.GetMapRequest)
}

void GetMapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_type_ = 0;
}

GetMapRequest::~GetMapRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.GetMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetMapRequest::ArenaDtor(void* object) {
  GetMapRequest* _this = reinterpret_cast< GetMapRequest* >(object);
  (void)_this;
}
void GetMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetMapRequest& GetMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void GetMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.GetMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    frame_id_.ClearNonDefaultToEmpty();
  }
  map_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetMapRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.MapType map_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map_type(static_cast<::agricultural::robot::navigation::v1::MapType>(val));
        } else goto handle_unusual;
        continue;
      // string frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetMapRequest.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.GetMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetMapRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.MapType map_type = 2;
  if (this->map_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_map_type(), target);
  }

  // string frame_id = 3;
  if (_internal_has_frame_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetMapRequest.frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.GetMapRequest)
  return target;
}

size_t GetMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.GetMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string frame_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .agricultural.robot.navigation.v1.MapType map_type = 2;
  if (this->map_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_map_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.GetMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.GetMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.GetMapRequest)
    MergeFrom(*source);
  }
}

void GetMapRequest::MergeFrom(const GetMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.GetMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from._internal_has_frame_id()) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.map_type() != 0) {
    _internal_set_map_type(from._internal_map_type());
  }
}

void GetMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.GetMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetMapRequest::CopyFrom(const GetMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.GetMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMapRequest::IsInitialized() const {
  return true;
}

void GetMapRequest::InternalSwap(GetMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(map_type_, other->map_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMapRequest::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_SetMapRequest_default_instance_._instance.get_mutable()->map_data_ = const_cast< ::agricultural::robot::navigation::v1::OccupancyGridMap*>(
      ::agricultural::robot::navigation::v1::OccupancyGridMap::internal_default_instance());
  ::agricultural::robot::navigation::v1::_SetMapRequest_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::agricultural::robot::navigation::v1::MapMetadata*>(
      ::agricultural::robot::navigation::v1::MapMetadata::internal_default_instance());
}
class SetMapRequest::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::OccupancyGridMap& map_data(const SetMapRequest* msg);
  static const ::agricultural::robot::navigation::v1::MapMetadata& metadata(const SetMapRequest* msg);
};

const ::agricultural::robot::navigation::v1::OccupancyGridMap&
SetMapRequest::_Internal::map_data(const SetMapRequest* msg) {
  return *msg->map_data_;
}
const ::agricultural::robot::navigation::v1::MapMetadata&
SetMapRequest::_Internal::metadata(const SetMapRequest* msg) {
  return *msg->metadata_;
}
SetMapRequest::SetMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.SetMapRequest)
}
SetMapRequest::SetMapRequest(const SetMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  if (from._internal_has_map_data()) {
    map_data_ = new ::agricultural::robot::navigation::v1::OccupancyGridMap(*from.map_data_);
  } else {
    map_data_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::agricultural::robot::navigation::v1::MapMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.SetMapRequest)
}

void SetMapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&map_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&metadata_) -
      reinterpret_cast<char*>(&map_data_)) + sizeof(metadata_));
}

SetMapRequest::~SetMapRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.SetMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_data_;
  if (this != internal_default_instance()) delete metadata_;
}

void SetMapRequest::ArenaDtor(void* object) {
  SetMapRequest* _this = reinterpret_cast< SetMapRequest* >(object);
  (void)_this;
}
void SetMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMapRequest& SetMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void SetMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.SetMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && map_data_ != nullptr) {
    delete map_data_;
  }
  map_data_ = nullptr;
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.SetMapRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.MapMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.SetMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.SetMapRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 2;
  if (this->has_map_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::map_data(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.MapMetadata metadata = 3;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.SetMapRequest)
  return target;
}

size_t SetMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.SetMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 2;
  if (this->has_map_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_data_);
  }

  // .agricultural.robot.navigation.v1.MapMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.SetMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.SetMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.SetMapRequest)
    MergeFrom(*source);
  }
}

void SetMapRequest::MergeFrom(const SetMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.SetMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.has_map_data()) {
    _internal_mutable_map_data()->::agricultural::robot::navigation::v1::OccupancyGridMap::MergeFrom(from._internal_map_data());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::agricultural::robot::navigation::v1::MapMetadata::MergeFrom(from._internal_metadata());
  }
}

void SetMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.SetMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMapRequest::CopyFrom(const SetMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.SetMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMapRequest::IsInitialized() const {
  return true;
}

void SetMapRequest::InternalSwap(SetMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetMapRequest, metadata_)
      + sizeof(SetMapRequest::metadata_)
      - PROTOBUF_FIELD_OFFSET(SetMapRequest, map_data_)>(
          reinterpret_cast<char*>(&map_data_),
          reinterpret_cast<char*>(&other->map_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateMapRequest::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_UpdateMapRequest_default_instance_._instance.get_mutable()->update_ = const_cast< ::agricultural::robot::navigation::v1::MapUpdate*>(
      ::agricultural::robot::navigation::v1::MapUpdate::internal_default_instance());
}
class UpdateMapRequest::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::MapUpdate& update(const UpdateMapRequest* msg);
};

const ::agricultural::robot::navigation::v1::MapUpdate&
UpdateMapRequest::_Internal::update(const UpdateMapRequest* msg) {
  return *msg->update_;
}
UpdateMapRequest::UpdateMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.UpdateMapRequest)
}
UpdateMapRequest::UpdateMapRequest(const UpdateMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  if (from._internal_has_update()) {
    update_ = new ::agricultural::robot::navigation::v1::MapUpdate(*from.update_);
  } else {
    update_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.UpdateMapRequest)
}

void UpdateMapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  update_ = nullptr;
}

UpdateMapRequest::~UpdateMapRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.UpdateMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_;
}

void UpdateMapRequest::ArenaDtor(void* object) {
  UpdateMapRequest* _this = reinterpret_cast< UpdateMapRequest* >(object);
  (void)_this;
}
void UpdateMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMapRequest& UpdateMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void UpdateMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.UpdateMapRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.MapUpdate update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.UpdateMapRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.MapUpdate update = 2;
  if (this->has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.UpdateMapRequest)
  return target;
}

size_t UpdateMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.MapUpdate update = 2;
  if (this->has_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.UpdateMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.UpdateMapRequest)
    MergeFrom(*source);
  }
}

void UpdateMapRequest::MergeFrom(const UpdateMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.has_update()) {
    _internal_mutable_update()->::agricultural::robot::navigation::v1::MapUpdate::MergeFrom(from._internal_update());
  }
}

void UpdateMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMapRequest::CopyFrom(const UpdateMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.UpdateMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMapRequest::IsInitialized() const {
  return true;
}

void UpdateMapRequest::InternalSwap(UpdateMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(update_, other->update_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ClearMapRequest::InitAsDefaultInstance() {
}
class ClearMapRequest::_Internal {
 public:
};

ClearMapRequest::ClearMapRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.ClearMapRequest)
}
ClearMapRequest::ClearMapRequest(const ClearMapRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  map_type_ = from.map_type_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.ClearMapRequest)
}

void ClearMapRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ClearMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  map_type_ = 0;
}

ClearMapRequest::~ClearMapRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.ClearMapRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ClearMapRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ClearMapRequest::ArenaDtor(void* object) {
  ClearMapRequest* _this = reinterpret_cast< ClearMapRequest* >(object);
  (void)_this;
}
void ClearMapRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ClearMapRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ClearMapRequest& ClearMapRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ClearMapRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void ClearMapRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.ClearMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  map_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClearMapRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.ClearMapRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.MapType map_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_map_type(static_cast<::agricultural::robot::navigation::v1::MapType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ClearMapRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.ClearMapRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.ClearMapRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.MapType map_type = 2;
  if (this->map_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_map_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.ClearMapRequest)
  return target;
}

size_t ClearMapRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.ClearMapRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.MapType map_type = 2;
  if (this->map_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_map_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClearMapRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.ClearMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ClearMapRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ClearMapRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.ClearMapRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.ClearMapRequest)
    MergeFrom(*source);
  }
}

void ClearMapRequest::MergeFrom(const ClearMapRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.ClearMapRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.map_type() != 0) {
    _internal_set_map_type(from._internal_map_type());
  }
}

void ClearMapRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.ClearMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearMapRequest::CopyFrom(const ClearMapRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.ClearMapRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearMapRequest::IsInitialized() const {
  return true;
}

void ClearMapRequest::InternalSwap(ClearMapRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(map_type_, other->map_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClearMapRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_MapResponse_default_instance_._instance.get_mutable()->map_data_ = const_cast< ::agricultural::robot::navigation::v1::OccupancyGridMap*>(
      ::agricultural::robot::navigation::v1::OccupancyGridMap::internal_default_instance());
  ::agricultural::robot::navigation::v1::_MapResponse_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::agricultural::robot::navigation::v1::MapMetadata*>(
      ::agricultural::robot::navigation::v1::MapMetadata::internal_default_instance());
  ::agricultural::robot::navigation::v1::_MapResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class MapResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<MapResponse>()._has_bits_);
  static const ::agricultural::robot::navigation::v1::OccupancyGridMap& map_data(const MapResponse* msg);
  static void set_has_map_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::agricultural::robot::navigation::v1::MapMetadata& metadata(const MapResponse* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MapResponse* msg);
};

const ::agricultural::robot::navigation::v1::OccupancyGridMap&
MapResponse::_Internal::map_data(const MapResponse* msg) {
  return *msg->map_data_;
}
const ::agricultural::robot::navigation::v1::MapMetadata&
MapResponse::_Internal::metadata(const MapResponse* msg) {
  return *msg->metadata_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MapResponse::_Internal::timestamp(const MapResponse* msg) {
  return *msg->timestamp_;
}
void MapResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
MapResponse::MapResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.MapResponse)
}
MapResponse::MapResponse(const MapResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_map_data()) {
    map_data_ = new ::agricultural::robot::navigation::v1::OccupancyGridMap(*from.map_data_);
  } else {
    map_data_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::agricultural::robot::navigation::v1::MapMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.MapResponse)
}

void MapResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&map_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&map_data_)) + sizeof(success_));
}

MapResponse::~MapResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.MapResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_data_;
  if (this != internal_default_instance()) delete metadata_;
  if (this != internal_default_instance()) delete timestamp_;
}

void MapResponse::ArenaDtor(void* object) {
  MapResponse* _this = reinterpret_cast< MapResponse* >(object);
  (void)_this;
}
void MapResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapResponse& MapResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void MapResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.MapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      if (GetArena() == nullptr && map_data_ != nullptr) {
        delete map_data_;
      }
      map_data_ = nullptr;
    }
    if (cached_has_bits & 0x00000002u) {
      if (GetArena() == nullptr && metadata_ != nullptr) {
        delete metadata_;
      }
      metadata_ = nullptr;
    }
  }
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.MapResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.MapMetadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.MapResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.MapResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 3;
  if (_internal_has_map_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::map_data(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.MapMetadata metadata = 4;
  if (_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::metadata(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.MapResponse)
  return target;
}

size_t MapResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.MapResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .agricultural.robot.navigation.v1.OccupancyGridMap map_data = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *map_data_);
    }

    // .agricultural.robot.navigation.v1.MapMetadata metadata = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

  }
  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.MapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MapResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.MapResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.MapResponse)
    MergeFrom(*source);
  }
}

void MapResponse::MergeFrom(const MapResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.MapResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_map_data()->::agricultural::robot::navigation::v1::OccupancyGridMap::MergeFrom(from._internal_map_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_metadata()->::agricultural::robot::navigation::v1::MapMetadata::MergeFrom(from._internal_metadata());
    }
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void MapResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.MapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapResponse::CopyFrom(const MapResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.MapResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapResponse::IsInitialized() const {
  return true;
}

void MapResponse::InternalSwap(MapResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapResponse, success_)
      + sizeof(MapResponse::success_)
      - PROTOBUF_FIELD_OFFSET(MapResponse, map_data_)>(
          reinterpret_cast<char*>(&map_data_),
          reinterpret_cast<char*>(&other->map_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OccupancyGridMap::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_OccupancyGridMap_default_instance_._instance.get_mutable()->info_ = const_cast< ::agricultural::robot::navigation::v1::MapMetadata*>(
      ::agricultural::robot::navigation::v1::MapMetadata::internal_default_instance());
}
class OccupancyGridMap::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::MapMetadata& info(const OccupancyGridMap* msg);
};

const ::agricultural::robot::navigation::v1::MapMetadata&
OccupancyGridMap::_Internal::info(const OccupancyGridMap* msg) {
  return *msg->info_;
}
OccupancyGridMap::OccupancyGridMap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.OccupancyGridMap)
}
OccupancyGridMap::OccupancyGridMap(const OccupancyGridMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_encoding().empty()) {
    encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_encoding(),
      GetArena());
  }
  if (from._internal_has_info()) {
    info_ = new ::agricultural::robot::navigation::v1::MapMetadata(*from.info_);
  } else {
    info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.OccupancyGridMap)
}

void OccupancyGridMap::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  info_ = nullptr;
}

OccupancyGridMap::~OccupancyGridMap() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.OccupancyGridMap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OccupancyGridMap::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  encoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete info_;
}

void OccupancyGridMap::ArenaDtor(void* object) {
  OccupancyGridMap* _this = reinterpret_cast< OccupancyGridMap* >(object);
  (void)_this;
}
void OccupancyGridMap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OccupancyGridMap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OccupancyGridMap& OccupancyGridMap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OccupancyGridMap_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void OccupancyGridMap::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  encoding_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OccupancyGridMap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.MapMetadata info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string encoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_encoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.OccupancyGridMap.encoding"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OccupancyGridMap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.MapMetadata info = 1;
  if (this->has_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::info(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // string encoding = 3;
  if (this->encoding().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.OccupancyGridMap.encoding");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_encoding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.OccupancyGridMap)
  return target;
}

size_t OccupancyGridMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string encoding = 3;
  if (this->encoding().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_encoding());
  }

  // .agricultural.robot.navigation.v1.MapMetadata info = 1;
  if (this->has_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OccupancyGridMap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  GOOGLE_DCHECK_NE(&from, this);
  const OccupancyGridMap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OccupancyGridMap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.OccupancyGridMap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.OccupancyGridMap)
    MergeFrom(*source);
  }
}

void OccupancyGridMap::MergeFrom(const OccupancyGridMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.encoding().size() > 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  if (from.has_info()) {
    _internal_mutable_info()->::agricultural::robot::navigation::v1::MapMetadata::MergeFrom(from._internal_info());
  }
}

void OccupancyGridMap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupancyGridMap::CopyFrom(const OccupancyGridMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.OccupancyGridMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyGridMap::IsInitialized() const {
  return true;
}

void OccupancyGridMap::InternalSwap(OccupancyGridMap* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  encoding_.Swap(&other->encoding_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(info_, other->info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OccupancyGridMap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapMetadata::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_MapMetadata_default_instance_._instance.get_mutable()->map_load_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::agricultural::robot::navigation::v1::_MapMetadata_default_instance_._instance.get_mutable()->origin_ = const_cast< ::agricultural::robot::navigation::v1::Pose*>(
      ::agricultural::robot::navigation::v1::Pose::internal_default_instance());
}
class MapMetadata::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& map_load_time(const MapMetadata* msg);
  static const ::agricultural::robot::navigation::v1::Pose& origin(const MapMetadata* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
MapMetadata::_Internal::map_load_time(const MapMetadata* msg) {
  return *msg->map_load_time_;
}
const ::agricultural::robot::navigation::v1::Pose&
MapMetadata::_Internal::origin(const MapMetadata* msg) {
  return *msg->origin_;
}
void MapMetadata::clear_map_load_time() {
  if (GetArena() == nullptr && map_load_time_ != nullptr) {
    delete map_load_time_;
  }
  map_load_time_ = nullptr;
}
MapMetadata::MapMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.MapMetadata)
}
MapMetadata::MapMetadata(const MapMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  if (from._internal_has_map_load_time()) {
    map_load_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.map_load_time_);
  } else {
    map_load_time_ = nullptr;
  }
  if (from._internal_has_origin()) {
    origin_ = new ::agricultural::robot::navigation::v1::Pose(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.MapMetadata)
}

void MapMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&map_load_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&map_load_time_)) + sizeof(source_));
}

MapMetadata::~MapMetadata() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.MapMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_load_time_;
  if (this != internal_default_instance()) delete origin_;
}

void MapMetadata::ArenaDtor(void* object) {
  MapMetadata* _this = reinterpret_cast< MapMetadata* >(object);
  (void)_this;
}
void MapMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapMetadata& MapMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void MapMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.MapMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && map_load_time_ != nullptr) {
    delete map_load_time_;
  }
  map_load_time_ = nullptr;
  if (GetArena() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(source_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp map_load_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_load_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Pose origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.MapMetadata.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.MapSource source = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::agricultural::robot::navigation::v1::MapSource>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.MapMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp map_load_time = 1;
  if (this->has_map_load_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::map_load_time(this), target, stream);
  }

  // float resolution = 2;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_resolution(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // .agricultural.robot.navigation.v1.Pose origin = 5;
  if (this->has_origin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::origin(this), target, stream);
  }

  // string frame_id = 6;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.MapMetadata.frame_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_frame_id(), target);
  }

  // uint32 version = 7;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_version(), target);
  }

  // .agricultural.robot.navigation.v1.MapSource source = 8;
  if (this->source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_source(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.MapMetadata)
  return target;
}

size_t MapMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.MapMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_id = 6;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .google.protobuf.Timestamp map_load_time = 1;
  if (this->has_map_load_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_load_time_);
  }

  // .agricultural.robot.navigation.v1.Pose origin = 5;
  if (this->has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // float resolution = 2;
  if (!(this->resolution() <= 0 && this->resolution() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  // uint32 version = 7;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // .agricultural.robot.navigation.v1.MapSource source = 8;
  if (this->source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.MapMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const MapMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.MapMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.MapMetadata)
    MergeFrom(*source);
  }
}

void MapMetadata::MergeFrom(const MapMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.MapMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.has_map_load_time()) {
    _internal_mutable_map_load_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_map_load_time());
  }
  if (from.has_origin()) {
    _internal_mutable_origin()->::agricultural::robot::navigation::v1::Pose::MergeFrom(from._internal_origin());
  }
  if (!(from.resolution() <= 0 && from.resolution() >= 0)) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.source() != 0) {
    _internal_set_source(from._internal_source());
  }
}

void MapMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.MapMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMetadata::CopyFrom(const MapMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.MapMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMetadata::IsInitialized() const {
  return true;
}

void MapMetadata::InternalSwap(MapMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapMetadata, source_)
      + sizeof(MapMetadata::source_)
      - PROTOBUF_FIELD_OFFSET(MapMetadata, map_load_time_)>(
          reinterpret_cast<char*>(&map_load_time_),
          reinterpret_cast<char*>(&other->map_load_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapUpdate::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_MapUpdate_default_instance_._instance.get_mutable()->update_region_ = const_cast< ::agricultural::robot::navigation::v1::Rectangle*>(
      ::agricultural::robot::navigation::v1::Rectangle::internal_default_instance());
  ::agricultural::robot::navigation::v1::_MapUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class MapUpdate::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Rectangle& update_region(const MapUpdate* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const MapUpdate* msg);
};

const ::agricultural::robot::navigation::v1::Rectangle&
MapUpdate::_Internal::update_region(const MapUpdate* msg) {
  return *msg->update_region_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MapUpdate::_Internal::timestamp(const MapUpdate* msg) {
  return *msg->timestamp_;
}
void MapUpdate::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
MapUpdate::MapUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.MapUpdate)
}
MapUpdate::MapUpdate(const MapUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  if (from._internal_has_update_region()) {
    update_region_ = new ::agricultural::robot::navigation::v1::Rectangle(*from.update_region_);
  } else {
    update_region_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.MapUpdate)
}

void MapUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&update_region_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&update_region_)) + sizeof(timestamp_));
}

MapUpdate::~MapUpdate() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.MapUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MapUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete update_region_;
  if (this != internal_default_instance()) delete timestamp_;
}

void MapUpdate::ArenaDtor(void* object) {
  MapUpdate* _this = reinterpret_cast< MapUpdate* >(object);
  (void)_this;
}
void MapUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapUpdate& MapUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void MapUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.MapUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && update_region_ != nullptr) {
    delete update_region_;
  }
  update_region_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.Rectangle update_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.MapUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Rectangle update_region = 1;
  if (this->has_update_region()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::update_region(this), target, stream);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.MapUpdate)
  return target;
}

size_t MapUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.MapUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .agricultural.robot.navigation.v1.Rectangle update_region = 1;
  if (this->has_update_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_region_);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.MapUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const MapUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.MapUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.MapUpdate)
    MergeFrom(*source);
  }
}

void MapUpdate::MergeFrom(const MapUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.MapUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.has_update_region()) {
    _internal_mutable_update_region()->::agricultural::robot::navigation::v1::Rectangle::MergeFrom(from._internal_update_region());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void MapUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.MapUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapUpdate::CopyFrom(const MapUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.MapUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapUpdate::IsInitialized() const {
  return true;
}

void MapUpdate::InternalSwap(MapUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapUpdate, timestamp_)
      + sizeof(MapUpdate::timestamp_)
      - PROTOBUF_FIELD_OFFSET(MapUpdate, update_region_)>(
          reinterpret_cast<char*>(&update_region_),
          reinterpret_cast<char*>(&other->update_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_Rectangle_default_instance_._instance.get_mutable()->min_ = const_cast< ::agricultural::robot::navigation::v1::Point2D*>(
      ::agricultural::robot::navigation::v1::Point2D::internal_default_instance());
  ::agricultural::robot::navigation::v1::_Rectangle_default_instance_._instance.get_mutable()->max_ = const_cast< ::agricultural::robot::navigation::v1::Point2D*>(
      ::agricultural::robot::navigation::v1::Point2D::internal_default_instance());
}
class Rectangle::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Point2D& min(const Rectangle* msg);
  static const ::agricultural::robot::navigation::v1::Point2D& max(const Rectangle* msg);
};

const ::agricultural::robot::navigation::v1::Point2D&
Rectangle::_Internal::min(const Rectangle* msg) {
  return *msg->min_;
}
const ::agricultural::robot::navigation::v1::Point2D&
Rectangle::_Internal::max(const Rectangle* msg) {
  return *msg->max_;
}
Rectangle::Rectangle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_min()) {
    min_ = new ::agricultural::robot::navigation::v1::Point2D(*from.min_);
  } else {
    min_ = nullptr;
  }
  if (from._internal_has_max()) {
    max_ = new ::agricultural::robot::navigation::v1::Point2D(*from.max_);
  } else {
    max_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Rectangle)
}

void Rectangle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Rectangle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rectangle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete min_;
  if (this != internal_default_instance()) delete max_;
}

void Rectangle::ArenaDtor(void* object) {
  Rectangle* _this = reinterpret_cast< Rectangle* >(object);
  (void)_this;
}
void Rectangle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rectangle& Rectangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rectangle_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && min_ != nullptr) {
    delete min_;
  }
  min_ = nullptr;
  if (GetArena() == nullptr && max_ != nullptr) {
    delete max_;
  }
  max_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.Point2D min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_min(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Point2D max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_max(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rectangle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Rectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Point2D min = 1;
  if (this->has_min()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::min(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.Point2D max = 2;
  if (this->has_max()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::max(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Rectangle)
  return target;
}

size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Rectangle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Point2D min = 1;
  if (this->has_min()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_);
  }

  // .agricultural.robot.navigation.v1.Point2D max = 2;
  if (this->has_max()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rectangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Rectangle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_min()) {
    _internal_mutable_min()->::agricultural::robot::navigation::v1::Point2D::MergeFrom(from._internal_min());
  }
  if (from.has_max()) {
    _internal_mutable_max()->::agricultural::robot::navigation::v1::Point2D::MergeFrom(from._internal_max());
  }
}

void Rectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  return true;
}

void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rectangle, max_)
      + sizeof(Rectangle::max_)
      - PROTOBUF_FIELD_OFFSET(Rectangle, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rectangle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPositionRequest::InitAsDefaultInstance() {
}
class GetPositionRequest::_Internal {
 public:
};

GetPositionRequest::GetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.GetPositionRequest)
}
GetPositionRequest::GetPositionRequest(const GetPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.GetPositionRequest)
}

void GetPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPositionRequest::~GetPositionRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.GetPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPositionRequest::ArenaDtor(void* object) {
  GetPositionRequest* _this = reinterpret_cast< GetPositionRequest* >(object);
  (void)_this;
}
void GetPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPositionRequest& GetPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void GetPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.GetPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetPositionRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetPositionRequest.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.GetPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetPositionRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string frame_id = 2;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetPositionRequest.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.GetPositionRequest)
  return target;
}

size_t GetPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.GetPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string frame_id = 2;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.GetPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.GetPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.GetPositionRequest)
    MergeFrom(*source);
  }
}

void GetPositionRequest::MergeFrom(const GetPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.GetPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
}

void GetPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.GetPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPositionRequest::CopyFrom(const GetPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.GetPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPositionRequest::IsInitialized() const {
  return true;
}

void GetPositionRequest::InternalSwap(GetPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetPositionRequest::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_SetPositionRequest_default_instance_._instance.get_mutable()->pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
}
class SetPositionRequest::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose(const SetPositionRequest* msg);
};

const ::agricultural::robot::navigation::v1::PoseWithCovariance&
SetPositionRequest::_Internal::pose(const SetPositionRequest* msg) {
  return *msg->pose_;
}
SetPositionRequest::SetPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.SetPositionRequest)
}
SetPositionRequest::SetPositionRequest(const SetPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.SetPositionRequest)
}

void SetPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pose_ = nullptr;
}

SetPositionRequest::~SetPositionRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.SetPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
}

void SetPositionRequest::ArenaDtor(void* object) {
  SetPositionRequest* _this = reinterpret_cast< SetPositionRequest* >(object);
  (void)_this;
}
void SetPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetPositionRequest& SetPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void SetPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.SetPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.SetPositionRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.SetPositionRequest.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.SetPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.SetPositionRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // string frame_id = 3;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.SetPositionRequest.frame_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.SetPositionRequest)
  return target;
}

size_t SetPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.SetPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string frame_id = 3;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.SetPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.SetPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.SetPositionRequest)
    MergeFrom(*source);
  }
}

void SetPositionRequest::MergeFrom(const SetPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.SetPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_pose());
  }
}

void SetPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.SetPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetPositionRequest::CopyFrom(const SetPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.SetPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPositionRequest::IsInitialized() const {
  return true;
}

void SetPositionRequest::InternalSwap(SetPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamPositionRequest::InitAsDefaultInstance() {
}
class StreamPositionRequest::_Internal {
 public:
};

StreamPositionRequest::StreamPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.StreamPositionRequest)
}
StreamPositionRequest::StreamPositionRequest(const StreamPositionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  frequency_hz_ = from.frequency_hz_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.StreamPositionRequest)
}

void StreamPositionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frequency_hz_ = 0u;
}

StreamPositionRequest::~StreamPositionRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.StreamPositionRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamPositionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamPositionRequest::ArenaDtor(void* object) {
  StreamPositionRequest* _this = reinterpret_cast< StreamPositionRequest* >(object);
  (void)_this;
}
void StreamPositionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamPositionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamPositionRequest& StreamPositionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamPositionRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void StreamPositionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frequency_hz_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamPositionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.StreamPositionRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.StreamPositionRequest.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frequency_hz = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamPositionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.StreamPositionRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string frame_id = 2;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.StreamPositionRequest.frame_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_frame_id(), target);
  }

  // uint32 frequency_hz = 3;
  if (this->frequency_hz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_frequency_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.StreamPositionRequest)
  return target;
}

size_t StreamPositionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string frame_id = 2;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // uint32 frequency_hz = 3;
  if (this->frequency_hz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_hz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamPositionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamPositionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamPositionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.StreamPositionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.StreamPositionRequest)
    MergeFrom(*source);
  }
}

void StreamPositionRequest::MergeFrom(const StreamPositionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.frequency_hz() != 0) {
    _internal_set_frequency_hz(from._internal_frequency_hz());
  }
}

void StreamPositionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamPositionRequest::CopyFrom(const StreamPositionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.StreamPositionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamPositionRequest::IsInitialized() const {
  return true;
}

void StreamPositionRequest::InternalSwap(StreamPositionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(frequency_hz_, other->frequency_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamPositionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_PositionResponse_default_instance_._instance.get_mutable()->pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
  ::agricultural::robot::navigation::v1::_PositionResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PositionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<PositionResponse>()._has_bits_);
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose(const PositionResponse* msg);
  static void set_has_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const PositionResponse* msg);
};

const ::agricultural::robot::navigation::v1::PoseWithCovariance&
PositionResponse::_Internal::pose(const PositionResponse* msg) {
  return *msg->pose_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PositionResponse::_Internal::timestamp(const PositionResponse* msg) {
  return *msg->timestamp_;
}
void PositionResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
PositionResponse::PositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.PositionResponse)
}
PositionResponse::PositionResponse(const PositionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.PositionResponse)
}

void PositionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(success_));
}

PositionResponse::~PositionResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.PositionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete timestamp_;
}

void PositionResponse::ArenaDtor(void* object) {
  PositionResponse* _this = reinterpret_cast< PositionResponse* >(object);
  (void)_this;
}
void PositionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionResponse& PositionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void PositionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.PositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && pose_ != nullptr) {
      delete pose_;
    }
    pose_ = nullptr;
  }
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.PositionResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.PositionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.PositionResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 3;
  if (_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::pose(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.PositionResponse)
  return target;
}

size_t PositionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.PositionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.PositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.PositionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.PositionResponse)
    MergeFrom(*source);
  }
}

void PositionResponse::MergeFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.PositionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_pose());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void PositionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionResponse::CopyFrom(const PositionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.PositionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionResponse::IsInitialized() const {
  return true;
}

void PositionResponse::InternalSwap(PositionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionResponse, success_)
      + sizeof(PositionResponse::success_)
      - PROTOBUF_FIELD_OFFSET(PositionResponse, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PositionUpdate::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_PositionUpdate_default_instance_._instance.get_mutable()->pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
  ::agricultural::robot::navigation::v1::_PositionUpdate_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::agricultural::robot::navigation::v1::Twist*>(
      ::agricultural::robot::navigation::v1::Twist::internal_default_instance());
  ::agricultural::robot::navigation::v1::_PositionUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::agricultural::robot::navigation::v1::_PositionUpdate_default_instance_._instance.get_mutable()->quality_ = const_cast< ::agricultural::robot::navigation::v1::LocalizationQuality*>(
      ::agricultural::robot::navigation::v1::LocalizationQuality::internal_default_instance());
}
class PositionUpdate::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose(const PositionUpdate* msg);
  static const ::agricultural::robot::navigation::v1::Twist& velocity(const PositionUpdate* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const PositionUpdate* msg);
  static const ::agricultural::robot::navigation::v1::LocalizationQuality& quality(const PositionUpdate* msg);
};

const ::agricultural::robot::navigation::v1::PoseWithCovariance&
PositionUpdate::_Internal::pose(const PositionUpdate* msg) {
  return *msg->pose_;
}
const ::agricultural::robot::navigation::v1::Twist&
PositionUpdate::_Internal::velocity(const PositionUpdate* msg) {
  return *msg->velocity_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
PositionUpdate::_Internal::timestamp(const PositionUpdate* msg) {
  return *msg->timestamp_;
}
const ::agricultural::robot::navigation::v1::LocalizationQuality&
PositionUpdate::_Internal::quality(const PositionUpdate* msg) {
  return *msg->quality_;
}
void PositionUpdate::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
PositionUpdate::PositionUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.PositionUpdate)
}
PositionUpdate::PositionUpdate(const PositionUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::agricultural::robot::navigation::v1::Twist(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_quality()) {
    quality_ = new ::agricultural::robot::navigation::v1::LocalizationQuality(*from.quality_);
  } else {
    quality_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.PositionUpdate)
}

void PositionUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PositionUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(quality_));
}

PositionUpdate::~PositionUpdate() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.PositionUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PositionUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete quality_;
}

void PositionUpdate::ArenaDtor(void* object) {
  PositionUpdate* _this = reinterpret_cast< PositionUpdate* >(object);
  (void)_this;
}
void PositionUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PositionUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PositionUpdate& PositionUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PositionUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void PositionUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.PositionUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && quality_ != nullptr) {
    delete quality_;
  }
  quality_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PositionUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.PositionUpdate.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Twist velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.PositionUpdate.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationQuality quality = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PositionUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.PositionUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.PositionUpdate.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.Twist velocity = 3;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.PositionUpdate.frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_id(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.LocalizationQuality quality = 6;
  if (this->has_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::quality(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.PositionUpdate)
  return target;
}

size_t PositionUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.PositionUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .agricultural.robot.navigation.v1.Twist velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .agricultural.robot.navigation.v1.LocalizationQuality quality = 6;
  if (this->has_quality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PositionUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PositionUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PositionUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.PositionUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.PositionUpdate)
    MergeFrom(*source);
  }
}

void PositionUpdate::MergeFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.PositionUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_pose());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::agricultural::robot::navigation::v1::Twist::MergeFrom(from._internal_velocity());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_quality()) {
    _internal_mutable_quality()->::agricultural::robot::navigation::v1::LocalizationQuality::MergeFrom(from._internal_quality());
  }
}

void PositionUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PositionUpdate::CopyFrom(const PositionUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.PositionUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PositionUpdate::IsInitialized() const {
  return true;
}

void PositionUpdate::InternalSwap(PositionUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PositionUpdate, quality_)
      + sizeof(PositionUpdate::quality_)
      - PROTOBUF_FIELD_OFFSET(PositionUpdate, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PositionUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Pose::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_Pose_default_instance_._instance.get_mutable()->position_ = const_cast< ::agricultural::robot::navigation::v1::Point3D*>(
      ::agricultural::robot::navigation::v1::Point3D::internal_default_instance());
  ::agricultural::robot::navigation::v1::_Pose_default_instance_._instance.get_mutable()->orientation_ = const_cast< ::agricultural::robot::navigation::v1::Quaternion*>(
      ::agricultural::robot::navigation::v1::Quaternion::internal_default_instance());
}
class Pose::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Point3D& position(const Pose* msg);
  static const ::agricultural::robot::navigation::v1::Quaternion& orientation(const Pose* msg);
};

const ::agricultural::robot::navigation::v1::Point3D&
Pose::_Internal::position(const Pose* msg) {
  return *msg->position_;
}
const ::agricultural::robot::navigation::v1::Quaternion&
Pose::_Internal::orientation(const Pose* msg) {
  return *msg->orientation_;
}
Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::agricultural::robot::navigation::v1::Point3D(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::agricultural::robot::navigation::v1::Quaternion(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Pose)
}

void Pose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orientation_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orientation_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orientation_;
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose& Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.Point3D position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Quaternion orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Point3D position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::orientation(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Point3D position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .agricultural.robot.navigation.v1.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::agricultural::robot::navigation::v1::Point3D::MergeFrom(from._internal_position());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::agricultural::robot::navigation::v1::Quaternion::MergeFrom(from._internal_orientation());
  }
}

void Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, orientation_)
      + sizeof(Pose::orientation_)
      - PROTOBUF_FIELD_OFFSET(Pose, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PoseWithCovariance::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_PoseWithCovariance_default_instance_._instance.get_mutable()->pose_ = const_cast< ::agricultural::robot::navigation::v1::Pose*>(
      ::agricultural::robot::navigation::v1::Pose::internal_default_instance());
}
class PoseWithCovariance::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Pose& pose(const PoseWithCovariance* msg);
};

const ::agricultural::robot::navigation::v1::Pose&
PoseWithCovariance::_Internal::pose(const PoseWithCovariance* msg) {
  return *msg->pose_;
}
PoseWithCovariance::PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  covariance_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.PoseWithCovariance)
}
PoseWithCovariance::PoseWithCovariance(const PoseWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::agricultural::robot::navigation::v1::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.PoseWithCovariance)
}

void PoseWithCovariance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  pose_ = nullptr;
}

PoseWithCovariance::~PoseWithCovariance() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.PoseWithCovariance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PoseWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void PoseWithCovariance::ArenaDtor(void* object) {
  PoseWithCovariance* _this = reinterpret_cast< PoseWithCovariance* >(object);
  (void)_this;
}
void PoseWithCovariance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PoseWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PoseWithCovariance& PoseWithCovariance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PoseWithCovariance_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void PoseWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithCovariance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double covariance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PoseWithCovariance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Pose pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // repeated double covariance = 2;
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.PoseWithCovariance)
  return target;
}

size_t PoseWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _covariance_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agricultural.robot.navigation.v1.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PoseWithCovariance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  const PoseWithCovariance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PoseWithCovariance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.PoseWithCovariance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.PoseWithCovariance)
    MergeFrom(*source);
  }
}

void PoseWithCovariance::MergeFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from.has_pose()) {
    _internal_mutable_pose()->::agricultural::robot::navigation::v1::Pose::MergeFrom(from._internal_pose());
  }
}

void PoseWithCovariance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PoseWithCovariance::CopyFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithCovariance::IsInitialized() const {
  return true;
}

void PoseWithCovariance::InternalSwap(PoseWithCovariance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithCovariance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point2D::InitAsDefaultInstance() {
}
class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Point2D)
}

void Point2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Point2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point2D::ArenaDtor(void* object) {
  Point2D* _this = reinterpret_cast< Point2D* >(object);
  (void)_this;
}
void Point2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point2D& Point2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point2D_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Point2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Point2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Point2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Point2D)
    MergeFrom(*source);
  }
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, y_)
      + sizeof(Point2D::y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point3D::InitAsDefaultInstance() {
}
class Point3D::_Internal {
 public:
};

Point3D::Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Point3D)
}

void Point3D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Point3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point3D::ArenaDtor(void* object) {
  Point3D* _this = reinterpret_cast< Point3D* >(object);
  (void)_this;
}
void Point3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point3D& Point3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point3D_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Point3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Point3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Point3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Point3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Point3D)
    MergeFrom(*source);
  }
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Point3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, z_)
      + sizeof(Point3D::z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
class Quaternion::_Internal {
 public:
};

Quaternion::Quaternion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Quaternion)
}

void Quaternion::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Quaternion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Quaternion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Quaternion::ArenaDtor(void* object) {
  Quaternion* _this = reinterpret_cast< Quaternion* >(object);
  (void)_this;
}
void Quaternion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Quaternion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Quaternion& Quaternion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Quaternion_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quaternion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Quaternion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Quaternion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Quaternion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  // double w = 4;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Quaternion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Quaternion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Quaternion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Quaternion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quaternion, w_)
      + sizeof(Quaternion::w_)
      - PROTOBUF_FIELD_OFFSET(Quaternion, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quaternion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Twist::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_Twist_default_instance_._instance.get_mutable()->linear_ = const_cast< ::agricultural::robot::navigation::v1::Vector3*>(
      ::agricultural::robot::navigation::v1::Vector3::internal_default_instance());
  ::agricultural::robot::navigation::v1::_Twist_default_instance_._instance.get_mutable()->angular_ = const_cast< ::agricultural::robot::navigation::v1::Vector3*>(
      ::agricultural::robot::navigation::v1::Vector3::internal_default_instance());
}
class Twist::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Vector3& linear(const Twist* msg);
  static const ::agricultural::robot::navigation::v1::Vector3& angular(const Twist* msg);
};

const ::agricultural::robot::navigation::v1::Vector3&
Twist::_Internal::linear(const Twist* msg) {
  return *msg->linear_;
}
const ::agricultural::robot::navigation::v1::Vector3&
Twist::_Internal::angular(const Twist* msg) {
  return *msg->angular_;
}
Twist::Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Twist)
}
Twist::Twist(const Twist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_linear()) {
    linear_ = new ::agricultural::robot::navigation::v1::Vector3(*from.linear_);
  } else {
    linear_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::agricultural::robot::navigation::v1::Vector3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Twist)
}

void Twist::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&linear_)) + sizeof(angular_));
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Twist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Twist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete linear_;
  if (this != internal_default_instance()) delete angular_;
}

void Twist::ArenaDtor(void* object) {
  Twist* _this = reinterpret_cast< Twist* >(object);
  (void)_this;
}
void Twist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Twist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Twist& Twist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Twist_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && linear_ != nullptr) {
    delete linear_;
  }
  linear_ = nullptr;
  if (GetArena() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.Vector3 linear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Vector3 angular = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Twist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Vector3 linear = 1;
  if (this->has_linear()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::linear(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.Vector3 angular = 2;
  if (this->has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::angular(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Twist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Vector3 linear = 1;
  if (this->has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *linear_);
  }

  // .agricultural.robot.navigation.v1.Vector3 angular = 2;
  if (this->has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Twist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  const Twist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Twist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Twist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_linear()) {
    _internal_mutable_linear()->::agricultural::robot::navigation::v1::Vector3::MergeFrom(from._internal_linear());
  }
  if (from.has_angular()) {
    _internal_mutable_angular()->::agricultural::robot::navigation::v1::Vector3::MergeFrom(from._internal_angular());
  }
}

void Twist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::InternalSwap(Twist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twist, angular_)
      + sizeof(Twist::angular_)
      - PROTOBUF_FIELD_OFFSET(Twist, linear_)>(
          reinterpret_cast<char*>(&linear_),
          reinterpret_cast<char*>(&other->linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Vector3)
}

void Vector3::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3& Vector3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityCommand::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_VelocityCommand_default_instance_._instance.get_mutable()->cmd_vel_ = const_cast< ::agricultural::robot::navigation::v1::Twist*>(
      ::agricultural::robot::navigation::v1::Twist::internal_default_instance());
  ::agricultural::robot::navigation::v1::_VelocityCommand_default_instance_._instance.get_mutable()->timeout_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::agricultural::robot::navigation::v1::_VelocityCommand_default_instance_._instance.get_mutable()->joystick_input_ = const_cast< ::agricultural::robot::navigation::v1::JoystickInput*>(
      ::agricultural::robot::navigation::v1::JoystickInput::internal_default_instance());
  ::agricultural::robot::navigation::v1::_VelocityCommand_default_instance_._instance.get_mutable()->safety_ = const_cast< ::agricultural::robot::navigation::v1::SafetyConstraints*>(
      ::agricultural::robot::navigation::v1::SafetyConstraints::internal_default_instance());
}
class VelocityCommand::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Twist& cmd_vel(const VelocityCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& timeout(const VelocityCommand* msg);
  static const ::agricultural::robot::navigation::v1::JoystickInput& joystick_input(const VelocityCommand* msg);
  static const ::agricultural::robot::navigation::v1::SafetyConstraints& safety(const VelocityCommand* msg);
};

const ::agricultural::robot::navigation::v1::Twist&
VelocityCommand::_Internal::cmd_vel(const VelocityCommand* msg) {
  return *msg->cmd_vel_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
VelocityCommand::_Internal::timeout(const VelocityCommand* msg) {
  return *msg->timeout_;
}
const ::agricultural::robot::navigation::v1::JoystickInput&
VelocityCommand::_Internal::joystick_input(const VelocityCommand* msg) {
  return *msg->joystick_input_;
}
const ::agricultural::robot::navigation::v1::SafetyConstraints&
VelocityCommand::_Internal::safety(const VelocityCommand* msg) {
  return *msg->safety_;
}
void VelocityCommand::clear_timeout() {
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
VelocityCommand::VelocityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.VelocityCommand)
}
VelocityCommand::VelocityCommand(const VelocityCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  if (from._internal_has_cmd_vel()) {
    cmd_vel_ = new ::agricultural::robot::navigation::v1::Twist(*from.cmd_vel_);
  } else {
    cmd_vel_ = nullptr;
  }
  if (from._internal_has_timeout()) {
    timeout_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  if (from._internal_has_joystick_input()) {
    joystick_input_ = new ::agricultural::robot::navigation::v1::JoystickInput(*from.joystick_input_);
  } else {
    joystick_input_ = nullptr;
  }
  if (from._internal_has_safety()) {
    safety_ = new ::agricultural::robot::navigation::v1::SafetyConstraints(*from.safety_);
  } else {
    safety_ = nullptr;
  }
  control_mode_ = from.control_mode_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.VelocityCommand)
}

void VelocityCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VelocityCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cmd_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_mode_) -
      reinterpret_cast<char*>(&cmd_vel_)) + sizeof(control_mode_));
}

VelocityCommand::~VelocityCommand() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.VelocityCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cmd_vel_;
  if (this != internal_default_instance()) delete timeout_;
  if (this != internal_default_instance()) delete joystick_input_;
  if (this != internal_default_instance()) delete safety_;
}

void VelocityCommand::ArenaDtor(void* object) {
  VelocityCommand* _this = reinterpret_cast< VelocityCommand* >(object);
  (void)_this;
}
void VelocityCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityCommand& VelocityCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void VelocityCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.VelocityCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cmd_vel_ != nullptr) {
    delete cmd_vel_;
  }
  cmd_vel_ = nullptr;
  if (GetArena() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  if (GetArena() == nullptr && joystick_input_ != nullptr) {
    delete joystick_input_;
  }
  joystick_input_ = nullptr;
  if (GetArena() == nullptr && safety_ != nullptr) {
    delete safety_;
  }
  safety_ = nullptr;
  control_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.VelocityCommand.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Twist cmd_vel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.JoystickInput joystick_input = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_joystick_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.SafetyConstraints safety = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_safety(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.ControlMode control_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::agricultural::robot::navigation::v1::ControlMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.VelocityCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.VelocityCommand.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.Twist cmd_vel = 2;
  if (this->has_cmd_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cmd_vel(this), target, stream);
  }

  // .google.protobuf.Duration timeout = 3;
  if (this->has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timeout(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.JoystickInput joystick_input = 4;
  if (this->has_joystick_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::joystick_input(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.SafetyConstraints safety = 5;
  if (this->has_safety()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::safety(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.ControlMode control_mode = 6;
  if (this->control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_control_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.VelocityCommand)
  return target;
}

size_t VelocityCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.VelocityCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.Twist cmd_vel = 2;
  if (this->has_cmd_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmd_vel_);
  }

  // .google.protobuf.Duration timeout = 3;
  if (this->has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // .agricultural.robot.navigation.v1.JoystickInput joystick_input = 4;
  if (this->has_joystick_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *joystick_input_);
  }

  // .agricultural.robot.navigation.v1.SafetyConstraints safety = 5;
  if (this->has_safety()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *safety_);
  }

  // .agricultural.robot.navigation.v1.ControlMode control_mode = 6;
  if (this->control_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.VelocityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.VelocityCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.VelocityCommand)
    MergeFrom(*source);
  }
}

void VelocityCommand::MergeFrom(const VelocityCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.VelocityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.has_cmd_vel()) {
    _internal_mutable_cmd_vel()->::agricultural::robot::navigation::v1::Twist::MergeFrom(from._internal_cmd_vel());
  }
  if (from.has_timeout()) {
    _internal_mutable_timeout()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout());
  }
  if (from.has_joystick_input()) {
    _internal_mutable_joystick_input()->::agricultural::robot::navigation::v1::JoystickInput::MergeFrom(from._internal_joystick_input());
  }
  if (from.has_safety()) {
    _internal_mutable_safety()->::agricultural::robot::navigation::v1::SafetyConstraints::MergeFrom(from._internal_safety());
  }
  if (from.control_mode() != 0) {
    _internal_set_control_mode(from._internal_control_mode());
  }
}

void VelocityCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.VelocityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityCommand::CopyFrom(const VelocityCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.VelocityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityCommand::IsInitialized() const {
  return true;
}

void VelocityCommand::InternalSwap(VelocityCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityCommand, control_mode_)
      + sizeof(VelocityCommand::control_mode_)
      - PROTOBUF_FIELD_OFFSET(VelocityCommand, cmd_vel_)>(
          reinterpret_cast<char*>(&cmd_vel_),
          reinterpret_cast<char*>(&other->cmd_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JoystickInput::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_JoystickInput_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class JoystickInput::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const JoystickInput* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
JoystickInput::_Internal::timestamp(const JoystickInput* msg) {
  return *msg->timestamp_;
}
void JoystickInput::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
JoystickInput::JoystickInput(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  axes_(arena),
  buttons_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.JoystickInput)
}
JoystickInput::JoystickInput(const JoystickInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      axes_(from.axes_),
      buttons_(from.buttons_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  controller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_controller_id().empty()) {
    controller_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_controller_id(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.JoystickInput)
}

void JoystickInput::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  controller_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
}

JoystickInput::~JoystickInput() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.JoystickInput)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void JoystickInput::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  controller_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void JoystickInput::ArenaDtor(void* object) {
  JoystickInput* _this = reinterpret_cast< JoystickInput* >(object);
  (void)_this;
}
void JoystickInput::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void JoystickInput::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JoystickInput& JoystickInput::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JoystickInput_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void JoystickInput::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.JoystickInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  axes_.Clear();
  buttons_.Clear();
  controller_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JoystickInput::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated float axes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_axes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13) {
          _internal_add_axes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated bool buttons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_buttons(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_buttons(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string controller_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_controller_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.JoystickInput.controller_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JoystickInput::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.JoystickInput)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float axes = 1;
  if (this->_internal_axes_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_axes(), target);
  }

  // repeated bool buttons = 2;
  if (this->_internal_buttons_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_buttons(), target);
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::timestamp(this), target, stream);
  }

  // string controller_id = 4;
  if (this->controller_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_controller_id().data(), static_cast<int>(this->_internal_controller_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.JoystickInput.controller_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_controller_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.JoystickInput)
  return target;
}

size_t JoystickInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.JoystickInput)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float axes = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_axes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _axes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated bool buttons = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_buttons_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _buttons_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string controller_id = 4;
  if (this->controller_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_controller_id());
  }

  // .google.protobuf.Timestamp timestamp = 3;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JoystickInput::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.JoystickInput)
  GOOGLE_DCHECK_NE(&from, this);
  const JoystickInput* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JoystickInput>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.JoystickInput)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.JoystickInput)
    MergeFrom(*source);
  }
}

void JoystickInput::MergeFrom(const JoystickInput& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.JoystickInput)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  axes_.MergeFrom(from.axes_);
  buttons_.MergeFrom(from.buttons_);
  if (from.controller_id().size() > 0) {
    _internal_set_controller_id(from._internal_controller_id());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
}

void JoystickInput::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.JoystickInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoystickInput::CopyFrom(const JoystickInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.JoystickInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoystickInput::IsInitialized() const {
  return true;
}

void JoystickInput::InternalSwap(JoystickInput* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  axes_.InternalSwap(&other->axes_);
  buttons_.InternalSwap(&other->buttons_);
  controller_id_.Swap(&other->controller_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(timestamp_, other->timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JoystickInput::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VelocityResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_VelocityResponse_default_instance_._instance.get_mutable()->actual_velocity_ = const_cast< ::agricultural::robot::navigation::v1::Twist*>(
      ::agricultural::robot::navigation::v1::Twist::internal_default_instance());
  ::agricultural::robot::navigation::v1::_VelocityResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class VelocityResponse::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Twist& actual_velocity(const VelocityResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const VelocityResponse* msg);
};

const ::agricultural::robot::navigation::v1::Twist&
VelocityResponse::_Internal::actual_velocity(const VelocityResponse* msg) {
  return *msg->actual_velocity_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
VelocityResponse::_Internal::timestamp(const VelocityResponse* msg) {
  return *msg->timestamp_;
}
void VelocityResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
VelocityResponse::VelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  safety_violations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.VelocityResponse)
}
VelocityResponse::VelocityResponse(const VelocityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      safety_violations_(from.safety_violations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_actual_velocity()) {
    actual_velocity_ = new ::agricultural::robot::navigation::v1::Twist(*from.actual_velocity_);
  } else {
    actual_velocity_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.VelocityResponse)
}

void VelocityResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VelocityResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&actual_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&actual_velocity_)) + sizeof(success_));
}

VelocityResponse::~VelocityResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.VelocityResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VelocityResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete actual_velocity_;
  if (this != internal_default_instance()) delete timestamp_;
}

void VelocityResponse::ArenaDtor(void* object) {
  VelocityResponse* _this = reinterpret_cast< VelocityResponse* >(object);
  (void)_this;
}
void VelocityResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VelocityResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VelocityResponse& VelocityResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VelocityResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void VelocityResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.VelocityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  safety_violations_.Clear();
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && actual_velocity_ != nullptr) {
    delete actual_velocity_;
  }
  actual_velocity_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VelocityResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.VelocityResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Twist actual_velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_actual_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.SafetyViolation safety_violations = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_safety_violations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VelocityResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.VelocityResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.VelocityResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .agricultural.robot.navigation.v1.Twist actual_velocity = 3;
  if (this->has_actual_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::actual_velocity(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  // repeated .agricultural.robot.navigation.v1.SafetyViolation safety_violations = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_safety_violations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_safety_violations(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.VelocityResponse)
  return target;
}

size_t VelocityResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.VelocityResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.SafetyViolation safety_violations = 5;
  total_size += 1UL * this->_internal_safety_violations_size();
  for (const auto& msg : this->safety_violations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .agricultural.robot.navigation.v1.Twist actual_velocity = 3;
  if (this->has_actual_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *actual_velocity_);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VelocityResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.VelocityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VelocityResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VelocityResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.VelocityResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.VelocityResponse)
    MergeFrom(*source);
  }
}

void VelocityResponse::MergeFrom(const VelocityResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.VelocityResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  safety_violations_.MergeFrom(from.safety_violations_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_actual_velocity()) {
    _internal_mutable_actual_velocity()->::agricultural::robot::navigation::v1::Twist::MergeFrom(from._internal_actual_velocity());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void VelocityResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.VelocityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VelocityResponse::CopyFrom(const VelocityResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.VelocityResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VelocityResponse::IsInitialized() const {
  return true;
}

void VelocityResponse::InternalSwap(VelocityResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  safety_violations_.InternalSwap(&other->safety_violations_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VelocityResponse, success_)
      + sizeof(VelocityResponse::success_)
      - PROTOBUF_FIELD_OFFSET(VelocityResponse, actual_velocity_)>(
          reinterpret_cast<char*>(&actual_velocity_),
          reinterpret_cast<char*>(&other->actual_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VelocityResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopMovementRequest::InitAsDefaultInstance() {
}
class StopMovementRequest::_Internal {
 public:
};

StopMovementRequest::StopMovementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.StopMovementRequest)
}
StopMovementRequest::StopMovementRequest(const StopMovementRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  stop_type_ = from.stop_type_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.StopMovementRequest)
}

void StopMovementRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopMovementRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stop_type_ = 0;
}

StopMovementRequest::~StopMovementRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.StopMovementRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopMovementRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopMovementRequest::ArenaDtor(void* object) {
  StopMovementRequest* _this = reinterpret_cast< StopMovementRequest* >(object);
  (void)_this;
}
void StopMovementRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopMovementRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopMovementRequest& StopMovementRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopMovementRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void StopMovementRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.StopMovementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  stop_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopMovementRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.StopMovementRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.EmergencyStopType stop_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_stop_type(static_cast<::agricultural::robot::navigation::v1::EmergencyStopType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopMovementRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.StopMovementRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.StopMovementRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.EmergencyStopType stop_type = 2;
  if (this->stop_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_stop_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.StopMovementRequest)
  return target;
}

size_t StopMovementRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.StopMovementRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.EmergencyStopType stop_type = 2;
  if (this->stop_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_stop_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopMovementRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.StopMovementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopMovementRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopMovementRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.StopMovementRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.StopMovementRequest)
    MergeFrom(*source);
  }
}

void StopMovementRequest::MergeFrom(const StopMovementRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.StopMovementRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.stop_type() != 0) {
    _internal_set_stop_type(from._internal_stop_type());
  }
}

void StopMovementRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.StopMovementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopMovementRequest::CopyFrom(const StopMovementRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.StopMovementRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopMovementRequest::IsInitialized() const {
  return true;
}

void StopMovementRequest::InternalSwap(StopMovementRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(stop_type_, other->stop_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopMovementRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SafetyConstraints::InitAsDefaultInstance() {
}
class SafetyConstraints::_Internal {
 public:
};

SafetyConstraints::SafetyConstraints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  forbidden_zones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.SafetyConstraints)
}
SafetyConstraints::SafetyConstraints(const SafetyConstraints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      forbidden_zones_(from.forbidden_zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_linear_velocity_, &from.max_linear_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&obstacle_avoidance_enabled_) -
    reinterpret_cast<char*>(&max_linear_velocity_)) + sizeof(obstacle_avoidance_enabled_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.SafetyConstraints)
}

void SafetyConstraints::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&max_linear_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_avoidance_enabled_) -
      reinterpret_cast<char*>(&max_linear_velocity_)) + sizeof(obstacle_avoidance_enabled_));
}

SafetyConstraints::~SafetyConstraints() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.SafetyConstraints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SafetyConstraints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SafetyConstraints::ArenaDtor(void* object) {
  SafetyConstraints* _this = reinterpret_cast< SafetyConstraints* >(object);
  (void)_this;
}
void SafetyConstraints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SafetyConstraints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SafetyConstraints& SafetyConstraints::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SafetyConstraints_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void SafetyConstraints::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.SafetyConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forbidden_zones_.Clear();
  ::memset(&max_linear_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&obstacle_avoidance_enabled_) -
      reinterpret_cast<char*>(&max_linear_velocity_)) + sizeof(obstacle_avoidance_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SafetyConstraints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double max_linear_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          max_linear_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_angular_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          max_angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double max_acceleration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          max_acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool obstacle_avoidance_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          obstacle_avoidance_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double safety_margin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          safety_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated string forbidden_zones = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_forbidden_zones();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SafetyConstraints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.SafetyConstraints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double max_linear_velocity = 1;
  if (!(this->max_linear_velocity() <= 0 && this->max_linear_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_max_linear_velocity(), target);
  }

  // double max_angular_velocity = 2;
  if (!(this->max_angular_velocity() <= 0 && this->max_angular_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max_angular_velocity(), target);
  }

  // double max_acceleration = 3;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_max_acceleration(), target);
  }

  // bool obstacle_avoidance_enabled = 4;
  if (this->obstacle_avoidance_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_obstacle_avoidance_enabled(), target);
  }

  // double safety_margin = 5;
  if (!(this->safety_margin() <= 0 && this->safety_margin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_safety_margin(), target);
  }

  // repeated string forbidden_zones = 6;
  for (int i = 0, n = this->_internal_forbidden_zones_size(); i < n; i++) {
    const auto& s = this->_internal_forbidden_zones(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.SafetyConstraints.forbidden_zones");
    target = stream->WriteString(6, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.SafetyConstraints)
  return target;
}

size_t SafetyConstraints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.SafetyConstraints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string forbidden_zones = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(forbidden_zones_.size());
  for (int i = 0, n = forbidden_zones_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      forbidden_zones_.Get(i));
  }

  // double max_linear_velocity = 1;
  if (!(this->max_linear_velocity() <= 0 && this->max_linear_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_angular_velocity = 2;
  if (!(this->max_angular_velocity() <= 0 && this->max_angular_velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // double max_acceleration = 3;
  if (!(this->max_acceleration() <= 0 && this->max_acceleration() >= 0)) {
    total_size += 1 + 8;
  }

  // double safety_margin = 5;
  if (!(this->safety_margin() <= 0 && this->safety_margin() >= 0)) {
    total_size += 1 + 8;
  }

  // bool obstacle_avoidance_enabled = 4;
  if (this->obstacle_avoidance_enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyConstraints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.SafetyConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  const SafetyConstraints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SafetyConstraints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.SafetyConstraints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.SafetyConstraints)
    MergeFrom(*source);
  }
}

void SafetyConstraints::MergeFrom(const SafetyConstraints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.SafetyConstraints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  forbidden_zones_.MergeFrom(from.forbidden_zones_);
  if (!(from.max_linear_velocity() <= 0 && from.max_linear_velocity() >= 0)) {
    _internal_set_max_linear_velocity(from._internal_max_linear_velocity());
  }
  if (!(from.max_angular_velocity() <= 0 && from.max_angular_velocity() >= 0)) {
    _internal_set_max_angular_velocity(from._internal_max_angular_velocity());
  }
  if (!(from.max_acceleration() <= 0 && from.max_acceleration() >= 0)) {
    _internal_set_max_acceleration(from._internal_max_acceleration());
  }
  if (!(from.safety_margin() <= 0 && from.safety_margin() >= 0)) {
    _internal_set_safety_margin(from._internal_safety_margin());
  }
  if (from.obstacle_avoidance_enabled() != 0) {
    _internal_set_obstacle_avoidance_enabled(from._internal_obstacle_avoidance_enabled());
  }
}

void SafetyConstraints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.SafetyConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyConstraints::CopyFrom(const SafetyConstraints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.SafetyConstraints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyConstraints::IsInitialized() const {
  return true;
}

void SafetyConstraints::InternalSwap(SafetyConstraints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  forbidden_zones_.InternalSwap(&other->forbidden_zones_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyConstraints, obstacle_avoidance_enabled_)
      + sizeof(SafetyConstraints::obstacle_avoidance_enabled_)
      - PROTOBUF_FIELD_OFFSET(SafetyConstraints, max_linear_velocity_)>(
          reinterpret_cast<char*>(&max_linear_velocity_),
          reinterpret_cast<char*>(&other->max_linear_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SafetyConstraints::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SafetyViolation::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_SafetyViolation_default_instance_._instance.get_mutable()->detected_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class SafetyViolation::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& detected_at(const SafetyViolation* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SafetyViolation::_Internal::detected_at(const SafetyViolation* msg) {
  return *msg->detected_at_;
}
void SafetyViolation::clear_detected_at() {
  if (GetArena() == nullptr && detected_at_ != nullptr) {
    delete detected_at_;
  }
  detected_at_ = nullptr;
}
SafetyViolation::SafetyViolation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.SafetyViolation)
}
SafetyViolation::SafetyViolation(const SafetyViolation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_detected_at()) {
    detected_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.detected_at_);
  } else {
    detected_at_ = nullptr;
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.SafetyViolation)
}

void SafetyViolation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&detected_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&detected_at_)) + sizeof(type_));
}

SafetyViolation::~SafetyViolation() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.SafetyViolation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SafetyViolation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete detected_at_;
}

void SafetyViolation::ArenaDtor(void* object) {
  SafetyViolation* _this = reinterpret_cast< SafetyViolation* >(object);
  (void)_this;
}
void SafetyViolation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SafetyViolation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SafetyViolation& SafetyViolation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SafetyViolation_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void SafetyViolation::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.SafetyViolation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && detected_at_ != nullptr) {
    delete detected_at_;
  }
  detected_at_ = nullptr;
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SafetyViolation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.SafetyViolationType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::agricultural::robot::navigation::v1::SafetyViolationType>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.SafetyViolation.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double severity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp detected_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_detected_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SafetyViolation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.SafetyViolation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.SafetyViolationType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.SafetyViolation.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // double severity = 3;
  if (!(this->severity() <= 0 && this->severity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_severity(), target);
  }

  // .google.protobuf.Timestamp detected_at = 4;
  if (this->has_detected_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::detected_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.SafetyViolation)
  return target;
}

size_t SafetyViolation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.SafetyViolation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp detected_at = 4;
  if (this->has_detected_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *detected_at_);
  }

  // double severity = 3;
  if (!(this->severity() <= 0 && this->severity() >= 0)) {
    total_size += 1 + 8;
  }

  // .agricultural.robot.navigation.v1.SafetyViolationType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyViolation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.SafetyViolation)
  GOOGLE_DCHECK_NE(&from, this);
  const SafetyViolation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SafetyViolation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.SafetyViolation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.SafetyViolation)
    MergeFrom(*source);
  }
}

void SafetyViolation::MergeFrom(const SafetyViolation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.SafetyViolation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_detected_at()) {
    _internal_mutable_detected_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_detected_at());
  }
  if (!(from.severity() <= 0 && from.severity() >= 0)) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SafetyViolation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.SafetyViolation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SafetyViolation::CopyFrom(const SafetyViolation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.SafetyViolation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyViolation::IsInitialized() const {
  return true;
}

void SafetyViolation::InternalSwap(SafetyViolation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SafetyViolation, type_)
      + sizeof(SafetyViolation::type_)
      - PROTOBUF_FIELD_OFFSET(SafetyViolation, detected_at_)>(
          reinterpret_cast<char*>(&detected_at_),
          reinterpret_cast<char*>(&other->detected_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SafetyViolation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationGoal::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_NavigationGoal_default_instance_._instance.get_mutable()->target_pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationGoal_default_instance_._instance.get_mutable()->options_ = const_cast< ::agricultural::robot::navigation::v1::NavigationOptions*>(
      ::agricultural::robot::navigation::v1::NavigationOptions::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationGoal_default_instance_._instance.get_mutable()->deadline_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NavigationGoal::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& target_pose(const NavigationGoal* msg);
  static const ::agricultural::robot::navigation::v1::NavigationOptions& options(const NavigationGoal* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& deadline(const NavigationGoal* msg);
};

const ::agricultural::robot::navigation::v1::PoseWithCovariance&
NavigationGoal::_Internal::target_pose(const NavigationGoal* msg) {
  return *msg->target_pose_;
}
const ::agricultural::robot::navigation::v1::NavigationOptions&
NavigationGoal::_Internal::options(const NavigationGoal* msg) {
  return *msg->options_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigationGoal::_Internal::deadline(const NavigationGoal* msg) {
  return *msg->deadline_;
}
void NavigationGoal::clear_deadline() {
  if (GetArena() == nullptr && deadline_ != nullptr) {
    delete deadline_;
  }
  deadline_ = nullptr;
}
NavigationGoal::NavigationGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  waypoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationGoal)
}
NavigationGoal::NavigationGoal(const NavigationGoal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  goal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goal_id().empty()) {
    goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_goal_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  if (from._internal_has_target_pose()) {
    target_pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.target_pose_);
  } else {
    target_pose_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::agricultural::robot::navigation::v1::NavigationOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  if (from._internal_has_deadline()) {
    deadline_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.deadline_);
  } else {
    deadline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationGoal)
}

void NavigationGoal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deadline_) -
      reinterpret_cast<char*>(&target_pose_)) + sizeof(deadline_));
}

NavigationGoal::~NavigationGoal() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationGoal)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationGoal::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete target_pose_;
  if (this != internal_default_instance()) delete options_;
  if (this != internal_default_instance()) delete deadline_;
}

void NavigationGoal::ArenaDtor(void* object) {
  NavigationGoal* _this = reinterpret_cast< NavigationGoal* >(object);
  (void)_this;
}
void NavigationGoal::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationGoal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationGoal& NavigationGoal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationGoal_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationGoal::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  goal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && target_pose_ != nullptr) {
    delete target_pose_;
  }
  target_pose_ = nullptr;
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  if (GetArena() == nullptr && deadline_ != nullptr) {
    delete deadline_;
  }
  deadline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationGoal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationGoal.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_goal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationGoal.goal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance target_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationGoal.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.Waypoint waypoints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp deadline = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deadline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationGoal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationGoal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationGoal.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string goal_id = 2;
  if (this->goal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goal_id().data(), static_cast<int>(this->_internal_goal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationGoal.goal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_goal_id(), target);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance target_pose = 3;
  if (this->has_target_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target_pose(this), target, stream);
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationGoal.frame_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_id(), target);
  }

  // .agricultural.robot.navigation.v1.NavigationOptions options = 5;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::options(this), target, stream);
  }

  // repeated .agricultural.robot.navigation.v1.Waypoint waypoints = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_waypoints(i), target, stream);
  }

  // .google.protobuf.Timestamp deadline = 7;
  if (this->has_deadline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::deadline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationGoal)
  return target;
}

size_t NavigationGoal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationGoal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.Waypoint waypoints = 6;
  total_size += 1UL * this->_internal_waypoints_size();
  for (const auto& msg : this->waypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string goal_id = 2;
  if (this->goal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goal_id());
  }

  // string frame_id = 4;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance target_pose = 3;
  if (this->has_target_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_pose_);
  }

  // .agricultural.robot.navigation.v1.NavigationOptions options = 5;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .google.protobuf.Timestamp deadline = 7;
  if (this->has_deadline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *deadline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationGoal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationGoal)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationGoal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationGoal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationGoal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationGoal)
    MergeFrom(*source);
  }
}

void NavigationGoal::MergeFrom(const NavigationGoal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationGoal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.goal_id().size() > 0) {
    _internal_set_goal_id(from._internal_goal_id());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.has_target_pose()) {
    _internal_mutable_target_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_target_pose());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::agricultural::robot::navigation::v1::NavigationOptions::MergeFrom(from._internal_options());
  }
  if (from.has_deadline()) {
    _internal_mutable_deadline()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_deadline());
  }
}

void NavigationGoal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationGoal::CopyFrom(const NavigationGoal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationGoal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationGoal::IsInitialized() const {
  return true;
}

void NavigationGoal::InternalSwap(NavigationGoal* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  waypoints_.InternalSwap(&other->waypoints_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  goal_id_.Swap(&other->goal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationGoal, deadline_)
      + sizeof(NavigationGoal::deadline_)
      - PROTOBUF_FIELD_OFFSET(NavigationGoal, target_pose_)>(
          reinterpret_cast<char*>(&target_pose_),
          reinterpret_cast<char*>(&other->target_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationGoal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryCommand::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_TrajectoryCommand_default_instance_._instance.get_mutable()->options_ = const_cast< ::agricultural::robot::navigation::v1::TrajectoryOptions*>(
      ::agricultural::robot::navigation::v1::TrajectoryOptions::internal_default_instance());
}
class TrajectoryCommand::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::TrajectoryOptions& options(const TrajectoryCommand* msg);
};

const ::agricultural::robot::navigation::v1::TrajectoryOptions&
TrajectoryCommand::_Internal::options(const TrajectoryCommand* msg) {
  return *msg->options_;
}
TrajectoryCommand::TrajectoryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.TrajectoryCommand)
}
TrajectoryCommand::TrajectoryCommand(const TrajectoryCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  trajectory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trajectory_id().empty()) {
    trajectory_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trajectory_id(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  if (from._internal_has_options()) {
    options_ = new ::agricultural::robot::navigation::v1::TrajectoryOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.TrajectoryCommand)
}

void TrajectoryCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

TrajectoryCommand::~TrajectoryCommand() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.TrajectoryCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trajectory_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void TrajectoryCommand::ArenaDtor(void* object) {
  TrajectoryCommand* _this = reinterpret_cast< TrajectoryCommand* >(object);
  (void)_this;
}
void TrajectoryCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryCommand& TrajectoryCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trajectory_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.TrajectoryCommand.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trajectory_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_trajectory_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.TrajectoryPoint points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.TrajectoryOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.TrajectoryCommand.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.TrajectoryCommand.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string trajectory_id = 2;
  if (this->trajectory_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trajectory_id().data(), static_cast<int>(this->_internal_trajectory_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.TrajectoryCommand.trajectory_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_trajectory_id(), target);
  }

  // repeated .agricultural.robot.navigation.v1.TrajectoryPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  // .agricultural.robot.navigation.v1.TrajectoryOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  // string frame_id = 5;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.TrajectoryCommand.frame_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.TrajectoryCommand)
  return target;
}

size_t TrajectoryCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.TrajectoryPoint points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string trajectory_id = 2;
  if (this->trajectory_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trajectory_id());
  }

  // string frame_id = 5;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .agricultural.robot.navigation.v1.TrajectoryOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.TrajectoryCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.TrajectoryCommand)
    MergeFrom(*source);
  }
}

void TrajectoryCommand::MergeFrom(const TrajectoryCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.trajectory_id().size() > 0) {
    _internal_set_trajectory_id(from._internal_trajectory_id());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::agricultural::robot::navigation::v1::TrajectoryOptions::MergeFrom(from._internal_options());
  }
}

void TrajectoryCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryCommand::CopyFrom(const TrajectoryCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.TrajectoryCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryCommand::IsInitialized() const {
  return true;
}

void TrajectoryCommand::InternalSwap(TrajectoryCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trajectory_id_.Swap(&other->trajectory_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Waypoint::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_Waypoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
  ::agricultural::robot::navigation::v1::_Waypoint_default_instance_._instance.get_mutable()->max_duration_at_waypoint_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class Waypoint::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& pose(const Waypoint* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& max_duration_at_waypoint(const Waypoint* msg);
};

const ::agricultural::robot::navigation::v1::PoseWithCovariance&
Waypoint::_Internal::pose(const Waypoint* msg) {
  return *msg->pose_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
Waypoint::_Internal::max_duration_at_waypoint(const Waypoint* msg) {
  return *msg->max_duration_at_waypoint_;
}
void Waypoint::clear_max_duration_at_waypoint() {
  if (GetArena() == nullptr && max_duration_at_waypoint_ != nullptr) {
    delete max_duration_at_waypoint_;
  }
  max_duration_at_waypoint_ = nullptr;
}
Waypoint::Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  waypoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_waypoint_id().empty()) {
    waypoint_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_waypoint_id(),
      GetArena());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_max_duration_at_waypoint()) {
    max_duration_at_waypoint_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.max_duration_at_waypoint_);
  } else {
    max_duration_at_waypoint_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Waypoint)
}

void Waypoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  waypoint_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(type_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Waypoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Waypoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  waypoint_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete max_duration_at_waypoint_;
}

void Waypoint::ArenaDtor(void* object) {
  Waypoint* _this = reinterpret_cast< Waypoint* >(object);
  (void)_this;
}
void Waypoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Waypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Waypoint& Waypoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Waypoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  waypoint_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && max_duration_at_waypoint_ != nullptr) {
    delete max_duration_at_waypoint_;
  }
  max_duration_at_waypoint_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Waypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string waypoint_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_waypoint_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.Waypoint.waypoint_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.WaypointType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::agricultural::robot::navigation::v1::WaypointType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration max_duration_at_waypoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_duration_at_waypoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.WaypointAction actions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Waypoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Waypoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string waypoint_id = 1;
  if (this->waypoint_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_waypoint_id().data(), static_cast<int>(this->_internal_waypoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.Waypoint.waypoint_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_waypoint_id(), target);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pose(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.WaypointType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .google.protobuf.Duration max_duration_at_waypoint = 4;
  if (this->has_max_duration_at_waypoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::max_duration_at_waypoint(this), target, stream);
  }

  // repeated .agricultural.robot.navigation.v1.WaypointAction actions = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Waypoint)
  return target;
}

size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Waypoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.WaypointAction actions = 5;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string waypoint_id = 1;
  if (this->waypoint_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_waypoint_id());
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance pose = 2;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .google.protobuf.Duration max_duration_at_waypoint = 4;
  if (this->has_max_duration_at_waypoint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *max_duration_at_waypoint_);
  }

  // .agricultural.robot.navigation.v1.WaypointType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Waypoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Waypoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Waypoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Waypoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Waypoint)
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from.waypoint_id().size() > 0) {
    _internal_set_waypoint_id(from._internal_waypoint_id());
  }
  if (from.has_pose()) {
    _internal_mutable_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_pose());
  }
  if (from.has_max_duration_at_waypoint()) {
    _internal_mutable_max_duration_at_waypoint()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_max_duration_at_waypoint());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Waypoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
  waypoint_id_.Swap(&other->waypoint_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Waypoint, type_)
      + sizeof(Waypoint::type_)
      - PROTOBUF_FIELD_OFFSET(Waypoint, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Waypoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryPoint::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_TrajectoryPoint_default_instance_._instance.get_mutable()->pose_ = const_cast< ::agricultural::robot::navigation::v1::Pose*>(
      ::agricultural::robot::navigation::v1::Pose::internal_default_instance());
  ::agricultural::robot::navigation::v1::_TrajectoryPoint_default_instance_._instance.get_mutable()->velocity_ = const_cast< ::agricultural::robot::navigation::v1::Twist*>(
      ::agricultural::robot::navigation::v1::Twist::internal_default_instance());
  ::agricultural::robot::navigation::v1::_TrajectoryPoint_default_instance_._instance.get_mutable()->time_from_start_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TrajectoryPoint::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Pose& pose(const TrajectoryPoint* msg);
  static const ::agricultural::robot::navigation::v1::Twist& velocity(const TrajectoryPoint* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time_from_start(const TrajectoryPoint* msg);
};

const ::agricultural::robot::navigation::v1::Pose&
TrajectoryPoint::_Internal::pose(const TrajectoryPoint* msg) {
  return *msg->pose_;
}
const ::agricultural::robot::navigation::v1::Twist&
TrajectoryPoint::_Internal::velocity(const TrajectoryPoint* msg) {
  return *msg->velocity_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
TrajectoryPoint::_Internal::time_from_start(const TrajectoryPoint* msg) {
  return *msg->time_from_start_;
}
void TrajectoryPoint::clear_time_from_start() {
  if (GetArena() == nullptr && time_from_start_ != nullptr) {
    delete time_from_start_;
  }
  time_from_start_ = nullptr;
}
TrajectoryPoint::TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  accelerations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      accelerations_(from.accelerations_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::agricultural::robot::navigation::v1::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::agricultural::robot::navigation::v1::Twist(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_time_from_start()) {
    time_from_start_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_from_start_);
  } else {
    time_from_start_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.TrajectoryPoint)
}

void TrajectoryPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_from_start_) -
      reinterpret_cast<char*>(&pose_)) + sizeof(time_from_start_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.TrajectoryPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete time_from_start_;
}

void TrajectoryPoint::ArenaDtor(void* object) {
  TrajectoryPoint* _this = reinterpret_cast< TrajectoryPoint* >(object);
  (void)_this;
}
void TrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryPoint& TrajectoryPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryPoint_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accelerations_.Clear();
  if (GetArena() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArena() == nullptr && time_from_start_ != nullptr) {
    delete time_from_start_;
  }
  time_from_start_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.Pose pose = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Twist velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_from_start = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_from_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double accelerations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_accelerations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33) {
          _internal_add_accelerations(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.Pose pose = 1;
  if (this->has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pose(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.Twist velocity = 2;
  if (this->has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::velocity(this), target, stream);
  }

  // .google.protobuf.Timestamp time_from_start = 3;
  if (this->has_time_from_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_from_start(this), target, stream);
  }

  // repeated double accelerations = 4;
  if (this->_internal_accelerations_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_accelerations(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double accelerations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_accelerations_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _accelerations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agricultural.robot.navigation.v1.Pose pose = 1;
  if (this->has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .agricultural.robot.navigation.v1.Twist velocity = 2;
  if (this->has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .google.protobuf.Timestamp time_from_start = 3;
  if (this->has_time_from_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_from_start_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.TrajectoryPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.TrajectoryPoint)
    MergeFrom(*source);
  }
}

void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accelerations_.MergeFrom(from.accelerations_);
  if (from.has_pose()) {
    _internal_mutable_pose()->::agricultural::robot::navigation::v1::Pose::MergeFrom(from._internal_pose());
  }
  if (from.has_velocity()) {
    _internal_mutable_velocity()->::agricultural::robot::navigation::v1::Twist::MergeFrom(from._internal_velocity());
  }
  if (from.has_time_from_start()) {
    _internal_mutable_time_from_start()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_from_start());
  }
}

void TrajectoryPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  accelerations_.InternalSwap(&other->accelerations_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPoint, time_from_start_)
      + sizeof(TrajectoryPoint::time_from_start_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPoint, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationOptions::InitAsDefaultInstance() {
}
class NavigationOptions::_Internal {
 public:
};

NavigationOptions::NavigationOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  avoid_zones_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationOptions)
}
NavigationOptions::NavigationOptions(const NavigationOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      avoid_zones_(from.avoid_zones_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tolerance_linear_, &from.tolerance_linear_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_retries_) -
    reinterpret_cast<char*>(&tolerance_linear_)) + sizeof(max_retries_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationOptions)
}

void NavigationOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&tolerance_linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_retries_) -
      reinterpret_cast<char*>(&tolerance_linear_)) + sizeof(max_retries_));
}

NavigationOptions::~NavigationOptions() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NavigationOptions::ArenaDtor(void* object) {
  NavigationOptions* _this = reinterpret_cast< NavigationOptions* >(object);
  (void)_this;
}
void NavigationOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationOptions& NavigationOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  avoid_zones_.Clear();
  ::memset(&tolerance_linear_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_retries_) -
      reinterpret_cast<char*>(&tolerance_linear_)) + sizeof(max_retries_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.PlannerType planner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_planner(static_cast<::agricultural::robot::navigation::v1::PlannerType>(val));
        } else goto handle_unusual;
        continue;
      // double tolerance_linear = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          tolerance_linear_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double tolerance_angular = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          tolerance_angular_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool use_obstacle_avoidance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_obstacle_avoidance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string avoid_zones = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_avoid_zones();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationOptions.avoid_zones"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationBehavior behavior = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_behavior(static_cast<::agricultural::robot::navigation::v1::NavigationBehavior>(val));
        } else goto handle_unusual;
        continue;
      // uint32 max_planning_time_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_planning_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_retries = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          max_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.PlannerType planner = 1;
  if (this->planner() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_planner(), target);
  }

  // double tolerance_linear = 2;
  if (!(this->tolerance_linear() <= 0 && this->tolerance_linear() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_tolerance_linear(), target);
  }

  // double tolerance_angular = 3;
  if (!(this->tolerance_angular() <= 0 && this->tolerance_angular() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_tolerance_angular(), target);
  }

  // bool use_obstacle_avoidance = 4;
  if (this->use_obstacle_avoidance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_obstacle_avoidance(), target);
  }

  // repeated string avoid_zones = 5;
  for (int i = 0, n = this->_internal_avoid_zones_size(); i < n; i++) {
    const auto& s = this->_internal_avoid_zones(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationOptions.avoid_zones");
    target = stream->WriteString(5, s, target);
  }

  // .agricultural.robot.navigation.v1.NavigationBehavior behavior = 6;
  if (this->behavior() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_behavior(), target);
  }

  // uint32 max_planning_time_ms = 7;
  if (this->max_planning_time_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_planning_time_ms(), target);
  }

  // uint32 max_retries = 8;
  if (this->max_retries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_max_retries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationOptions)
  return target;
}

size_t NavigationOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string avoid_zones = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(avoid_zones_.size());
  for (int i = 0, n = avoid_zones_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      avoid_zones_.Get(i));
  }

  // double tolerance_linear = 2;
  if (!(this->tolerance_linear() <= 0 && this->tolerance_linear() >= 0)) {
    total_size += 1 + 8;
  }

  // .agricultural.robot.navigation.v1.PlannerType planner = 1;
  if (this->planner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_planner());
  }

  // bool use_obstacle_avoidance = 4;
  if (this->use_obstacle_avoidance() != 0) {
    total_size += 1 + 1;
  }

  // double tolerance_angular = 3;
  if (!(this->tolerance_angular() <= 0 && this->tolerance_angular() >= 0)) {
    total_size += 1 + 8;
  }

  // .agricultural.robot.navigation.v1.NavigationBehavior behavior = 6;
  if (this->behavior() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_behavior());
  }

  // uint32 max_planning_time_ms = 7;
  if (this->max_planning_time_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_planning_time_ms());
  }

  // uint32 max_retries = 8;
  if (this->max_retries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_retries());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationOptions)
    MergeFrom(*source);
  }
}

void NavigationOptions::MergeFrom(const NavigationOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  avoid_zones_.MergeFrom(from.avoid_zones_);
  if (!(from.tolerance_linear() <= 0 && from.tolerance_linear() >= 0)) {
    _internal_set_tolerance_linear(from._internal_tolerance_linear());
  }
  if (from.planner() != 0) {
    _internal_set_planner(from._internal_planner());
  }
  if (from.use_obstacle_avoidance() != 0) {
    _internal_set_use_obstacle_avoidance(from._internal_use_obstacle_avoidance());
  }
  if (!(from.tolerance_angular() <= 0 && from.tolerance_angular() >= 0)) {
    _internal_set_tolerance_angular(from._internal_tolerance_angular());
  }
  if (from.behavior() != 0) {
    _internal_set_behavior(from._internal_behavior());
  }
  if (from.max_planning_time_ms() != 0) {
    _internal_set_max_planning_time_ms(from._internal_max_planning_time_ms());
  }
  if (from.max_retries() != 0) {
    _internal_set_max_retries(from._internal_max_retries());
  }
}

void NavigationOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationOptions::CopyFrom(const NavigationOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationOptions::IsInitialized() const {
  return true;
}

void NavigationOptions::InternalSwap(NavigationOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  avoid_zones_.InternalSwap(&other->avoid_zones_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationOptions, max_retries_)
      + sizeof(NavigationOptions::max_retries_)
      - PROTOBUF_FIELD_OFFSET(NavigationOptions, tolerance_linear_)>(
          reinterpret_cast<char*>(&tolerance_linear_),
          reinterpret_cast<char*>(&other->tolerance_linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrajectoryOptions::InitAsDefaultInstance() {
}
class TrajectoryOptions::_Internal {
 public:
};

TrajectoryOptions::TrajectoryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.TrajectoryOptions)
}
TrajectoryOptions::TrajectoryOptions(const TrajectoryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&velocity_scaling_, &from.velocity_scaling_,
    static_cast<size_t>(reinterpret_cast<char*>(&execution_mode_) -
    reinterpret_cast<char*>(&velocity_scaling_)) + sizeof(execution_mode_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.TrajectoryOptions)
}

void TrajectoryOptions::SharedCtor() {
  ::memset(&velocity_scaling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_mode_) -
      reinterpret_cast<char*>(&velocity_scaling_)) + sizeof(execution_mode_));
}

TrajectoryOptions::~TrajectoryOptions() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.TrajectoryOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrajectoryOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TrajectoryOptions::ArenaDtor(void* object) {
  TrajectoryOptions* _this = reinterpret_cast< TrajectoryOptions* >(object);
  (void)_this;
}
void TrajectoryOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrajectoryOptions& TrajectoryOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrajectoryOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void TrajectoryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_scaling_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&execution_mode_) -
      reinterpret_cast<char*>(&velocity_scaling_)) + sizeof(execution_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool interpolate_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          interpolate_path_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double velocity_scaling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          velocity_scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool check_collisions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          check_collisions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.TrajectoryExecutionMode execution_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_execution_mode(static_cast<::agricultural::robot::navigation::v1::TrajectoryExecutionMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool interpolate_path = 1;
  if (this->interpolate_path() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_interpolate_path(), target);
  }

  // double velocity_scaling = 2;
  if (!(this->velocity_scaling() <= 0 && this->velocity_scaling() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_velocity_scaling(), target);
  }

  // bool check_collisions = 3;
  if (this->check_collisions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_check_collisions(), target);
  }

  // .agricultural.robot.navigation.v1.TrajectoryExecutionMode execution_mode = 4;
  if (this->execution_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_execution_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.TrajectoryOptions)
  return target;
}

size_t TrajectoryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity_scaling = 2;
  if (!(this->velocity_scaling() <= 0 && this->velocity_scaling() >= 0)) {
    total_size += 1 + 8;
  }

  // bool interpolate_path = 1;
  if (this->interpolate_path() != 0) {
    total_size += 1 + 1;
  }

  // bool check_collisions = 3;
  if (this->check_collisions() != 0) {
    total_size += 1 + 1;
  }

  // .agricultural.robot.navigation.v1.TrajectoryExecutionMode execution_mode = 4;
  if (this->execution_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_execution_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrajectoryOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const TrajectoryOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrajectoryOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.TrajectoryOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.TrajectoryOptions)
    MergeFrom(*source);
  }
}

void TrajectoryOptions::MergeFrom(const TrajectoryOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity_scaling() <= 0 && from.velocity_scaling() >= 0)) {
    _internal_set_velocity_scaling(from._internal_velocity_scaling());
  }
  if (from.interpolate_path() != 0) {
    _internal_set_interpolate_path(from._internal_interpolate_path());
  }
  if (from.check_collisions() != 0) {
    _internal_set_check_collisions(from._internal_check_collisions());
  }
  if (from.execution_mode() != 0) {
    _internal_set_execution_mode(from._internal_execution_mode());
  }
}

void TrajectoryOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryOptions::CopyFrom(const TrajectoryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.TrajectoryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryOptions::IsInitialized() const {
  return true;
}

void TrajectoryOptions::InternalSwap(TrajectoryOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryOptions, execution_mode_)
      + sizeof(TrajectoryOptions::execution_mode_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryOptions, velocity_scaling_)>(
          reinterpret_cast<char*>(&velocity_scaling_),
          reinterpret_cast<char*>(&other->velocity_scaling_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

WaypointAction_ParametersEntry_DoNotUse::WaypointAction_ParametersEntry_DoNotUse() {}
WaypointAction_ParametersEntry_DoNotUse::WaypointAction_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void WaypointAction_ParametersEntry_DoNotUse::MergeFrom(const WaypointAction_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata WaypointAction_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void WaypointAction_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void WaypointAction::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_WaypointAction_default_instance_._instance.get_mutable()->duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class WaypointAction::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const WaypointAction* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
WaypointAction::_Internal::duration(const WaypointAction* msg) {
  return *msg->duration_;
}
void WaypointAction::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
WaypointAction::WaypointAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.WaypointAction)
}
WaypointAction::WaypointAction(const WaypointAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.WaypointAction)
}

void WaypointAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(type_));
}

WaypointAction::~WaypointAction() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.WaypointAction)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WaypointAction::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete duration_;
}

void WaypointAction::ArenaDtor(void* object) {
  WaypointAction* _this = reinterpret_cast< WaypointAction* >(object);
  (void)_this;
}
void WaypointAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WaypointAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WaypointAction& WaypointAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WaypointAction_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void WaypointAction::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.WaypointAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaypointAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.WaypointActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::agricultural::robot::navigation::v1::WaypointActionType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WaypointAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.WaypointAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.WaypointActionType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::duration(this), target, stream);
  }

  // map<string, string> parameters = 3;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agricultural.robot.navigation.v1.WaypointAction.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agricultural.robot.navigation.v1.WaypointAction.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = WaypointAction_ParametersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = WaypointAction_ParametersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.WaypointAction)
  return target;
}

size_t WaypointAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.WaypointAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += WaypointAction_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.Duration duration = 2;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .agricultural.robot.navigation.v1.WaypointActionType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WaypointAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.WaypointAction)
  GOOGLE_DCHECK_NE(&from, this);
  const WaypointAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WaypointAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.WaypointAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.WaypointAction)
    MergeFrom(*source);
  }
}

void WaypointAction::MergeFrom(const WaypointAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.WaypointAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void WaypointAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.WaypointAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointAction::CopyFrom(const WaypointAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.WaypointAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointAction::IsInitialized() const {
  return true;
}

void WaypointAction::InternalSwap(WaypointAction* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaypointAction, type_)
      + sizeof(WaypointAction::type_)
      - PROTOBUF_FIELD_OFFSET(WaypointAction, duration_)>(
          reinterpret_cast<char*>(&duration_),
          reinterpret_cast<char*>(&other->duration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaypointAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CancelGoalRequest::InitAsDefaultInstance() {
}
class CancelGoalRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<CancelGoalRequest>()._has_bits_);
  static void set_has_goal_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CancelGoalRequest::CancelGoalRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CancelGoalRequest)
}
CancelGoalRequest::CancelGoalRequest(const CancelGoalRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  goal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_goal_id()) {
    goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_goal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CancelGoalRequest)
}

void CancelGoalRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelGoalRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CancelGoalRequest::~CancelGoalRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CancelGoalRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelGoalRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CancelGoalRequest::ArenaDtor(void* object) {
  CancelGoalRequest* _this = reinterpret_cast< CancelGoalRequest* >(object);
  (void)_this;
}
void CancelGoalRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelGoalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelGoalRequest& CancelGoalRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelGoalRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CancelGoalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    goal_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelGoalRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CancelGoalRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goal_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_goal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CancelGoalRequest.goal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelGoalRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CancelGoalRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string goal_id = 2;
  if (_internal_has_goal_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goal_id().data(), static_cast<int>(this->_internal_goal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CancelGoalRequest.goal_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_goal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CancelGoalRequest)
  return target;
}

size_t CancelGoalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string goal_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelGoalRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelGoalRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelGoalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CancelGoalRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CancelGoalRequest)
    MergeFrom(*source);
  }
}

void CancelGoalRequest::MergeFrom(const CancelGoalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from._internal_has_goal_id()) {
    _internal_set_goal_id(from._internal_goal_id());
  }
}

void CancelGoalRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelGoalRequest::CopyFrom(const CancelGoalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CancelGoalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelGoalRequest::IsInitialized() const {
  return true;
}

void CancelGoalRequest::InternalSwap(CancelGoalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  goal_id_.Swap(&other->goal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelGoalRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNavigationStatusRequest::InitAsDefaultInstance() {
}
class GetNavigationStatusRequest::_Internal {
 public:
};

GetNavigationStatusRequest::GetNavigationStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
}
GetNavigationStatusRequest::GetNavigationStatusRequest(const GetNavigationStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
}

void GetNavigationStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNavigationStatusRequest::~GetNavigationStatusRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNavigationStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNavigationStatusRequest::ArenaDtor(void* object) {
  GetNavigationStatusRequest* _this = reinterpret_cast< GetNavigationStatusRequest* >(object);
  (void)_this;
}
void GetNavigationStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNavigationStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNavigationStatusRequest& GetNavigationStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void GetNavigationStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNavigationStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNavigationStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetNavigationStatusRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  return target;
}

size_t GetNavigationStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNavigationStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNavigationStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNavigationStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
    MergeFrom(*source);
  }
}

void GetNavigationStatusRequest::MergeFrom(const GetNavigationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
}

void GetNavigationStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNavigationStatusRequest::CopyFrom(const GetNavigationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.GetNavigationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNavigationStatusRequest::IsInitialized() const {
  return true;
}

void GetNavigationStatusRequest::InternalSwap(GetNavigationStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNavigationStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamNavigationStatusRequest::InitAsDefaultInstance() {
}
class StreamNavigationStatusRequest::_Internal {
 public:
};

StreamNavigationStatusRequest::StreamNavigationStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
}
StreamNavigationStatusRequest::StreamNavigationStatusRequest(const StreamNavigationStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  frequency_hz_ = from.frequency_hz_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
}

void StreamNavigationStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frequency_hz_ = 0u;
}

StreamNavigationStatusRequest::~StreamNavigationStatusRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamNavigationStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamNavigationStatusRequest::ArenaDtor(void* object) {
  StreamNavigationStatusRequest* _this = reinterpret_cast< StreamNavigationStatusRequest* >(object);
  (void)_this;
}
void StreamNavigationStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamNavigationStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamNavigationStatusRequest& StreamNavigationStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamNavigationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void StreamNavigationStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frequency_hz_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamNavigationStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frequency_hz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          frequency_hz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamNavigationStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.StreamNavigationStatusRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // uint32 frequency_hz = 2;
  if (this->frequency_hz() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frequency_hz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  return target;
}

size_t StreamNavigationStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // uint32 frequency_hz = 2;
  if (this->frequency_hz() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_frequency_hz());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamNavigationStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamNavigationStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamNavigationStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
    MergeFrom(*source);
  }
}

void StreamNavigationStatusRequest::MergeFrom(const StreamNavigationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.frequency_hz() != 0) {
    _internal_set_frequency_hz(from._internal_frequency_hz());
  }
}

void StreamNavigationStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamNavigationStatusRequest::CopyFrom(const StreamNavigationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.StreamNavigationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamNavigationStatusRequest::IsInitialized() const {
  return true;
}

void StreamNavigationStatusRequest::InternalSwap(StreamNavigationStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(frequency_hz_, other->frequency_hz_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamNavigationStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_NavigationResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NavigationResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const NavigationResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigationResponse::_Internal::timestamp(const NavigationResponse* msg) {
  return *msg->timestamp_;
}
void NavigationResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
NavigationResponse::NavigationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationResponse)
}
NavigationResponse::NavigationResponse(const NavigationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  goal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_goal_id().empty()) {
    goal_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_goal_id(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&success_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationResponse)
}

void NavigationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(result_));
}

NavigationResponse::~NavigationResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  goal_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void NavigationResponse::ArenaDtor(void* object) {
  NavigationResponse* _this = reinterpret_cast< NavigationResponse* >(object);
  (void)_this;
}
void NavigationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationResponse& NavigationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  goal_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&success_)) + sizeof(result_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string goal_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_goal_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationResponse.goal_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationResult result = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::agricultural::robot::navigation::v1::NavigationResult>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string goal_id = 3;
  if (this->goal_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goal_id().data(), static_cast<int>(this->_internal_goal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationResponse.goal_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_goal_id(), target);
  }

  // .agricultural.robot.navigation.v1.NavigationResult result = 4;
  if (this->result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_result(), target);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationResponse)
  return target;
}

size_t NavigationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string goal_id = 3;
  if (this->goal_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goal_id());
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .agricultural.robot.navigation.v1.NavigationResult result = 4;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationResponse)
    MergeFrom(*source);
  }
}

void NavigationResponse::MergeFrom(const NavigationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.goal_id().size() > 0) {
    _internal_set_goal_id(from._internal_goal_id());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
}

void NavigationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationResponse::CopyFrom(const NavigationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationResponse::IsInitialized() const {
  return true;
}

void NavigationResponse::InternalSwap(NavigationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  goal_id_.Swap(&other->goal_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationResponse, result_)
      + sizeof(NavigationResponse::result_)
      - PROTOBUF_FIELD_OFFSET(NavigationResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationStatusResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_NavigationStatusResponse_default_instance_._instance.get_mutable()->progress_ = const_cast< ::agricultural::robot::navigation::v1::NavigationProgress*>(
      ::agricultural::robot::navigation::v1::NavigationProgress::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationStatusResponse_default_instance_._instance.get_mutable()->current_goal_ = const_cast< ::agricultural::robot::navigation::v1::NavigationGoal*>(
      ::agricultural::robot::navigation::v1::NavigationGoal::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationStatusResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NavigationStatusResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationStatusResponse>()._has_bits_);
  static const ::agricultural::robot::navigation::v1::NavigationProgress& progress(const NavigationStatusResponse* msg);
  static const ::agricultural::robot::navigation::v1::NavigationGoal& current_goal(const NavigationStatusResponse* msg);
  static void set_has_current_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const NavigationStatusResponse* msg);
};

const ::agricultural::robot::navigation::v1::NavigationProgress&
NavigationStatusResponse::_Internal::progress(const NavigationStatusResponse* msg) {
  return *msg->progress_;
}
const ::agricultural::robot::navigation::v1::NavigationGoal&
NavigationStatusResponse::_Internal::current_goal(const NavigationStatusResponse* msg) {
  return *msg->current_goal_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigationStatusResponse::_Internal::timestamp(const NavigationStatusResponse* msg) {
  return *msg->timestamp_;
}
void NavigationStatusResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
NavigationStatusResponse::NavigationStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationStatusResponse)
}
NavigationStatusResponse::NavigationStatusResponse(const NavigationStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_progress()) {
    progress_ = new ::agricultural::robot::navigation::v1::NavigationProgress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  if (from._internal_has_current_goal()) {
    current_goal_ = new ::agricultural::robot::navigation::v1::NavigationGoal(*from.current_goal_);
  } else {
    current_goal_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationStatusResponse)
}

void NavigationStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(status_));
}

NavigationStatusResponse::~NavigationStatusResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete progress_;
  if (this != internal_default_instance()) delete current_goal_;
  if (this != internal_default_instance()) delete timestamp_;
}

void NavigationStatusResponse::ArenaDtor(void* object) {
  NavigationStatusResponse* _this = reinterpret_cast< NavigationStatusResponse* >(object);
  (void)_this;
}
void NavigationStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationStatusResponse& NavigationStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && current_goal_ != nullptr) {
      delete current_goal_;
    }
    current_goal_ = nullptr;
  }
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.NavigationStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::agricultural::robot::navigation::v1::NavigationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationProgress progress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationGoal current_goal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.NavigationError errors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.NavigationStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .agricultural.robot.navigation.v1.NavigationProgress progress = 2;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::progress(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.NavigationGoal current_goal = 3;
  if (_internal_has_current_goal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::current_goal(this), target, stream);
  }

  // repeated .agricultural.robot.navigation.v1.NavigationError errors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_errors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_errors(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationStatusResponse)
  return target;
}

size_t NavigationStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.NavigationError errors = 4;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .agricultural.robot.navigation.v1.NavigationProgress progress = 2;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  // .agricultural.robot.navigation.v1.NavigationGoal current_goal = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_goal_);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .agricultural.robot.navigation.v1.NavigationStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationStatusResponse)
    MergeFrom(*source);
  }
}

void NavigationStatusResponse::MergeFrom(const NavigationStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
  if (from.has_progress()) {
    _internal_mutable_progress()->::agricultural::robot::navigation::v1::NavigationProgress::MergeFrom(from._internal_progress());
  }
  if (from._internal_has_current_goal()) {
    _internal_mutable_current_goal()->::agricultural::robot::navigation::v1::NavigationGoal::MergeFrom(from._internal_current_goal());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NavigationStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationStatusResponse::CopyFrom(const NavigationStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationStatusResponse::IsInitialized() const {
  return true;
}

void NavigationStatusResponse::InternalSwap(NavigationStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  errors_.InternalSwap(&other->errors_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationStatusResponse, status_)
      + sizeof(NavigationStatusResponse::status_)
      - PROTOBUF_FIELD_OFFSET(NavigationStatusResponse, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationStatusUpdate::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_NavigationStatusUpdate_default_instance_._instance.get_mutable()->progress_ = const_cast< ::agricultural::robot::navigation::v1::NavigationProgress*>(
      ::agricultural::robot::navigation::v1::NavigationProgress::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationStatusUpdate_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationStatusUpdate_default_instance_._instance.get_mutable()->error_ = const_cast< ::agricultural::robot::navigation::v1::NavigationError*>(
      ::agricultural::robot::navigation::v1::NavigationError::internal_default_instance());
}
class NavigationStatusUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<NavigationStatusUpdate>()._has_bits_);
  static const ::agricultural::robot::navigation::v1::NavigationProgress& progress(const NavigationStatusUpdate* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const NavigationStatusUpdate* msg);
  static const ::agricultural::robot::navigation::v1::NavigationError& error(const NavigationStatusUpdate* msg);
  static void set_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::agricultural::robot::navigation::v1::NavigationProgress&
NavigationStatusUpdate::_Internal::progress(const NavigationStatusUpdate* msg) {
  return *msg->progress_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigationStatusUpdate::_Internal::timestamp(const NavigationStatusUpdate* msg) {
  return *msg->timestamp_;
}
const ::agricultural::robot::navigation::v1::NavigationError&
NavigationStatusUpdate::_Internal::error(const NavigationStatusUpdate* msg) {
  return *msg->error_;
}
void NavigationStatusUpdate::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
NavigationStatusUpdate::NavigationStatusUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationStatusUpdate)
}
NavigationStatusUpdate::NavigationStatusUpdate(const NavigationStatusUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  if (from._internal_has_progress()) {
    progress_ = new ::agricultural::robot::navigation::v1::NavigationProgress(*from.progress_);
  } else {
    progress_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_error()) {
    error_ = new ::agricultural::robot::navigation::v1::NavigationError(*from.error_);
  } else {
    error_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationStatusUpdate)
}

void NavigationStatusUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationStatusUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&progress_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&progress_)) + sizeof(status_));
}

NavigationStatusUpdate::~NavigationStatusUpdate() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationStatusUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete progress_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete error_;
}

void NavigationStatusUpdate::ArenaDtor(void* object) {
  NavigationStatusUpdate* _this = reinterpret_cast< NavigationStatusUpdate* >(object);
  (void)_this;
}
void NavigationStatusUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationStatusUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationStatusUpdate& NavigationStatusUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationStatusUpdate_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationStatusUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && error_ != nullptr) {
      delete error_;
    }
    error_ = nullptr;
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationStatusUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::agricultural::robot::navigation::v1::NavigationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationProgress progress = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_progress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.NavigationError error = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationStatusUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationStatusUpdate.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.NavigationStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .agricultural.robot.navigation.v1.NavigationProgress progress = 3;
  if (this->has_progress()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::progress(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.NavigationError error = 5;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  return target;
}

size_t NavigationStatusUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.NavigationProgress progress = 3;
  if (this->has_progress()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *progress_);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .agricultural.robot.navigation.v1.NavigationError error = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .agricultural.robot.navigation.v1.NavigationStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationStatusUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationStatusUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationStatusUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationStatusUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationStatusUpdate)
    MergeFrom(*source);
  }
}

void NavigationStatusUpdate::MergeFrom(const NavigationStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.has_progress()) {
    _internal_mutable_progress()->::agricultural::robot::navigation::v1::NavigationProgress::MergeFrom(from._internal_progress());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::agricultural::robot::navigation::v1::NavigationError::MergeFrom(from._internal_error());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void NavigationStatusUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationStatusUpdate::CopyFrom(const NavigationStatusUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationStatusUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationStatusUpdate::IsInitialized() const {
  return true;
}

void NavigationStatusUpdate::InternalSwap(NavigationStatusUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationStatusUpdate, status_)
      + sizeof(NavigationStatusUpdate::status_)
      - PROTOBUF_FIELD_OFFSET(NavigationStatusUpdate, progress_)>(
          reinterpret_cast<char*>(&progress_),
          reinterpret_cast<char*>(&other->progress_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationStatusUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationProgress::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_NavigationProgress_default_instance_._instance.get_mutable()->time_remaining_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::agricultural::robot::navigation::v1::_NavigationProgress_default_instance_._instance.get_mutable()->time_elapsed_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class NavigationProgress::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& time_remaining(const NavigationProgress* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& time_elapsed(const NavigationProgress* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
NavigationProgress::_Internal::time_remaining(const NavigationProgress* msg) {
  return *msg->time_remaining_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
NavigationProgress::_Internal::time_elapsed(const NavigationProgress* msg) {
  return *msg->time_elapsed_;
}
void NavigationProgress::clear_time_remaining() {
  if (GetArena() == nullptr && time_remaining_ != nullptr) {
    delete time_remaining_;
  }
  time_remaining_ = nullptr;
}
void NavigationProgress::clear_time_elapsed() {
  if (GetArena() == nullptr && time_elapsed_ != nullptr) {
    delete time_elapsed_;
  }
  time_elapsed_ = nullptr;
}
NavigationProgress::NavigationProgress(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationProgress)
}
NavigationProgress::NavigationProgress(const NavigationProgress& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time_remaining()) {
    time_remaining_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_remaining_);
  } else {
    time_remaining_ = nullptr;
  }
  if (from._internal_has_time_elapsed()) {
    time_elapsed_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.time_elapsed_);
  } else {
    time_elapsed_ = nullptr;
  }
  ::memcpy(&distance_remaining_, &from.distance_remaining_,
    static_cast<size_t>(reinterpret_cast<char*>(&completion_percentage_) -
    reinterpret_cast<char*>(&distance_remaining_)) + sizeof(completion_percentage_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationProgress)
}

void NavigationProgress::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&time_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completion_percentage_) -
      reinterpret_cast<char*>(&time_remaining_)) + sizeof(completion_percentage_));
}

NavigationProgress::~NavigationProgress() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationProgress)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationProgress::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_remaining_;
  if (this != internal_default_instance()) delete time_elapsed_;
}

void NavigationProgress::ArenaDtor(void* object) {
  NavigationProgress* _this = reinterpret_cast< NavigationProgress* >(object);
  (void)_this;
}
void NavigationProgress::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationProgress::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationProgress& NavigationProgress::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationProgress_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationProgress::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && time_remaining_ != nullptr) {
    delete time_remaining_;
  }
  time_remaining_ = nullptr;
  if (GetArena() == nullptr && time_elapsed_ != nullptr) {
    delete time_elapsed_;
  }
  time_elapsed_ = nullptr;
  ::memset(&distance_remaining_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&completion_percentage_) -
      reinterpret_cast<char*>(&distance_remaining_)) + sizeof(completion_percentage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationProgress::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double distance_remaining = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          distance_remaining_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double distance_traveled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          distance_traveled_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_remaining = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_remaining(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration time_elapsed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_elapsed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 current_waypoint_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          current_waypoint_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 total_waypoints = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          total_waypoints_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double completion_percentage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          completion_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationProgress::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationProgress)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double distance_remaining = 1;
  if (!(this->distance_remaining() <= 0 && this->distance_remaining() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_distance_remaining(), target);
  }

  // double distance_traveled = 2;
  if (!(this->distance_traveled() <= 0 && this->distance_traveled() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_distance_traveled(), target);
  }

  // .google.protobuf.Duration time_remaining = 3;
  if (this->has_time_remaining()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::time_remaining(this), target, stream);
  }

  // .google.protobuf.Duration time_elapsed = 4;
  if (this->has_time_elapsed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::time_elapsed(this), target, stream);
  }

  // uint32 current_waypoint_index = 5;
  if (this->current_waypoint_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_current_waypoint_index(), target);
  }

  // uint32 total_waypoints = 6;
  if (this->total_waypoints() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_total_waypoints(), target);
  }

  // double completion_percentage = 7;
  if (!(this->completion_percentage() <= 0 && this->completion_percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_completion_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationProgress)
  return target;
}

size_t NavigationProgress::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationProgress)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration time_remaining = 3;
  if (this->has_time_remaining()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_remaining_);
  }

  // .google.protobuf.Duration time_elapsed = 4;
  if (this->has_time_elapsed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_elapsed_);
  }

  // double distance_remaining = 1;
  if (!(this->distance_remaining() <= 0 && this->distance_remaining() >= 0)) {
    total_size += 1 + 8;
  }

  // double distance_traveled = 2;
  if (!(this->distance_traveled() <= 0 && this->distance_traveled() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 current_waypoint_index = 5;
  if (this->current_waypoint_index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current_waypoint_index());
  }

  // uint32 total_waypoints = 6;
  if (this->total_waypoints() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_total_waypoints());
  }

  // double completion_percentage = 7;
  if (!(this->completion_percentage() <= 0 && this->completion_percentage() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationProgress::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationProgress)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationProgress* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationProgress>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationProgress)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationProgress)
    MergeFrom(*source);
  }
}

void NavigationProgress::MergeFrom(const NavigationProgress& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationProgress)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time_remaining()) {
    _internal_mutable_time_remaining()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_remaining());
  }
  if (from.has_time_elapsed()) {
    _internal_mutable_time_elapsed()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_time_elapsed());
  }
  if (!(from.distance_remaining() <= 0 && from.distance_remaining() >= 0)) {
    _internal_set_distance_remaining(from._internal_distance_remaining());
  }
  if (!(from.distance_traveled() <= 0 && from.distance_traveled() >= 0)) {
    _internal_set_distance_traveled(from._internal_distance_traveled());
  }
  if (from.current_waypoint_index() != 0) {
    _internal_set_current_waypoint_index(from._internal_current_waypoint_index());
  }
  if (from.total_waypoints() != 0) {
    _internal_set_total_waypoints(from._internal_total_waypoints());
  }
  if (!(from.completion_percentage() <= 0 && from.completion_percentage() >= 0)) {
    _internal_set_completion_percentage(from._internal_completion_percentage());
  }
}

void NavigationProgress::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationProgress::CopyFrom(const NavigationProgress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationProgress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationProgress::IsInitialized() const {
  return true;
}

void NavigationProgress::InternalSwap(NavigationProgress* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationProgress, completion_percentage_)
      + sizeof(NavigationProgress::completion_percentage_)
      - PROTOBUF_FIELD_OFFSET(NavigationProgress, time_remaining_)>(
          reinterpret_cast<char*>(&time_remaining_),
          reinterpret_cast<char*>(&other->time_remaining_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationProgress::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NavigationError::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_NavigationError_default_instance_._instance.get_mutable()->occurred_at_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NavigationError::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& occurred_at(const NavigationError* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
NavigationError::_Internal::occurred_at(const NavigationError* msg) {
  return *msg->occurred_at_;
}
void NavigationError::clear_occurred_at() {
  if (GetArena() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
}
NavigationError::NavigationError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  suggested_actions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.NavigationError)
}
NavigationError::NavigationError(const NavigationError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      suggested_actions_(from.suggested_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_occurred_at()) {
    occurred_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.occurred_at_);
  } else {
    occurred_at_ = nullptr;
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&recoverable_) -
    reinterpret_cast<char*>(&code_)) + sizeof(recoverable_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.NavigationError)
}

void NavigationError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&occurred_at_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recoverable_) -
      reinterpret_cast<char*>(&occurred_at_)) + sizeof(recoverable_));
}

NavigationError::~NavigationError() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.NavigationError)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NavigationError::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete occurred_at_;
}

void NavigationError::ArenaDtor(void* object) {
  NavigationError* _this = reinterpret_cast< NavigationError* >(object);
  (void)_this;
}
void NavigationError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NavigationError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NavigationError& NavigationError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NavigationError_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void NavigationError::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.NavigationError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  suggested_actions_.Clear();
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && occurred_at_ != nullptr) {
    delete occurred_at_;
  }
  occurred_at_ = nullptr;
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recoverable_) -
      reinterpret_cast<char*>(&code_)) + sizeof(recoverable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NavigationError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.NavigationErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::agricultural::robot::navigation::v1::NavigationErrorCode>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationError.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp occurred_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_occurred_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool recoverable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          recoverable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string suggested_actions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_suggested_actions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.NavigationError.suggested_actions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NavigationError::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.NavigationError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.NavigationErrorCode code = 1;
  if (this->code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationError.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.Timestamp occurred_at = 3;
  if (this->has_occurred_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::occurred_at(this), target, stream);
  }

  // bool recoverable = 4;
  if (this->recoverable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_recoverable(), target);
  }

  // repeated string suggested_actions = 5;
  for (int i = 0, n = this->_internal_suggested_actions_size(); i < n; i++) {
    const auto& s = this->_internal_suggested_actions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.NavigationError.suggested_actions");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.NavigationError)
  return target;
}

size_t NavigationError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.NavigationError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string suggested_actions = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(suggested_actions_.size());
  for (int i = 0, n = suggested_actions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      suggested_actions_.Get(i));
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp occurred_at = 3;
  if (this->has_occurred_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *occurred_at_);
  }

  // .agricultural.robot.navigation.v1.NavigationErrorCode code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  // bool recoverable = 4;
  if (this->recoverable() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavigationError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.NavigationError)
  GOOGLE_DCHECK_NE(&from, this);
  const NavigationError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NavigationError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.NavigationError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.NavigationError)
    MergeFrom(*source);
  }
}

void NavigationError::MergeFrom(const NavigationError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.NavigationError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  suggested_actions_.MergeFrom(from.suggested_actions_);
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_occurred_at()) {
    _internal_mutable_occurred_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_occurred_at());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.recoverable() != 0) {
    _internal_set_recoverable(from._internal_recoverable());
  }
}

void NavigationError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.NavigationError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationError::CopyFrom(const NavigationError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.NavigationError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationError::IsInitialized() const {
  return true;
}

void NavigationError::InternalSwap(NavigationError* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  suggested_actions_.InternalSwap(&other->suggested_actions_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NavigationError, recoverable_)
      + sizeof(NavigationError::recoverable_)
      - PROTOBUF_FIELD_OFFSET(NavigationError, occurred_at_)>(
          reinterpret_cast<char*>(&occurred_at_),
          reinterpret_cast<char*>(&other->occurred_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NavigationError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCameraInfoRequest::InitAsDefaultInstance() {
}
class GetCameraInfoRequest::_Internal {
 public:
};

GetCameraInfoRequest::GetCameraInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.GetCameraInfoRequest)
}
GetCameraInfoRequest::GetCameraInfoRequest(const GetCameraInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_id().empty()) {
    camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.GetCameraInfoRequest)
}

void GetCameraInfoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCameraInfoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCameraInfoRequest::~GetCameraInfoRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCameraInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCameraInfoRequest::ArenaDtor(void* object) {
  GetCameraInfoRequest* _this = reinterpret_cast< GetCameraInfoRequest* >(object);
  (void)_this;
}
void GetCameraInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCameraInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCameraInfoRequest& GetCameraInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCameraInfoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void GetCameraInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCameraInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_camera_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCameraInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetCameraInfoRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string camera_id = 2;
  if (this->camera_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_id().data(), static_cast<int>(this->_internal_camera_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetCameraInfoRequest.camera_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  return target;
}

size_t GetCameraInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string camera_id = 2;
  if (this->camera_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCameraInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCameraInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCameraInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.GetCameraInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.GetCameraInfoRequest)
    MergeFrom(*source);
  }
}

void GetCameraInfoRequest::MergeFrom(const GetCameraInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.camera_id().size() > 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
}

void GetCameraInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCameraInfoRequest::CopyFrom(const GetCameraInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.GetCameraInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCameraInfoRequest::IsInitialized() const {
  return true;
}

void GetCameraInfoRequest::InternalSwap(GetCameraInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_id_.Swap(&other->camera_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCameraInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamVideoRequest::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_StreamVideoRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::agricultural::robot::navigation::v1::VideoStreamOptions*>(
      ::agricultural::robot::navigation::v1::VideoStreamOptions::internal_default_instance());
}
class StreamVideoRequest::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::VideoStreamOptions& options(const StreamVideoRequest* msg);
};

const ::agricultural::robot::navigation::v1::VideoStreamOptions&
StreamVideoRequest::_Internal::options(const StreamVideoRequest* msg) {
  return *msg->options_;
}
StreamVideoRequest::StreamVideoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.StreamVideoRequest)
}
StreamVideoRequest::StreamVideoRequest(const StreamVideoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_id().empty()) {
    camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_id(),
      GetArena());
  }
  if (from._internal_has_options()) {
    options_ = new ::agricultural::robot::navigation::v1::VideoStreamOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.StreamVideoRequest)
}

void StreamVideoRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamVideoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  options_ = nullptr;
}

StreamVideoRequest::~StreamVideoRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.StreamVideoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamVideoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void StreamVideoRequest::ArenaDtor(void* object) {
  StreamVideoRequest* _this = reinterpret_cast< StreamVideoRequest* >(object);
  (void)_this;
}
void StreamVideoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamVideoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamVideoRequest& StreamVideoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamVideoRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void StreamVideoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamVideoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.StreamVideoRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_camera_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.StreamVideoRequest.camera_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.VideoStreamOptions options = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamVideoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.StreamVideoRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string camera_id = 2;
  if (this->camera_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_id().data(), static_cast<int>(this->_internal_camera_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.StreamVideoRequest.camera_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_id(), target);
  }

  // .agricultural.robot.navigation.v1.VideoStreamOptions options = 3;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.StreamVideoRequest)
  return target;
}

size_t StreamVideoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string camera_id = 2;
  if (this->camera_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_id());
  }

  // .agricultural.robot.navigation.v1.VideoStreamOptions options = 3;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamVideoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamVideoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamVideoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.StreamVideoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.StreamVideoRequest)
    MergeFrom(*source);
  }
}

void StreamVideoRequest::MergeFrom(const StreamVideoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.camera_id().size() > 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.has_options()) {
    _internal_mutable_options()->::agricultural::robot::navigation::v1::VideoStreamOptions::MergeFrom(from._internal_options());
  }
}

void StreamVideoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamVideoRequest::CopyFrom(const StreamVideoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.StreamVideoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamVideoRequest::IsInitialized() const {
  return true;
}

void StreamVideoRequest::InternalSwap(StreamVideoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_id_.Swap(&other->camera_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(options_, other->options_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamVideoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraControlRequest::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_CameraControlRequest_default_instance_._instance.get_mutable()->command_ = const_cast< ::agricultural::robot::navigation::v1::CameraControlCommand*>(
      ::agricultural::robot::navigation::v1::CameraControlCommand::internal_default_instance());
}
class CameraControlRequest::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::CameraControlCommand& command(const CameraControlRequest* msg);
};

const ::agricultural::robot::navigation::v1::CameraControlCommand&
CameraControlRequest::_Internal::command(const CameraControlRequest* msg) {
  return *msg->command_;
}
CameraControlRequest::CameraControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraControlRequest)
}
CameraControlRequest::CameraControlRequest(const CameraControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_id().empty()) {
    camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_id(),
      GetArena());
  }
  if (from._internal_has_command()) {
    command_ = new ::agricultural::robot::navigation::v1::CameraControlCommand(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraControlRequest)
}

void CameraControlRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraControlRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_ = nullptr;
}

CameraControlRequest::~CameraControlRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraControlRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  camera_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete command_;
}

void CameraControlRequest::ArenaDtor(void* object) {
  CameraControlRequest* _this = reinterpret_cast< CameraControlRequest* >(object);
  (void)_this;
}
void CameraControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraControlRequest& CameraControlRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraControlRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraControlRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string camera_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_camera_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraControlRequest.camera_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.CameraControlCommand command = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraControlRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraControlRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraControlRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // string camera_id = 2;
  if (this->camera_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_id().data(), static_cast<int>(this->_internal_camera_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraControlRequest.camera_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_camera_id(), target);
  }

  // .agricultural.robot.navigation.v1.CameraControlCommand command = 3;
  if (this->has_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::command(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraControlRequest)
  return target;
}

size_t CameraControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraControlRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // string camera_id = 2;
  if (this->camera_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_id());
  }

  // .agricultural.robot.navigation.v1.CameraControlCommand command = 3;
  if (this->has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraControlRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraControlRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraControlRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraControlRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraControlRequest)
    MergeFrom(*source);
  }
}

void CameraControlRequest::MergeFrom(const CameraControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.camera_id().size() > 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.has_command()) {
    _internal_mutable_command()->::agricultural::robot::navigation::v1::CameraControlCommand::MergeFrom(from._internal_command());
  }
}

void CameraControlRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraControlRequest::CopyFrom(const CameraControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraControlRequest::IsInitialized() const {
  return true;
}

void CameraControlRequest::InternalSwap(CameraControlRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  camera_id_.Swap(&other->camera_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraControlRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraInfoResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_CameraInfoResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CameraInfoResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraInfoResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CameraInfoResponse::_Internal::timestamp(const CameraInfoResponse* msg) {
  return *msg->timestamp_;
}
void CameraInfoResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CameraInfoResponse::CameraInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cameras_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraInfoResponse)
}
CameraInfoResponse::CameraInfoResponse(const CameraInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cameras_(from.cameras_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraInfoResponse)
}

void CameraInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraInfoResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(success_));
}

CameraInfoResponse::~CameraInfoResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void CameraInfoResponse::ArenaDtor(void* object) {
  CameraInfoResponse* _this = reinterpret_cast< CameraInfoResponse* >(object);
  (void)_this;
}
void CameraInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraInfoResponse& CameraInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraInfoResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cameras_.Clear();
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraInfoResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.CameraInfo cameras = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cameras(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraInfoResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // repeated .agricultural.robot.navigation.v1.CameraInfo cameras = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cameras_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cameras(i), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraInfoResponse)
  return target;
}

size_t CameraInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.CameraInfo cameras = 3;
  total_size += 1UL * this->_internal_cameras_size();
  for (const auto& msg : this->cameras_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraInfoResponse)
    MergeFrom(*source);
  }
}

void CameraInfoResponse::MergeFrom(const CameraInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cameras_.MergeFrom(from.cameras_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CameraInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfoResponse::CopyFrom(const CameraInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfoResponse::IsInitialized() const {
  return true;
}

void CameraInfoResponse::InternalSwap(CameraInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  cameras_.InternalSwap(&other->cameras_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraInfoResponse, success_)
      + sizeof(CameraInfoResponse::success_)
      - PROTOBUF_FIELD_OFFSET(CameraInfoResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraInfo::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_CameraInfo_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::agricultural::robot::navigation::v1::Resolution*>(
      ::agricultural::robot::navigation::v1::Resolution::internal_default_instance());
  ::agricultural::robot::navigation::v1::_CameraInfo_default_instance_._instance.get_mutable()->intrinsics_ = const_cast< ::agricultural::robot::navigation::v1::CameraIntrinsics*>(
      ::agricultural::robot::navigation::v1::CameraIntrinsics::internal_default_instance());
  ::agricultural::robot::navigation::v1::_CameraInfo_default_instance_._instance.get_mutable()->distortion_ = const_cast< ::agricultural::robot::navigation::v1::CameraDistortion*>(
      ::agricultural::robot::navigation::v1::CameraDistortion::internal_default_instance());
}
class CameraInfo::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Resolution& resolution(const CameraInfo* msg);
  static const ::agricultural::robot::navigation::v1::CameraIntrinsics& intrinsics(const CameraInfo* msg);
  static const ::agricultural::robot::navigation::v1::CameraDistortion& distortion(const CameraInfo* msg);
};

const ::agricultural::robot::navigation::v1::Resolution&
CameraInfo::_Internal::resolution(const CameraInfo* msg) {
  return *msg->resolution_;
}
const ::agricultural::robot::navigation::v1::CameraIntrinsics&
CameraInfo::_Internal::intrinsics(const CameraInfo* msg) {
  return *msg->intrinsics_;
}
const ::agricultural::robot::navigation::v1::CameraDistortion&
CameraInfo::_Internal::distortion(const CameraInfo* msg) {
  return *msg->distortion_;
}
CameraInfo::CameraInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  supported_formats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraInfo)
}
CameraInfo::CameraInfo(const CameraInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_formats_(from.supported_formats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_id().empty()) {
    camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_frame_id(),
      GetArena());
  }
  if (from._internal_has_resolution()) {
    resolution_ = new ::agricultural::robot::navigation::v1::Resolution(*from.resolution_);
  } else {
    resolution_ = nullptr;
  }
  if (from._internal_has_intrinsics()) {
    intrinsics_ = new ::agricultural::robot::navigation::v1::CameraIntrinsics(*from.intrinsics_);
  } else {
    intrinsics_ = nullptr;
  }
  if (from._internal_has_distortion()) {
    distortion_ = new ::agricultural::robot::navigation::v1::CameraDistortion(*from.distortion_);
  } else {
    distortion_ = nullptr;
  }
  ::memcpy(&framerate_, &from.framerate_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&framerate_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraInfo)
}

void CameraInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(status_));
}

CameraInfo::~CameraInfo() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camera_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resolution_;
  if (this != internal_default_instance()) delete intrinsics_;
  if (this != internal_default_instance()) delete distortion_;
}

void CameraInfo::ArenaDtor(void* object) {
  CameraInfo* _this = reinterpret_cast< CameraInfo* >(object);
  (void)_this;
}
void CameraInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraInfo& CameraInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraInfo_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_formats_.Clear();
  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
  if (GetArena() == nullptr && intrinsics_ != nullptr) {
    delete intrinsics_;
  }
  intrinsics_ = nullptr;
  if (GetArena() == nullptr && distortion_ != nullptr) {
    delete distortion_;
  }
  distortion_ = nullptr;
  ::memset(&framerate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&framerate_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camera_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraInfo.camera_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.CameraType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::agricultural::robot::navigation::v1::CameraType>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Resolution resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double framerate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.CameraIntrinsics intrinsics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.CameraDistortion distortion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraInfo.frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.CameraStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::agricultural::robot::navigation::v1::CameraStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.VideoFormat supported_formats = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_supported_formats(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_supported_formats(static_cast<::agricultural::robot::navigation::v1::VideoFormat>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_id = 1;
  if (this->camera_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_id().data(), static_cast<int>(this->_internal_camera_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraInfo.camera_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .agricultural.robot.navigation.v1.CameraType type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // .agricultural.robot.navigation.v1.Resolution resolution = 4;
  if (this->has_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resolution(this), target, stream);
  }

  // double framerate = 5;
  if (!(this->framerate() <= 0 && this->framerate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_framerate(), target);
  }

  // .agricultural.robot.navigation.v1.CameraIntrinsics intrinsics = 6;
  if (this->has_intrinsics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::intrinsics(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.CameraDistortion distortion = 7;
  if (this->has_distortion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::distortion(this), target, stream);
  }

  // string frame_id = 8;
  if (this->frame_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraInfo.frame_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_frame_id(), target);
  }

  // .agricultural.robot.navigation.v1.CameraStatus status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // repeated .agricultural.robot.navigation.v1.VideoFormat supported_formats = 10;
  {
    int byte_size = _supported_formats_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          10, supported_formats_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraInfo)
  return target;
}

size_t CameraInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.VideoFormat supported_formats = 10;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_formats_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_supported_formats(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _supported_formats_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string camera_id = 1;
  if (this->camera_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string frame_id = 8;
  if (this->frame_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .agricultural.robot.navigation.v1.Resolution resolution = 4;
  if (this->has_resolution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolution_);
  }

  // .agricultural.robot.navigation.v1.CameraIntrinsics intrinsics = 6;
  if (this->has_intrinsics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsics_);
  }

  // .agricultural.robot.navigation.v1.CameraDistortion distortion = 7;
  if (this->has_distortion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distortion_);
  }

  // double framerate = 5;
  if (!(this->framerate() <= 0 && this->framerate() >= 0)) {
    total_size += 1 + 8;
  }

  // .agricultural.robot.navigation.v1.CameraType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .agricultural.robot.navigation.v1.CameraStatus status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraInfo)
    MergeFrom(*source);
  }
}

void CameraInfo::MergeFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_formats_.MergeFrom(from.supported_formats_);
  if (from.camera_id().size() > 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.frame_id().size() > 0) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from.has_resolution()) {
    _internal_mutable_resolution()->::agricultural::robot::navigation::v1::Resolution::MergeFrom(from._internal_resolution());
  }
  if (from.has_intrinsics()) {
    _internal_mutable_intrinsics()->::agricultural::robot::navigation::v1::CameraIntrinsics::MergeFrom(from._internal_intrinsics());
  }
  if (from.has_distortion()) {
    _internal_mutable_distortion()->::agricultural::robot::navigation::v1::CameraDistortion::MergeFrom(from._internal_distortion());
  }
  if (!(from.framerate() <= 0 && from.framerate() >= 0)) {
    _internal_set_framerate(from._internal_framerate());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CameraInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraInfo::CopyFrom(const CameraInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfo::IsInitialized() const {
  return true;
}

void CameraInfo::InternalSwap(CameraInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  supported_formats_.InternalSwap(&other->supported_formats_);
  camera_id_.Swap(&other->camera_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  frame_id_.Swap(&other->frame_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraInfo, status_)
      + sizeof(CameraInfo::status_)
      - PROTOBUF_FIELD_OFFSET(CameraInfo, resolution_)>(
          reinterpret_cast<char*>(&resolution_),
          reinterpret_cast<char*>(&other->resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoFrame::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_VideoFrame_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::agricultural::robot::navigation::v1::Resolution*>(
      ::agricultural::robot::navigation::v1::Resolution::internal_default_instance());
  ::agricultural::robot::navigation::v1::_VideoFrame_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::agricultural::robot::navigation::v1::_VideoFrame_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::agricultural::robot::navigation::v1::FrameMetadata*>(
      ::agricultural::robot::navigation::v1::FrameMetadata::internal_default_instance());
}
class VideoFrame::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Resolution& resolution(const VideoFrame* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const VideoFrame* msg);
  static const ::agricultural::robot::navigation::v1::FrameMetadata& metadata(const VideoFrame* msg);
};

const ::agricultural::robot::navigation::v1::Resolution&
VideoFrame::_Internal::resolution(const VideoFrame* msg) {
  return *msg->resolution_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
VideoFrame::_Internal::timestamp(const VideoFrame* msg) {
  return *msg->timestamp_;
}
const ::agricultural::robot::navigation::v1::FrameMetadata&
VideoFrame::_Internal::metadata(const VideoFrame* msg) {
  return *msg->metadata_;
}
void VideoFrame::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
VideoFrame::VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.VideoFrame)
}
VideoFrame::VideoFrame(const VideoFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_camera_id().empty()) {
    camera_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_camera_id(),
      GetArena());
  }
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_data().empty()) {
    image_data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_data(),
      GetArena());
  }
  if (from._internal_has_resolution()) {
    resolution_ = new ::agricultural::robot::navigation::v1::Resolution(*from.resolution_);
  } else {
    resolution_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::agricultural::robot::navigation::v1::FrameMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&frame_number_, &from.frame_number_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_) -
    reinterpret_cast<char*>(&frame_number_)) + sizeof(format_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.VideoFrame)
}

void VideoFrame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoFrame_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  camera_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(format_));
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.VideoFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  camera_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete resolution_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete metadata_;
}

void VideoFrame::ArenaDtor(void* object) {
  VideoFrame* _this = reinterpret_cast< VideoFrame* >(object);
  (void)_this;
}
void VideoFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFrame& VideoFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFrame_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&frame_number_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_) -
      reinterpret_cast<char*>(&frame_number_)) + sizeof(format_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string camera_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_camera_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.VideoFrame.camera_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.VideoFormat format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::agricultural::robot::navigation::v1::VideoFormat>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Resolution resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_number = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.FrameMetadata metadata = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string camera_id = 1;
  if (this->camera_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_camera_id().data(), static_cast<int>(this->_internal_camera_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.VideoFrame.camera_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_camera_id(), target);
  }

  // bytes image_data = 2;
  if (this->image_data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image_data(), target);
  }

  // .agricultural.robot.navigation.v1.VideoFormat format = 3;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_format(), target);
  }

  // .agricultural.robot.navigation.v1.Resolution resolution = 4;
  if (this->has_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resolution(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timestamp(this), target, stream);
  }

  // uint64 frame_number = 6;
  if (this->frame_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_frame_number(), target);
  }

  // .agricultural.robot.navigation.v1.FrameMetadata metadata = 7;
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.VideoFrame)
  return target;
}

size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.VideoFrame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string camera_id = 1;
  if (this->camera_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_camera_id());
  }

  // bytes image_data = 2;
  if (this->image_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_data());
  }

  // .agricultural.robot.navigation.v1.Resolution resolution = 4;
  if (this->has_resolution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolution_);
  }

  // .google.protobuf.Timestamp timestamp = 5;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .agricultural.robot.navigation.v1.FrameMetadata metadata = 7;
  if (this->has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // uint64 frame_number = 6;
  if (this->frame_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_frame_number());
  }

  // .agricultural.robot.navigation.v1.VideoFormat format = 3;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.VideoFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.VideoFrame)
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.camera_id().size() > 0) {
    _internal_set_camera_id(from._internal_camera_id());
  }
  if (from.image_data().size() > 0) {
    _internal_set_image_data(from._internal_image_data());
  }
  if (from.has_resolution()) {
    _internal_mutable_resolution()->::agricultural::robot::navigation::v1::Resolution::MergeFrom(from._internal_resolution());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::agricultural::robot::navigation::v1::FrameMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.frame_number() != 0) {
    _internal_set_frame_number(from._internal_frame_number());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
}

void VideoFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  return true;
}

void VideoFrame::InternalSwap(VideoFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_id_.Swap(&other->camera_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  image_data_.Swap(&other->image_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoFrame, format_)
      + sizeof(VideoFrame::format_)
      - PROTOBUF_FIELD_OFFSET(VideoFrame, resolution_)>(
          reinterpret_cast<char*>(&resolution_),
          reinterpret_cast<char*>(&other->resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoStreamOptions::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_VideoStreamOptions_default_instance_._instance.get_mutable()->resolution_ = const_cast< ::agricultural::robot::navigation::v1::Resolution*>(
      ::agricultural::robot::navigation::v1::Resolution::internal_default_instance());
}
class VideoStreamOptions::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::Resolution& resolution(const VideoStreamOptions* msg);
};

const ::agricultural::robot::navigation::v1::Resolution&
VideoStreamOptions::_Internal::resolution(const VideoStreamOptions* msg) {
  return *msg->resolution_;
}
VideoStreamOptions::VideoStreamOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  overlays_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.VideoStreamOptions)
}
VideoStreamOptions::VideoStreamOptions(const VideoStreamOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      overlays_(from.overlays_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_resolution()) {
    resolution_ = new ::agricultural::robot::navigation::v1::Resolution(*from.resolution_);
  } else {
    resolution_ = nullptr;
  }
  ::memcpy(&format_, &from.format_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_compression_) -
    reinterpret_cast<char*>(&format_)) + sizeof(enable_compression_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.VideoStreamOptions)
}

void VideoStreamOptions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_compression_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(enable_compression_));
}

VideoStreamOptions::~VideoStreamOptions() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.VideoStreamOptions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoStreamOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete resolution_;
}

void VideoStreamOptions::ArenaDtor(void* object) {
  VideoStreamOptions* _this = reinterpret_cast< VideoStreamOptions* >(object);
  (void)_this;
}
void VideoStreamOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoStreamOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoStreamOptions& VideoStreamOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoStreamOptions_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void VideoStreamOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overlays_.Clear();
  if (GetArena() == nullptr && resolution_ != nullptr) {
    delete resolution_;
  }
  resolution_ = nullptr;
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_compression_) -
      reinterpret_cast<char*>(&format_)) + sizeof(enable_compression_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoStreamOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.VideoFormat format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_format(static_cast<::agricultural::robot::navigation::v1::VideoFormat>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Resolution resolution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_resolution(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 framerate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          framerate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.VideoQuality quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_quality(static_cast<::agricultural::robot::navigation::v1::VideoQuality>(val));
        } else goto handle_unusual;
        continue;
      // bool enable_compression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          enable_compression_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .agricultural.robot.navigation.v1.OverlayType overlays = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_overlays(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_overlays(static_cast<::agricultural::robot::navigation::v1::OverlayType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoStreamOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.VideoFormat format = 1;
  if (this->format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_format(), target);
  }

  // .agricultural.robot.navigation.v1.Resolution resolution = 2;
  if (this->has_resolution()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::resolution(this), target, stream);
  }

  // uint32 framerate = 3;
  if (this->framerate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_framerate(), target);
  }

  // .agricultural.robot.navigation.v1.VideoQuality quality = 4;
  if (this->quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_quality(), target);
  }

  // bool enable_compression = 5;
  if (this->enable_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_enable_compression(), target);
  }

  // repeated .agricultural.robot.navigation.v1.OverlayType overlays = 6;
  {
    int byte_size = _overlays_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          6, overlays_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.VideoStreamOptions)
  return target;
}

size_t VideoStreamOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .agricultural.robot.navigation.v1.OverlayType overlays = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_overlays_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_overlays(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _overlays_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agricultural.robot.navigation.v1.Resolution resolution = 2;
  if (this->has_resolution()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resolution_);
  }

  // .agricultural.robot.navigation.v1.VideoFormat format = 1;
  if (this->format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_format());
  }

  // uint32 framerate = 3;
  if (this->framerate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_framerate());
  }

  // .agricultural.robot.navigation.v1.VideoQuality quality = 4;
  if (this->quality() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quality());
  }

  // bool enable_compression = 5;
  if (this->enable_compression() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoStreamOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoStreamOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoStreamOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.VideoStreamOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.VideoStreamOptions)
    MergeFrom(*source);
  }
}

void VideoStreamOptions::MergeFrom(const VideoStreamOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overlays_.MergeFrom(from.overlays_);
  if (from.has_resolution()) {
    _internal_mutable_resolution()->::agricultural::robot::navigation::v1::Resolution::MergeFrom(from._internal_resolution());
  }
  if (from.format() != 0) {
    _internal_set_format(from._internal_format());
  }
  if (from.framerate() != 0) {
    _internal_set_framerate(from._internal_framerate());
  }
  if (from.quality() != 0) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.enable_compression() != 0) {
    _internal_set_enable_compression(from._internal_enable_compression());
  }
}

void VideoStreamOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoStreamOptions::CopyFrom(const VideoStreamOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.VideoStreamOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoStreamOptions::IsInitialized() const {
  return true;
}

void VideoStreamOptions::InternalSwap(VideoStreamOptions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  overlays_.InternalSwap(&other->overlays_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoStreamOptions, enable_compression_)
      + sizeof(VideoStreamOptions::enable_compression_)
      - PROTOBUF_FIELD_OFFSET(VideoStreamOptions, resolution_)>(
          reinterpret_cast<char*>(&resolution_),
          reinterpret_cast<char*>(&other->resolution_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoStreamOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CameraControlCommand_ParametersEntry_DoNotUse::CameraControlCommand_ParametersEntry_DoNotUse() {}
CameraControlCommand_ParametersEntry_DoNotUse::CameraControlCommand_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CameraControlCommand_ParametersEntry_DoNotUse::MergeFrom(const CameraControlCommand_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CameraControlCommand_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CameraControlCommand_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CameraControlCommand::InitAsDefaultInstance() {
}
class CameraControlCommand::_Internal {
 public:
};

CameraControlCommand::CameraControlCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraControlCommand)
}
CameraControlCommand::CameraControlCommand(const CameraControlCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraControlCommand)
}

void CameraControlCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  type_ = 0;
}

CameraControlCommand::~CameraControlCommand() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraControlCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraControlCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraControlCommand::ArenaDtor(void* object) {
  CameraControlCommand* _this = reinterpret_cast< CameraControlCommand* >(object);
  (void)_this;
}
void CameraControlCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraControlCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraControlCommand& CameraControlCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraControlCommand_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraControlCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraControlCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.CameraControlType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::agricultural::robot::navigation::v1::CameraControlType>(val));
        } else goto handle_unusual;
        continue;
      // map<string, double> parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraControlCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraControlCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.CameraControlType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // map<string, double> parameters = 2;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agricultural.robot.navigation.v1.CameraControlCommand.ParametersEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CameraControlCommand_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = CameraControlCommand_ParametersEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraControlCommand)
  return target;
}

size_t CameraControlCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraControlCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> parameters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += CameraControlCommand_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .agricultural.robot.navigation.v1.CameraControlType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraControlCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraControlCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraControlCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraControlCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraControlCommand)
    MergeFrom(*source);
  }
}

void CameraControlCommand::MergeFrom(const CameraControlCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraControlCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CameraControlCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraControlCommand::CopyFrom(const CameraControlCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraControlCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraControlCommand::IsInitialized() const {
  return true;
}

void CameraControlCommand::InternalSwap(CameraControlCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parameters_.Swap(&other->parameters_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraControlCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CameraControlResponse_CurrentSettingsEntry_DoNotUse::CameraControlResponse_CurrentSettingsEntry_DoNotUse() {}
CameraControlResponse_CurrentSettingsEntry_DoNotUse::CameraControlResponse_CurrentSettingsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CameraControlResponse_CurrentSettingsEntry_DoNotUse::MergeFrom(const CameraControlResponse_CurrentSettingsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CameraControlResponse_CurrentSettingsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CameraControlResponse_CurrentSettingsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CameraControlResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_CameraControlResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class CameraControlResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const CameraControlResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CameraControlResponse::_Internal::timestamp(const CameraControlResponse* msg) {
  return *msg->timestamp_;
}
void CameraControlResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
CameraControlResponse::CameraControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  current_settings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraControlResponse)
}
CameraControlResponse::CameraControlResponse(const CameraControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  current_settings_.MergeFrom(from.current_settings_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraControlResponse)
}

void CameraControlResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CameraControlResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(success_));
}

CameraControlResponse::~CameraControlResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraControlResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void CameraControlResponse::ArenaDtor(void* object) {
  CameraControlResponse* _this = reinterpret_cast< CameraControlResponse* >(object);
  (void)_this;
}
void CameraControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraControlResponse& CameraControlResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraControlResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_settings_.Clear();
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.CameraControlResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, double> current_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&current_settings_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraControlResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraControlResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.CameraControlResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // map<string, double> current_settings = 3;
  if (!this->_internal_current_settings().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agricultural.robot.navigation.v1.CameraControlResponse.CurrentSettingsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_current_settings().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_current_settings().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_current_settings().begin();
          it != this->_internal_current_settings().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CameraControlResponse_CurrentSettingsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
          it = this->_internal_current_settings().begin();
          it != this->_internal_current_settings().end(); ++it) {
        target = CameraControlResponse_CurrentSettingsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraControlResponse)
  return target;
}

size_t CameraControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraControlResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, double> current_settings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_current_settings_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, double >::const_iterator
      it = this->_internal_current_settings().begin();
      it != this->_internal_current_settings().end(); ++it) {
    total_size += CameraControlResponse_CurrentSettingsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraControlResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraControlResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraControlResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraControlResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraControlResponse)
    MergeFrom(*source);
  }
}

void CameraControlResponse::MergeFrom(const CameraControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  current_settings_.MergeFrom(from.current_settings_);
  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void CameraControlResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraControlResponse::CopyFrom(const CameraControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraControlResponse::IsInitialized() const {
  return true;
}

void CameraControlResponse::InternalSwap(CameraControlResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  current_settings_.Swap(&other->current_settings_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraControlResponse, success_)
      + sizeof(CameraControlResponse::success_)
      - PROTOBUF_FIELD_OFFSET(CameraControlResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraControlResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Resolution::InitAsDefaultInstance() {
}
class Resolution::_Internal {
 public:
};

Resolution::Resolution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.Resolution)
}
Resolution::Resolution(const Resolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.Resolution)
}

void Resolution::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Resolution::~Resolution() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.Resolution)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Resolution::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Resolution::ArenaDtor(void* object) {
  Resolution* _this = reinterpret_cast< Resolution* >(object);
  (void)_this;
}
void Resolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Resolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Resolution& Resolution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Resolution_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void Resolution::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.Resolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Resolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Resolution::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.Resolution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.Resolution)
  return target;
}

size_t Resolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.Resolution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Resolution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  const Resolution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Resolution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.Resolution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.Resolution)
    MergeFrom(*source);
  }
}

void Resolution::MergeFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.Resolution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Resolution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Resolution::CopyFrom(const Resolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.Resolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Resolution::IsInitialized() const {
  return true;
}

void Resolution::InternalSwap(Resolution* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Resolution, height_)
      + sizeof(Resolution::height_)
      - PROTOBUF_FIELD_OFFSET(Resolution, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Resolution::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraIntrinsics::InitAsDefaultInstance() {
}
class CameraIntrinsics::_Internal {
 public:
};

CameraIntrinsics::CameraIntrinsics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_matrix_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraIntrinsics)
}
CameraIntrinsics::CameraIntrinsics(const CameraIntrinsics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      camera_matrix_(from.camera_matrix_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&focal_length_x_, &from.focal_length_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&principal_point_y_) -
    reinterpret_cast<char*>(&focal_length_x_)) + sizeof(principal_point_y_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraIntrinsics)
}

void CameraIntrinsics::SharedCtor() {
  ::memset(&focal_length_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&principal_point_y_) -
      reinterpret_cast<char*>(&focal_length_x_)) + sizeof(principal_point_y_));
}

CameraIntrinsics::~CameraIntrinsics() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraIntrinsics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraIntrinsics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraIntrinsics::ArenaDtor(void* object) {
  CameraIntrinsics* _this = reinterpret_cast< CameraIntrinsics* >(object);
  (void)_this;
}
void CameraIntrinsics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraIntrinsics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraIntrinsics& CameraIntrinsics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraIntrinsics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraIntrinsics::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_matrix_.Clear();
  ::memset(&focal_length_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&principal_point_y_) -
      reinterpret_cast<char*>(&focal_length_x_)) + sizeof(principal_point_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraIntrinsics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double focal_length_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          focal_length_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double focal_length_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          focal_length_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double principal_point_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          principal_point_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double principal_point_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          principal_point_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated double camera_matrix = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_camera_matrix(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41) {
          _internal_add_camera_matrix(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraIntrinsics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double focal_length_x = 1;
  if (!(this->focal_length_x() <= 0 && this->focal_length_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_focal_length_x(), target);
  }

  // double focal_length_y = 2;
  if (!(this->focal_length_y() <= 0 && this->focal_length_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_focal_length_y(), target);
  }

  // double principal_point_x = 3;
  if (!(this->principal_point_x() <= 0 && this->principal_point_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_principal_point_x(), target);
  }

  // double principal_point_y = 4;
  if (!(this->principal_point_y() <= 0 && this->principal_point_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_principal_point_y(), target);
  }

  // repeated double camera_matrix = 5;
  if (this->_internal_camera_matrix_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_camera_matrix(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraIntrinsics)
  return target;
}

size_t CameraIntrinsics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double camera_matrix = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_camera_matrix_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _camera_matrix_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double focal_length_x = 1;
  if (!(this->focal_length_x() <= 0 && this->focal_length_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double focal_length_y = 2;
  if (!(this->focal_length_y() <= 0 && this->focal_length_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double principal_point_x = 3;
  if (!(this->principal_point_x() <= 0 && this->principal_point_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double principal_point_y = 4;
  if (!(this->principal_point_y() <= 0 && this->principal_point_y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraIntrinsics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraIntrinsics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraIntrinsics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraIntrinsics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraIntrinsics)
    MergeFrom(*source);
  }
}

void CameraIntrinsics::MergeFrom(const CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_matrix_.MergeFrom(from.camera_matrix_);
  if (!(from.focal_length_x() <= 0 && from.focal_length_x() >= 0)) {
    _internal_set_focal_length_x(from._internal_focal_length_x());
  }
  if (!(from.focal_length_y() <= 0 && from.focal_length_y() >= 0)) {
    _internal_set_focal_length_y(from._internal_focal_length_y());
  }
  if (!(from.principal_point_x() <= 0 && from.principal_point_x() >= 0)) {
    _internal_set_principal_point_x(from._internal_principal_point_x());
  }
  if (!(from.principal_point_y() <= 0 && from.principal_point_y() >= 0)) {
    _internal_set_principal_point_y(from._internal_principal_point_y());
  }
}

void CameraIntrinsics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraIntrinsics::CopyFrom(const CameraIntrinsics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraIntrinsics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraIntrinsics::IsInitialized() const {
  return true;
}

void CameraIntrinsics::InternalSwap(CameraIntrinsics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_matrix_.InternalSwap(&other->camera_matrix_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraIntrinsics, principal_point_y_)
      + sizeof(CameraIntrinsics::principal_point_y_)
      - PROTOBUF_FIELD_OFFSET(CameraIntrinsics, focal_length_x_)>(
          reinterpret_cast<char*>(&focal_length_x_),
          reinterpret_cast<char*>(&other->focal_length_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraIntrinsics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CameraDistortion::InitAsDefaultInstance() {
}
class CameraDistortion::_Internal {
 public:
};

CameraDistortion::CameraDistortion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  coefficients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.CameraDistortion)
}
CameraDistortion::CameraDistortion(const CameraDistortion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      coefficients_(from.coefficients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_ = from.model_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.CameraDistortion)
}

void CameraDistortion::SharedCtor() {
  model_ = 0;
}

CameraDistortion::~CameraDistortion() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.CameraDistortion)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraDistortion::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraDistortion::ArenaDtor(void* object) {
  CameraDistortion* _this = reinterpret_cast< CameraDistortion* >(object);
  (void)_this;
}
void CameraDistortion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraDistortion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CameraDistortion& CameraDistortion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CameraDistortion_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void CameraDistortion::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.CameraDistortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  coefficients_.Clear();
  model_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDistortion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.DistortionModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_model(static_cast<::agricultural::robot::navigation::v1::DistortionModel>(val));
        } else goto handle_unusual;
        continue;
      // repeated double coefficients = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_coefficients(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_coefficients(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDistortion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.CameraDistortion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.DistortionModel model = 1;
  if (this->model() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_model(), target);
  }

  // repeated double coefficients = 2;
  if (this->_internal_coefficients_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_coefficients(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.CameraDistortion)
  return target;
}

size_t CameraDistortion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.CameraDistortion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double coefficients = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_coefficients_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _coefficients_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .agricultural.robot.navigation.v1.DistortionModel model = 1;
  if (this->model() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_model());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDistortion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.CameraDistortion)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDistortion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDistortion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.CameraDistortion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.CameraDistortion)
    MergeFrom(*source);
  }
}

void CameraDistortion::MergeFrom(const CameraDistortion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.CameraDistortion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  coefficients_.MergeFrom(from.coefficients_);
  if (from.model() != 0) {
    _internal_set_model(from._internal_model());
  }
}

void CameraDistortion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.CameraDistortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDistortion::CopyFrom(const CameraDistortion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.CameraDistortion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDistortion::IsInitialized() const {
  return true;
}

void CameraDistortion::InternalSwap(CameraDistortion* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  coefficients_.InternalSwap(&other->coefficients_);
  swap(model_, other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDistortion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FrameMetadata::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_FrameMetadata_default_instance_._instance.get_mutable()->capture_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::agricultural::robot::navigation::v1::_FrameMetadata_default_instance_._instance.get_mutable()->camera_pose_ = const_cast< ::agricultural::robot::navigation::v1::Pose*>(
      ::agricultural::robot::navigation::v1::Pose::internal_default_instance());
}
class FrameMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<FrameMetadata>()._has_bits_);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& capture_time(const FrameMetadata* msg);
  static const ::agricultural::robot::navigation::v1::Pose& camera_pose(const FrameMetadata* msg);
  static void set_has_camera_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
FrameMetadata::_Internal::capture_time(const FrameMetadata* msg) {
  return *msg->capture_time_;
}
const ::agricultural::robot::navigation::v1::Pose&
FrameMetadata::_Internal::camera_pose(const FrameMetadata* msg) {
  return *msg->camera_pose_;
}
void FrameMetadata::clear_capture_time() {
  if (GetArena() == nullptr && capture_time_ != nullptr) {
    delete capture_time_;
  }
  capture_time_ = nullptr;
}
FrameMetadata::FrameMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.FrameMetadata)
}
FrameMetadata::FrameMetadata(const FrameMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_capture_time()) {
    capture_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.capture_time_);
  } else {
    capture_time_ = nullptr;
  }
  if (from._internal_has_camera_pose()) {
    camera_pose_ = new ::agricultural::robot::navigation::v1::Pose(*from.camera_pose_);
  } else {
    camera_pose_ = nullptr;
  }
  ::memcpy(&exposure_time_, &from.exposure_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&white_balance_) -
    reinterpret_cast<char*>(&exposure_time_)) + sizeof(white_balance_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.FrameMetadata)
}

void FrameMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&capture_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&white_balance_) -
      reinterpret_cast<char*>(&capture_time_)) + sizeof(white_balance_));
}

FrameMetadata::~FrameMetadata() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.FrameMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FrameMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete capture_time_;
  if (this != internal_default_instance()) delete camera_pose_;
}

void FrameMetadata::ArenaDtor(void* object) {
  FrameMetadata* _this = reinterpret_cast< FrameMetadata* >(object);
  (void)_this;
}
void FrameMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FrameMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FrameMetadata& FrameMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FrameMetadata_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void FrameMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.FrameMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && capture_time_ != nullptr) {
    delete capture_time_;
  }
  capture_time_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && camera_pose_ != nullptr) {
      delete camera_pose_;
    }
    camera_pose_ = nullptr;
  }
  ::memset(&exposure_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&white_balance_) -
      reinterpret_cast<char*>(&exposure_time_)) + sizeof(white_balance_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FrameMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double exposure_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          exposure_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double gain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          gain_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double white_balance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          white_balance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp capture_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_capture_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.Pose camera_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FrameMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.FrameMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double exposure_time = 1;
  if (!(this->exposure_time() <= 0 && this->exposure_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_exposure_time(), target);
  }

  // double gain = 2;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_gain(), target);
  }

  // double white_balance = 3;
  if (!(this->white_balance() <= 0 && this->white_balance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_white_balance(), target);
  }

  // .google.protobuf.Timestamp capture_time = 4;
  if (this->has_capture_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::capture_time(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.Pose camera_pose = 5;
  if (_internal_has_camera_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::camera_pose(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.FrameMetadata)
  return target;
}

size_t FrameMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.FrameMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp capture_time = 4;
  if (this->has_capture_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *capture_time_);
  }

  // .agricultural.robot.navigation.v1.Pose camera_pose = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *camera_pose_);
  }

  // double exposure_time = 1;
  if (!(this->exposure_time() <= 0 && this->exposure_time() >= 0)) {
    total_size += 1 + 8;
  }

  // double gain = 2;
  if (!(this->gain() <= 0 && this->gain() >= 0)) {
    total_size += 1 + 8;
  }

  // double white_balance = 3;
  if (!(this->white_balance() <= 0 && this->white_balance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FrameMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.FrameMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FrameMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.FrameMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.FrameMetadata)
    MergeFrom(*source);
  }
}

void FrameMetadata::MergeFrom(const FrameMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.FrameMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_capture_time()) {
    _internal_mutable_capture_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_capture_time());
  }
  if (from._internal_has_camera_pose()) {
    _internal_mutable_camera_pose()->::agricultural::robot::navigation::v1::Pose::MergeFrom(from._internal_camera_pose());
  }
  if (!(from.exposure_time() <= 0 && from.exposure_time() >= 0)) {
    _internal_set_exposure_time(from._internal_exposure_time());
  }
  if (!(from.gain() <= 0 && from.gain() >= 0)) {
    _internal_set_gain(from._internal_gain());
  }
  if (!(from.white_balance() <= 0 && from.white_balance() >= 0)) {
    _internal_set_white_balance(from._internal_white_balance());
  }
}

void FrameMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.FrameMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameMetadata::CopyFrom(const FrameMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.FrameMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameMetadata::IsInitialized() const {
  return true;
}

void FrameMetadata::InternalSwap(FrameMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FrameMetadata, white_balance_)
      + sizeof(FrameMetadata::white_balance_)
      - PROTOBUF_FIELD_OFFSET(FrameMetadata, capture_time_)>(
          reinterpret_cast<char*>(&capture_time_),
          reinterpret_cast<char*>(&other->capture_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FrameMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetLocalizationStatusRequest::InitAsDefaultInstance() {
}
class GetLocalizationStatusRequest::_Internal {
 public:
};

GetLocalizationStatusRequest::GetLocalizationStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
}
GetLocalizationStatusRequest::GetLocalizationStatusRequest(const GetLocalizationStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
}

void GetLocalizationStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetLocalizationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetLocalizationStatusRequest::~GetLocalizationStatusRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetLocalizationStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetLocalizationStatusRequest::ArenaDtor(void* object) {
  GetLocalizationStatusRequest* _this = reinterpret_cast< GetLocalizationStatusRequest* >(object);
  (void)_this;
}
void GetLocalizationStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetLocalizationStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetLocalizationStatusRequest& GetLocalizationStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetLocalizationStatusRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void GetLocalizationStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetLocalizationStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetLocalizationStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.GetLocalizationStatusRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  return target;
}

size_t GetLocalizationStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetLocalizationStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetLocalizationStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetLocalizationStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
    MergeFrom(*source);
  }
}

void GetLocalizationStatusRequest::MergeFrom(const GetLocalizationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
}

void GetLocalizationStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLocalizationStatusRequest::CopyFrom(const GetLocalizationStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.GetLocalizationStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLocalizationStatusRequest::IsInitialized() const {
  return true;
}

void GetLocalizationStatusRequest::InternalSwap(GetLocalizationStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetLocalizationStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

InitializeLocalizationRequest_ParametersEntry_DoNotUse::InitializeLocalizationRequest_ParametersEntry_DoNotUse() {}
InitializeLocalizationRequest_ParametersEntry_DoNotUse::InitializeLocalizationRequest_ParametersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InitializeLocalizationRequest_ParametersEntry_DoNotUse::MergeFrom(const InitializeLocalizationRequest_ParametersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InitializeLocalizationRequest_ParametersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void InitializeLocalizationRequest_ParametersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void InitializeLocalizationRequest::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_InitializeLocalizationRequest_default_instance_._instance.get_mutable()->initial_pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
}
class InitializeLocalizationRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<InitializeLocalizationRequest>()._has_bits_);
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& initial_pose(const InitializeLocalizationRequest* msg);
  static void set_has_initial_pose(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::agricultural::robot::navigation::v1::PoseWithCovariance&
InitializeLocalizationRequest::_Internal::initial_pose(const InitializeLocalizationRequest* msg) {
  return *msg->initial_pose_;
}
InitializeLocalizationRequest::InitializeLocalizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
}
InitializeLocalizationRequest::InitializeLocalizationRequest(const InitializeLocalizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameters_.MergeFrom(from.parameters_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  if (from._internal_has_initial_pose()) {
    initial_pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.initial_pose_);
  } else {
    initial_pose_ = nullptr;
  }
  method_ = from.method_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
}

void InitializeLocalizationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitializeLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&initial_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&initial_pose_)) + sizeof(method_));
}

InitializeLocalizationRequest::~InitializeLocalizationRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitializeLocalizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete initial_pose_;
}

void InitializeLocalizationRequest::ArenaDtor(void* object) {
  InitializeLocalizationRequest* _this = reinterpret_cast< InitializeLocalizationRequest* >(object);
  (void)_this;
}
void InitializeLocalizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitializeLocalizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitializeLocalizationRequest& InitializeLocalizationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitializeLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void InitializeLocalizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    if (GetArena() == nullptr && initial_pose_ != nullptr) {
      delete initial_pose_;
    }
    initial_pose_ = nullptr;
  }
  method_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitializeLocalizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance initial_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_initial_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationMethod method = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::agricultural::robot::navigation::v1::LocalizationMethod>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> parameters = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameters_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitializeLocalizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.InitializeLocalizationRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance initial_pose = 2;
  if (_internal_has_initial_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::initial_pose(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.LocalizationMethod method = 3;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_method(), target);
  }

  // map<string, string> parameters = 4;
  if (!this->_internal_parameters().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agricultural.robot.navigation.v1.InitializeLocalizationRequest.ParametersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "agricultural.robot.navigation.v1.InitializeLocalizationRequest.ParametersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameters().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameters().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = InitializeLocalizationRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameters().begin();
          it != this->_internal_parameters().end(); ++it) {
        target = InitializeLocalizationRequest_ParametersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  return target;
}

size_t InitializeLocalizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameters = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameters_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameters().begin();
      it != this->_internal_parameters().end(); ++it) {
    total_size += InitializeLocalizationRequest_ParametersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance initial_pose = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initial_pose_);
  }

  // .agricultural.robot.navigation.v1.LocalizationMethod method = 3;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitializeLocalizationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitializeLocalizationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitializeLocalizationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
    MergeFrom(*source);
  }
}

void InitializeLocalizationRequest::MergeFrom(const InitializeLocalizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from._internal_has_initial_pose()) {
    _internal_mutable_initial_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_initial_pose());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
}

void InitializeLocalizationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitializeLocalizationRequest::CopyFrom(const InitializeLocalizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.InitializeLocalizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitializeLocalizationRequest::IsInitialized() const {
  return true;
}

void InitializeLocalizationRequest::InternalSwap(InitializeLocalizationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  parameters_.Swap(&other->parameters_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitializeLocalizationRequest, method_)
      + sizeof(InitializeLocalizationRequest::method_)
      - PROTOBUF_FIELD_OFFSET(InitializeLocalizationRequest, initial_pose_)>(
          reinterpret_cast<char*>(&initial_pose_),
          reinterpret_cast<char*>(&other->initial_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitializeLocalizationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetLocalizationRequest::InitAsDefaultInstance() {
}
class ResetLocalizationRequest::_Internal {
 public:
};

ResetLocalizationRequest::ResetLocalizationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.ResetLocalizationRequest)
}
ResetLocalizationRequest::ResetLocalizationRequest(const ResetLocalizationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_robot_id().empty()) {
    robot_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_robot_id(),
      GetArena());
  }
  clear_map_ = from.clear_map_;
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.ResetLocalizationRequest)
}

void ResetLocalizationRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_map_ = false;
}

ResetLocalizationRequest::~ResetLocalizationRequest() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetLocalizationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  robot_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetLocalizationRequest::ArenaDtor(void* object) {
  ResetLocalizationRequest* _this = reinterpret_cast< ResetLocalizationRequest* >(object);
  (void)_this;
}
void ResetLocalizationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetLocalizationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetLocalizationRequest& ResetLocalizationRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetLocalizationRequest_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void ResetLocalizationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_map_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetLocalizationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_robot_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool clear_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          clear_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetLocalizationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_robot_id().data(), static_cast<int>(this->_internal_robot_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.ResetLocalizationRequest.robot_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_robot_id(), target);
  }

  // bool clear_map = 2;
  if (this->clear_map() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_clear_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  return target;
}

size_t ResetLocalizationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string robot_id = 1;
  if (this->robot_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_robot_id());
  }

  // bool clear_map = 2;
  if (this->clear_map() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetLocalizationRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetLocalizationRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetLocalizationRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.ResetLocalizationRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.ResetLocalizationRequest)
    MergeFrom(*source);
  }
}

void ResetLocalizationRequest::MergeFrom(const ResetLocalizationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_id().size() > 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.clear_map() != 0) {
    _internal_set_clear_map(from._internal_clear_map());
  }
}

void ResetLocalizationRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetLocalizationRequest::CopyFrom(const ResetLocalizationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.ResetLocalizationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetLocalizationRequest::IsInitialized() const {
  return true;
}

void ResetLocalizationRequest::InternalSwap(ResetLocalizationRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robot_id_.Swap(&other->robot_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(clear_map_, other->clear_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetLocalizationRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalizationStatusResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_LocalizationStatusResponse_default_instance_._instance.get_mutable()->quality_ = const_cast< ::agricultural::robot::navigation::v1::LocalizationQuality*>(
      ::agricultural::robot::navigation::v1::LocalizationQuality::internal_default_instance());
  ::agricultural::robot::navigation::v1::_LocalizationStatusResponse_default_instance_._instance.get_mutable()->current_pose_ = const_cast< ::agricultural::robot::navigation::v1::PoseWithCovariance*>(
      ::agricultural::robot::navigation::v1::PoseWithCovariance::internal_default_instance());
  ::agricultural::robot::navigation::v1::_LocalizationStatusResponse_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::agricultural::robot::navigation::v1::LocalizationMetrics*>(
      ::agricultural::robot::navigation::v1::LocalizationMetrics::internal_default_instance());
  ::agricultural::robot::navigation::v1::_LocalizationStatusResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LocalizationStatusResponse::_Internal {
 public:
  static const ::agricultural::robot::navigation::v1::LocalizationQuality& quality(const LocalizationStatusResponse* msg);
  static const ::agricultural::robot::navigation::v1::PoseWithCovariance& current_pose(const LocalizationStatusResponse* msg);
  static const ::agricultural::robot::navigation::v1::LocalizationMetrics& metrics(const LocalizationStatusResponse* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LocalizationStatusResponse* msg);
};

const ::agricultural::robot::navigation::v1::LocalizationQuality&
LocalizationStatusResponse::_Internal::quality(const LocalizationStatusResponse* msg) {
  return *msg->quality_;
}
const ::agricultural::robot::navigation::v1::PoseWithCovariance&
LocalizationStatusResponse::_Internal::current_pose(const LocalizationStatusResponse* msg) {
  return *msg->current_pose_;
}
const ::agricultural::robot::navigation::v1::LocalizationMetrics&
LocalizationStatusResponse::_Internal::metrics(const LocalizationStatusResponse* msg) {
  return *msg->metrics_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LocalizationStatusResponse::_Internal::timestamp(const LocalizationStatusResponse* msg) {
  return *msg->timestamp_;
}
void LocalizationStatusResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LocalizationStatusResponse::LocalizationStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.LocalizationStatusResponse)
}
LocalizationStatusResponse::LocalizationStatusResponse(const LocalizationStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quality()) {
    quality_ = new ::agricultural::robot::navigation::v1::LocalizationQuality(*from.quality_);
  } else {
    quality_ = nullptr;
  }
  if (from._internal_has_current_pose()) {
    current_pose_ = new ::agricultural::robot::navigation::v1::PoseWithCovariance(*from.current_pose_);
  } else {
    current_pose_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::agricultural::robot::navigation::v1::LocalizationMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&method_) -
    reinterpret_cast<char*>(&status_)) + sizeof(method_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.LocalizationStatusResponse)
}

void LocalizationStatusResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&quality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&quality_)) + sizeof(method_));
}

LocalizationStatusResponse::~LocalizationStatusResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete quality_;
  if (this != internal_default_instance()) delete current_pose_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete timestamp_;
}

void LocalizationStatusResponse::ArenaDtor(void* object) {
  LocalizationStatusResponse* _this = reinterpret_cast< LocalizationStatusResponse* >(object);
  (void)_this;
}
void LocalizationStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationStatusResponse& LocalizationStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationStatusResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void LocalizationStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && quality_ != nullptr) {
    delete quality_;
  }
  quality_ = nullptr;
  if (GetArena() == nullptr && current_pose_ != nullptr) {
    delete current_pose_;
  }
  current_pose_ = nullptr;
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&method_) -
      reinterpret_cast<char*>(&status_)) + sizeof(method_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .agricultural.robot.navigation.v1.LocalizationStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::agricultural::robot::navigation::v1::LocalizationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationQuality quality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quality(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.PoseWithCovariance current_pose = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationMethod method = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_method(static_cast<::agricultural::robot::navigation::v1::LocalizationMethod>(val));
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationMetrics metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.LocalizationStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // .agricultural.robot.navigation.v1.LocalizationQuality quality = 2;
  if (this->has_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::quality(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance current_pose = 3;
  if (this->has_current_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::current_pose(this), target, stream);
  }

  // .agricultural.robot.navigation.v1.LocalizationMethod method = 4;
  if (this->method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_method(), target);
  }

  // .agricultural.robot.navigation.v1.LocalizationMetrics metrics = 5;
  if (this->has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metrics(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  return target;
}

size_t LocalizationStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .agricultural.robot.navigation.v1.LocalizationQuality quality = 2;
  if (this->has_quality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quality_);
  }

  // .agricultural.robot.navigation.v1.PoseWithCovariance current_pose = 3;
  if (this->has_current_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *current_pose_);
  }

  // .agricultural.robot.navigation.v1.LocalizationMetrics metrics = 5;
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .google.protobuf.Timestamp timestamp = 6;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .agricultural.robot.navigation.v1.LocalizationStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .agricultural.robot.navigation.v1.LocalizationMethod method = 4;
  if (this->method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_method());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.LocalizationStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.LocalizationStatusResponse)
    MergeFrom(*source);
  }
}

void LocalizationStatusResponse::MergeFrom(const LocalizationStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_quality()) {
    _internal_mutable_quality()->::agricultural::robot::navigation::v1::LocalizationQuality::MergeFrom(from._internal_quality());
  }
  if (from.has_current_pose()) {
    _internal_mutable_current_pose()->::agricultural::robot::navigation::v1::PoseWithCovariance::MergeFrom(from._internal_current_pose());
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::agricultural::robot::navigation::v1::LocalizationMetrics::MergeFrom(from._internal_metrics());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.method() != 0) {
    _internal_set_method(from._internal_method());
  }
}

void LocalizationStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationStatusResponse::CopyFrom(const LocalizationStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.LocalizationStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationStatusResponse::IsInitialized() const {
  return true;
}

void LocalizationStatusResponse::InternalSwap(LocalizationStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationStatusResponse, method_)
      + sizeof(LocalizationStatusResponse::method_)
      - PROTOBUF_FIELD_OFFSET(LocalizationStatusResponse, quality_)>(
          reinterpret_cast<char*>(&quality_),
          reinterpret_cast<char*>(&other->quality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalizationResponse::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_LocalizationResponse_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LocalizationResponse::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LocalizationResponse* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LocalizationResponse::_Internal::timestamp(const LocalizationResponse* msg) {
  return *msg->timestamp_;
}
void LocalizationResponse::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
LocalizationResponse::LocalizationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.LocalizationResponse)
}
LocalizationResponse::LocalizationResponse(const LocalizationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&success_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.LocalizationResponse)
}

void LocalizationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(status_));
}

LocalizationResponse::~LocalizationResponse() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.LocalizationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
}

void LocalizationResponse::ArenaDtor(void* object) {
  LocalizationResponse* _this = reinterpret_cast< LocalizationResponse* >(object);
  (void)_this;
}
void LocalizationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationResponse& LocalizationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationResponse_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void LocalizationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.LocalizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&success_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "agricultural.robot.navigation.v1.LocalizationResponse.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::agricultural::robot::navigation::v1::LocalizationStatus>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.LocalizationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "agricultural.robot.navigation.v1.LocalizationResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // .agricultural.robot.navigation.v1.LocalizationStatus status = 3;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.LocalizationResponse)
  return target;
}

size_t LocalizationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.LocalizationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .google.protobuf.Timestamp timestamp = 4;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // .agricultural.robot.navigation.v1.LocalizationStatus status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.LocalizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.LocalizationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.LocalizationResponse)
    MergeFrom(*source);
  }
}

void LocalizationResponse::MergeFrom(const LocalizationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.LocalizationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LocalizationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.LocalizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationResponse::CopyFrom(const LocalizationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.LocalizationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationResponse::IsInitialized() const {
  return true;
}

void LocalizationResponse::InternalSwap(LocalizationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationResponse, status_)
      + sizeof(LocalizationResponse::status_)
      - PROTOBUF_FIELD_OFFSET(LocalizationResponse, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalizationQuality::InitAsDefaultInstance() {
}
class LocalizationQuality::_Internal {
 public:
};

LocalizationQuality::LocalizationQuality(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.LocalizationQuality)
}
LocalizationQuality::LocalizationQuality(const LocalizationQuality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&health_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(health_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.LocalizationQuality)
}

void LocalizationQuality::SharedCtor() {
  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(health_));
}

LocalizationQuality::~LocalizationQuality() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.LocalizationQuality)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationQuality::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LocalizationQuality::ArenaDtor(void* object) {
  LocalizationQuality* _this = reinterpret_cast< LocalizationQuality* >(object);
  (void)_this;
}
void LocalizationQuality::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationQuality::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationQuality& LocalizationQuality::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationQuality_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void LocalizationQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.LocalizationQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&confidence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&health_) -
      reinterpret_cast<char*>(&confidence_)) + sizeof(health_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationQuality::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double confidence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double position_uncertainty = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          position_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double orientation_uncertainty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          orientation_uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 matched_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          matched_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double drift_estimate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          drift_estimate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .agricultural.robot.navigation.v1.LocalizationHealth health = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_health(static_cast<::agricultural::robot::navigation::v1::LocalizationHealth>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationQuality::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.LocalizationQuality)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_confidence(), target);
  }

  // double position_uncertainty = 2;
  if (!(this->position_uncertainty() <= 0 && this->position_uncertainty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_position_uncertainty(), target);
  }

  // double orientation_uncertainty = 3;
  if (!(this->orientation_uncertainty() <= 0 && this->orientation_uncertainty() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_orientation_uncertainty(), target);
  }

  // uint32 matched_features = 4;
  if (this->matched_features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_matched_features(), target);
  }

  // double drift_estimate = 5;
  if (!(this->drift_estimate() <= 0 && this->drift_estimate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_drift_estimate(), target);
  }

  // .agricultural.robot.navigation.v1.LocalizationHealth health = 6;
  if (this->health() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.LocalizationQuality)
  return target;
}

size_t LocalizationQuality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.LocalizationQuality)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double confidence = 1;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 8;
  }

  // double position_uncertainty = 2;
  if (!(this->position_uncertainty() <= 0 && this->position_uncertainty() >= 0)) {
    total_size += 1 + 8;
  }

  // double orientation_uncertainty = 3;
  if (!(this->orientation_uncertainty() <= 0 && this->orientation_uncertainty() >= 0)) {
    total_size += 1 + 8;
  }

  // double drift_estimate = 5;
  if (!(this->drift_estimate() <= 0 && this->drift_estimate() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 matched_features = 4;
  if (this->matched_features() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_matched_features());
  }

  // .agricultural.robot.navigation.v1.LocalizationHealth health = 6;
  if (this->health() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_health());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationQuality::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.LocalizationQuality)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationQuality* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationQuality>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.LocalizationQuality)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.LocalizationQuality)
    MergeFrom(*source);
  }
}

void LocalizationQuality::MergeFrom(const LocalizationQuality& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.LocalizationQuality)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
  if (!(from.position_uncertainty() <= 0 && from.position_uncertainty() >= 0)) {
    _internal_set_position_uncertainty(from._internal_position_uncertainty());
  }
  if (!(from.orientation_uncertainty() <= 0 && from.orientation_uncertainty() >= 0)) {
    _internal_set_orientation_uncertainty(from._internal_orientation_uncertainty());
  }
  if (!(from.drift_estimate() <= 0 && from.drift_estimate() >= 0)) {
    _internal_set_drift_estimate(from._internal_drift_estimate());
  }
  if (from.matched_features() != 0) {
    _internal_set_matched_features(from._internal_matched_features());
  }
  if (from.health() != 0) {
    _internal_set_health(from._internal_health());
  }
}

void LocalizationQuality::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.LocalizationQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationQuality::CopyFrom(const LocalizationQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.LocalizationQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationQuality::IsInitialized() const {
  return true;
}

void LocalizationQuality::InternalSwap(LocalizationQuality* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationQuality, health_)
      + sizeof(LocalizationQuality::health_)
      - PROTOBUF_FIELD_OFFSET(LocalizationQuality, confidence_)>(
          reinterpret_cast<char*>(&confidence_),
          reinterpret_cast<char*>(&other->confidence_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationQuality::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LocalizationMetrics::InitAsDefaultInstance() {
  ::agricultural::robot::navigation::v1::_LocalizationMetrics_default_instance_._instance.get_mutable()->update_frequency_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class LocalizationMetrics::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& update_frequency(const LocalizationMetrics* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
LocalizationMetrics::_Internal::update_frequency(const LocalizationMetrics* msg) {
  return *msg->update_frequency_;
}
void LocalizationMetrics::clear_update_frequency() {
  if (GetArena() == nullptr && update_frequency_ != nullptr) {
    delete update_frequency_;
  }
  update_frequency_ = nullptr;
}
LocalizationMetrics::LocalizationMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:agricultural.robot.navigation.v1.LocalizationMetrics)
}
LocalizationMetrics::LocalizationMetrics(const LocalizationMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_update_frequency()) {
    update_frequency_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.update_frequency_);
  } else {
    update_frequency_ = nullptr;
  }
  ::memcpy(&effective_sample_size_, &from.effective_sample_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&map_match_score_) -
    reinterpret_cast<char*>(&effective_sample_size_)) + sizeof(map_match_score_));
  // @@protoc_insertion_point(copy_constructor:agricultural.robot.navigation.v1.LocalizationMetrics)
}

void LocalizationMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  ::memset(&update_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_match_score_) -
      reinterpret_cast<char*>(&update_frequency_)) + sizeof(map_match_score_));
}

LocalizationMetrics::~LocalizationMetrics() {
  // @@protoc_insertion_point(destructor:agricultural.robot.navigation.v1.LocalizationMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LocalizationMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete update_frequency_;
}

void LocalizationMetrics::ArenaDtor(void* object) {
  LocalizationMetrics* _this = reinterpret_cast< LocalizationMetrics* >(object);
  (void)_this;
}
void LocalizationMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LocalizationMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalizationMetrics& LocalizationMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LocalizationMetrics_robot_2fnavigation_2frobot_2dnavigation_2eproto.base);
  return *internal_default_instance();
}


void LocalizationMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && update_frequency_ != nullptr) {
    delete update_frequency_;
  }
  update_frequency_ = nullptr;
  ::memset(&effective_sample_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&map_match_score_) -
      reinterpret_cast<char*>(&effective_sample_size_)) + sizeof(map_match_score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalizationMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 particle_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          particle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double effective_sample_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          effective_sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double convergence_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          convergence_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration update_frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_frequency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sensor_updates_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          sensor_updates_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double map_match_score = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          map_match_score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LocalizationMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 particle_count = 1;
  if (this->particle_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_particle_count(), target);
  }

  // double effective_sample_size = 2;
  if (!(this->effective_sample_size() <= 0 && this->effective_sample_size() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_effective_sample_size(), target);
  }

  // double convergence_rate = 3;
  if (!(this->convergence_rate() <= 0 && this->convergence_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_convergence_rate(), target);
  }

  // .google.protobuf.Duration update_frequency = 4;
  if (this->has_update_frequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update_frequency(this), target, stream);
  }

  // uint32 sensor_updates_count = 5;
  if (this->sensor_updates_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sensor_updates_count(), target);
  }

  // double map_match_score = 6;
  if (!(this->map_match_score() <= 0 && this->map_match_score() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_map_match_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:agricultural.robot.navigation.v1.LocalizationMetrics)
  return target;
}

size_t LocalizationMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration update_frequency = 4;
  if (this->has_update_frequency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_frequency_);
  }

  // double effective_sample_size = 2;
  if (!(this->effective_sample_size() <= 0 && this->effective_sample_size() >= 0)) {
    total_size += 1 + 8;
  }

  // double convergence_rate = 3;
  if (!(this->convergence_rate() <= 0 && this->convergence_rate() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 particle_count = 1;
  if (this->particle_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_particle_count());
  }

  // uint32 sensor_updates_count = 5;
  if (this->sensor_updates_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sensor_updates_count());
  }

  // double map_match_score = 6;
  if (!(this->map_match_score() <= 0 && this->map_match_score() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalizationMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const LocalizationMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LocalizationMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:agricultural.robot.navigation.v1.LocalizationMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:agricultural.robot.navigation.v1.LocalizationMetrics)
    MergeFrom(*source);
  }
}

void LocalizationMetrics::MergeFrom(const LocalizationMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_update_frequency()) {
    _internal_mutable_update_frequency()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_update_frequency());
  }
  if (!(from.effective_sample_size() <= 0 && from.effective_sample_size() >= 0)) {
    _internal_set_effective_sample_size(from._internal_effective_sample_size());
  }
  if (!(from.convergence_rate() <= 0 && from.convergence_rate() >= 0)) {
    _internal_set_convergence_rate(from._internal_convergence_rate());
  }
  if (from.particle_count() != 0) {
    _internal_set_particle_count(from._internal_particle_count());
  }
  if (from.sensor_updates_count() != 0) {
    _internal_set_sensor_updates_count(from._internal_sensor_updates_count());
  }
  if (!(from.map_match_score() <= 0 && from.map_match_score() >= 0)) {
    _internal_set_map_match_score(from._internal_map_match_score());
  }
}

void LocalizationMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocalizationMetrics::CopyFrom(const LocalizationMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agricultural.robot.navigation.v1.LocalizationMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationMetrics::IsInitialized() const {
  return true;
}

void LocalizationMetrics::InternalSwap(LocalizationMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalizationMetrics, map_match_score_)
      + sizeof(LocalizationMetrics::map_match_score_)
      - PROTOBUF_FIELD_OFFSET(LocalizationMetrics, update_frequency_)>(
          reinterpret_cast<char*>(&update_frequency_),
          reinterpret_cast<char*>(&other->update_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalizationMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace navigation
}  // namespace robot
}  // namespace agricultural
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::GetMapRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::GetMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::GetMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::SetMapRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::SetMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::SetMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::UpdateMapRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::UpdateMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::UpdateMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::ClearMapRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::ClearMapRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::ClearMapRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::MapResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::MapResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::MapResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::OccupancyGridMap* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::OccupancyGridMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::OccupancyGridMap >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::MapMetadata* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::MapMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::MapMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::MapUpdate* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::MapUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::MapUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Rectangle* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Rectangle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Rectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::GetPositionRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::GetPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::GetPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::SetPositionRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::SetPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::SetPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::StreamPositionRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::StreamPositionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::StreamPositionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::PositionResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::PositionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::PositionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::PositionUpdate* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::PositionUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::PositionUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Pose* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::PoseWithCovariance* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::PoseWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::PoseWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Point2D* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Point3D* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Point3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Point3D >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Quaternion* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Quaternion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Quaternion >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Twist* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Twist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Twist >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Vector3* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::VelocityCommand* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::VelocityCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::VelocityCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::JoystickInput* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::JoystickInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::JoystickInput >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::VelocityResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::VelocityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::VelocityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::StopMovementRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::StopMovementRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::StopMovementRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::SafetyConstraints* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::SafetyConstraints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::SafetyConstraints >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::SafetyViolation* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::SafetyViolation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::SafetyViolation >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationGoal* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationGoal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationGoal >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::TrajectoryCommand* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::TrajectoryCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::TrajectoryCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Waypoint* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Waypoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Waypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::TrajectoryPoint* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationOptions* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::TrajectoryOptions* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::TrajectoryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::TrajectoryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::WaypointAction_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::WaypointAction* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::WaypointAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::WaypointAction >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CancelGoalRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CancelGoalRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CancelGoalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationStatusResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationStatusUpdate* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationStatusUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationStatusUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationProgress* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationProgress >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationProgress >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::NavigationError* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::NavigationError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::NavigationError >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::GetCameraInfoRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::GetCameraInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::GetCameraInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::StreamVideoRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::StreamVideoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::StreamVideoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraControlRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraInfoResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraInfo* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::VideoFrame* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::VideoFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::VideoFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::VideoStreamOptions* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::VideoStreamOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::VideoStreamOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraControlCommand_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraControlCommand* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraControlCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraControlCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraControlResponse_CurrentSettingsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraControlResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::Resolution* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::Resolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::Resolution >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraIntrinsics* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraIntrinsics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraIntrinsics >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::CameraDistortion* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::CameraDistortion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::CameraDistortion >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::FrameMetadata* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::FrameMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::FrameMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest_ParametersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::ResetLocalizationRequest* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::ResetLocalizationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::ResetLocalizationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::LocalizationStatusResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::LocalizationStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::LocalizationStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::LocalizationResponse* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::LocalizationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::LocalizationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::LocalizationQuality* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::LocalizationQuality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::LocalizationQuality >(arena);
}
template<> PROTOBUF_NOINLINE ::agricultural::robot::navigation::v1::LocalizationMetrics* Arena::CreateMaybeMessage< ::agricultural::robot::navigation::v1::LocalizationMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::agricultural::robot::navigation::v1::LocalizationMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
