// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/robot/navigation/robot-navigation.proto
#ifndef GRPC_proto_2frobot_2fnavigation_2frobot_2dnavigation_2eproto__INCLUDED
#define GRPC_proto_2frobot_2fnavigation_2frobot_2dnavigation_2eproto__INCLUDED

#include "proto/robot/navigation/robot-navigation.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace agricultural {
namespace robot {
namespace navigation {
namespace v1 {

class RobotNavigationService final {
 public:
  static constexpr char const* service_full_name() {
    return "agricultural.robot.navigation.v1.RobotNavigationService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Map Management
    virtual ::grpc::Status GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>> AsyncGetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>> AsyncSetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>>(AsyncSetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>> PrepareAsyncSetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>>(PrepareAsyncSetMapRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>> AsyncUpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>>(AsyncUpdateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>> PrepareAsyncUpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>>(PrepareAsyncUpdateMapRaw(context, request, cq));
    }
    virtual ::grpc::Status ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncClearMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncClearMapRaw(context, request, cq));
    }
    // Position Management
    virtual ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::agricultural::robot::navigation::v1::PositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    virtual ::grpc::Status SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::agricultural::robot::navigation::v1::PositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>> AsyncSetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>>(AsyncSetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>> PrepareAsyncSetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>>(PrepareAsyncSetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>> StreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>>(StreamPositionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>> AsyncStreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>>(AsyncStreamPositionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>> PrepareAsyncStreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>>(PrepareAsyncStreamPositionRaw(context, request, cq));
    }
    // Manual Control (Joystick)
    virtual ::grpc::Status SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::agricultural::robot::navigation::v1::VelocityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>> AsyncSendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>>(AsyncSendVelocityCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>> PrepareAsyncSendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>>(PrepareAsyncSendVelocityCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>> StreamVelocityCommands(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>>(StreamVelocityCommandsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>> AsyncStreamVelocityCommands(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>>(AsyncStreamVelocityCommandsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>> PrepareAsyncStreamVelocityCommands(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>>(PrepareAsyncStreamVelocityCommandsRaw(context, cq));
    }
    virtual ::grpc::Status StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::agricultural::robot::navigation::v1::VelocityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>> AsyncStopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>>(AsyncStopMovementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>> PrepareAsyncStopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>>(PrepareAsyncStopMovementRaw(context, request, cq));
    }
    // Autonomous Navigation
    virtual ::grpc::Status SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>> AsyncSendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>>(AsyncSendGoalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>> PrepareAsyncSendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>>(PrepareAsyncSendGoalRaw(context, request, cq));
    }
    virtual ::grpc::Status SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>> AsyncSendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>>(AsyncSendTrajectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>> PrepareAsyncSendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>>(PrepareAsyncSendTrajectoryRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>> AsyncCancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>>(AsyncCancelGoalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>> PrepareAsyncCancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>>(PrepareAsyncCancelGoalRaw(context, request, cq));
    }
    virtual ::grpc::Status GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusResponse>> AsyncGetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusResponse>>(AsyncGetNavigationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusResponse>> PrepareAsyncGetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusResponse>>(PrepareAsyncGetNavigationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>> StreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>>(StreamNavigationStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>> AsyncStreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>>(AsyncStreamNavigationStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>> PrepareAsyncStreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>>(PrepareAsyncStreamNavigationStatusRaw(context, request, cq));
    }
    // Camera and Video Streaming
    virtual ::grpc::Status GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraInfoResponse>> AsyncGetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraInfoResponse>>(AsyncGetCameraInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraInfoResponse>> PrepareAsyncGetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraInfoResponse>>(PrepareAsyncGetCameraInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>> StreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>>(StreamVideoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>> AsyncStreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>>(AsyncStreamVideoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>> PrepareAsyncStreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>>(PrepareAsyncStreamVideoRaw(context, request, cq));
    }
    virtual ::grpc::Status ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::agricultural::robot::navigation::v1::CameraControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraControlResponse>> AsyncControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraControlResponse>>(AsyncControlCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraControlResponse>> PrepareAsyncControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraControlResponse>>(PrepareAsyncControlCameraRaw(context, request, cq));
    }
    // Localization and SLAM
    virtual ::grpc::Status GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>> AsyncGetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>>(AsyncGetLocalizationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>> PrepareAsyncGetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>>(PrepareAsyncGetLocalizationStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>> AsyncInitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>>(AsyncInitializeLocalizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>> PrepareAsyncInitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>>(PrepareAsyncInitializeLocalizationRaw(context, request, cq));
    }
    virtual ::grpc::Status ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>> AsyncResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>>(AsyncResetLocalizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>> PrepareAsyncResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>>(PrepareAsyncResetLocalizationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Map Management
      virtual void GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Position Management
      virtual void GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::PositionUpdate>* reactor) = 0;
      // Manual Control (Joystick)
      virtual void SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamVelocityCommands(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::agricultural::robot::navigation::v1::VelocityCommand,::agricultural::robot::navigation::v1::VelocityResponse>* reactor) = 0;
      virtual void StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Autonomous Navigation
      virtual void SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* reactor) = 0;
      // Camera and Video Streaming
      virtual void GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void StreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::VideoFrame>* reactor) = 0;
      virtual void ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Localization and SLAM
      virtual void GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>* AsyncSetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>* PrepareAsyncSetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>* AsyncUpdateMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::MapResponse>* PrepareAsyncUpdateMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncClearMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncClearMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>* AsyncSetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::PositionResponse>* PrepareAsyncSetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>* StreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>* AsyncStreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::PositionUpdate>* PrepareAsyncStreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>* AsyncSendVelocityCommandRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>* PrepareAsyncSendVelocityCommandRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* StreamVelocityCommandsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* AsyncStreamVelocityCommandsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* PrepareAsyncStreamVelocityCommandsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>* AsyncStopMovementRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::VelocityResponse>* PrepareAsyncStopMovementRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>* AsyncSendGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>* PrepareAsyncSendGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>* AsyncSendTrajectoryRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>* PrepareAsyncSendTrajectoryRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>* AsyncCancelGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationResponse>* PrepareAsyncCancelGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* AsyncGetNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* PrepareAsyncGetNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* StreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* AsyncStreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* PrepareAsyncStreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraInfoResponse>* AsyncGetCameraInfoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraInfoResponse>* PrepareAsyncGetCameraInfoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>* StreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>* AsyncStreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agricultural::robot::navigation::v1::VideoFrame>* PrepareAsyncStreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraControlResponse>* AsyncControlCameraRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::CameraControlResponse>* PrepareAsyncControlCameraRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* AsyncGetLocalizationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* PrepareAsyncGetLocalizationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>* AsyncInitializeLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>* PrepareAsyncInitializeLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>* AsyncResetLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agricultural::robot::navigation::v1::LocalizationResponse>* PrepareAsyncResetLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>> AsyncGetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>>(AsyncGetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>> PrepareAsyncGetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>>(PrepareAsyncGetMapRaw(context, request, cq));
    }
    ::grpc::Status SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>> AsyncSetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>>(AsyncSetMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>> PrepareAsyncSetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>>(PrepareAsyncSetMapRaw(context, request, cq));
    }
    ::grpc::Status UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>> AsyncUpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>>(AsyncUpdateMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>> PrepareAsyncUpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>>(PrepareAsyncUpdateMapRaw(context, request, cq));
    }
    ::grpc::Status ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncClearMapRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncClearMapRaw(context, request, cq));
    }
    ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::agricultural::robot::navigation::v1::PositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    ::grpc::Status SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::agricultural::robot::navigation::v1::PositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>> AsyncSetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>>(AsyncSetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>> PrepareAsyncSetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>>(PrepareAsyncSetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::agricultural::robot::navigation::v1::PositionUpdate>> StreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::agricultural::robot::navigation::v1::PositionUpdate>>(StreamPositionRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>> AsyncStreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>>(AsyncStreamPositionRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>> PrepareAsyncStreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>>(PrepareAsyncStreamPositionRaw(context, request, cq));
    }
    ::grpc::Status SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::agricultural::robot::navigation::v1::VelocityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>> AsyncSendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>>(AsyncSendVelocityCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>> PrepareAsyncSendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>>(PrepareAsyncSendVelocityCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>> StreamVelocityCommands(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>>(StreamVelocityCommandsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>> AsyncStreamVelocityCommands(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>>(AsyncStreamVelocityCommandsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>> PrepareAsyncStreamVelocityCommands(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>>(PrepareAsyncStreamVelocityCommandsRaw(context, cq));
    }
    ::grpc::Status StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::agricultural::robot::navigation::v1::VelocityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>> AsyncStopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>>(AsyncStopMovementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>> PrepareAsyncStopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>>(PrepareAsyncStopMovementRaw(context, request, cq));
    }
    ::grpc::Status SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>> AsyncSendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>>(AsyncSendGoalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>> PrepareAsyncSendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>>(PrepareAsyncSendGoalRaw(context, request, cq));
    }
    ::grpc::Status SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>> AsyncSendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>>(AsyncSendTrajectoryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>> PrepareAsyncSendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>>(PrepareAsyncSendTrajectoryRaw(context, request, cq));
    }
    ::grpc::Status CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>> AsyncCancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>>(AsyncCancelGoalRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>> PrepareAsyncCancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>>(PrepareAsyncCancelGoalRaw(context, request, cq));
    }
    ::grpc::Status GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>> AsyncGetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>>(AsyncGetNavigationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>> PrepareAsyncGetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>>(PrepareAsyncGetNavigationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>> StreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>>(StreamNavigationStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>> AsyncStreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>>(AsyncStreamNavigationStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>> PrepareAsyncStreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>>(PrepareAsyncStreamNavigationStatusRaw(context, request, cq));
    }
    ::grpc::Status GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>> AsyncGetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>>(AsyncGetCameraInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>> PrepareAsyncGetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>>(PrepareAsyncGetCameraInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::agricultural::robot::navigation::v1::VideoFrame>> StreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::agricultural::robot::navigation::v1::VideoFrame>>(StreamVideoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>> AsyncStreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>>(AsyncStreamVideoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>> PrepareAsyncStreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>>(PrepareAsyncStreamVideoRaw(context, request, cq));
    }
    ::grpc::Status ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::agricultural::robot::navigation::v1::CameraControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>> AsyncControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>>(AsyncControlCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>> PrepareAsyncControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>>(PrepareAsyncControlCameraRaw(context, request, cq));
    }
    ::grpc::Status GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>> AsyncGetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>>(AsyncGetLocalizationStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>> PrepareAsyncGetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>>(PrepareAsyncGetLocalizationStatusRaw(context, request, cq));
    }
    ::grpc::Status InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>> AsyncInitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>>(AsyncInitializeLocalizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>> PrepareAsyncInitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>>(PrepareAsyncInitializeLocalizationRaw(context, request, cq));
    }
    ::grpc::Status ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>> AsyncResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>>(AsyncResetLocalizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>> PrepareAsyncResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>>(PrepareAsyncResetLocalizationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)>) override;
      void SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::PositionUpdate>* reactor) override;
      void SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, std::function<void(::grpc::Status)>) override;
      void SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamVelocityCommands(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::agricultural::robot::navigation::v1::VelocityCommand,::agricultural::robot::navigation::v1::VelocityResponse>* reactor) override;
      void StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, std::function<void(::grpc::Status)>) override;
      void StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)>) override;
      void SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)>) override;
      void SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* reactor) override;
      void GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::VideoFrame>* reactor) override;
      void ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response, std::function<void(::grpc::Status)>) override;
      void ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, std::function<void(::grpc::Status)>) override;
      void InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* AsyncGetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* AsyncSetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* PrepareAsyncSetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* AsyncUpdateMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* PrepareAsyncUpdateMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncClearMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncClearMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* AsyncSetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* PrepareAsyncSetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::agricultural::robot::navigation::v1::PositionUpdate>* StreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request) override;
    ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>* AsyncStreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>* PrepareAsyncStreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* AsyncSendVelocityCommandRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* PrepareAsyncSendVelocityCommandRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* StreamVelocityCommandsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* AsyncStreamVelocityCommandsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* PrepareAsyncStreamVelocityCommandsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* AsyncStopMovementRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* PrepareAsyncStopMovementRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* AsyncSendGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* PrepareAsyncSendGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* AsyncSendTrajectoryRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* PrepareAsyncSendTrajectoryRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* AsyncCancelGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* PrepareAsyncCancelGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* AsyncGetNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* PrepareAsyncGetNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* StreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* AsyncStreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* PrepareAsyncStreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>* AsyncGetCameraInfoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>* PrepareAsyncGetCameraInfoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::agricultural::robot::navigation::v1::VideoFrame>* StreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request) override;
    ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>* AsyncStreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>* PrepareAsyncStreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>* AsyncControlCameraRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>* PrepareAsyncControlCameraRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* AsyncGetLocalizationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* PrepareAsyncGetLocalizationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* AsyncInitializeLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* PrepareAsyncInitializeLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* AsyncResetLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* PrepareAsyncResetLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetMap_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMap_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMap_;
    const ::grpc::internal::RpcMethod rpcmethod_ClearMap_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_SendVelocityCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamVelocityCommands_;
    const ::grpc::internal::RpcMethod rpcmethod_StopMovement_;
    const ::grpc::internal::RpcMethod rpcmethod_SendGoal_;
    const ::grpc::internal::RpcMethod rpcmethod_SendTrajectory_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelGoal_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNavigationStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamNavigationStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCameraInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamVideo_;
    const ::grpc::internal::RpcMethod rpcmethod_ControlCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLocalizationStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_InitializeLocalization_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetLocalization_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Map Management
    virtual ::grpc::Status GetMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response);
    virtual ::grpc::Status SetMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response);
    virtual ::grpc::Status UpdateMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response);
    virtual ::grpc::Status ClearMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response);
    // Position Management
    virtual ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response);
    virtual ::grpc::Status SetPosition(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response);
    virtual ::grpc::Status StreamPosition(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest* request, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* writer);
    // Manual Control (Joystick)
    virtual ::grpc::Status SendVelocityCommand(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response);
    virtual ::grpc::Status StreamVelocityCommands(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* stream);
    virtual ::grpc::Status StopMovement(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response);
    // Autonomous Navigation
    virtual ::grpc::Status SendGoal(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response);
    virtual ::grpc::Status SendTrajectory(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response);
    virtual ::grpc::Status CancelGoal(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response);
    virtual ::grpc::Status GetNavigationStatus(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response);
    virtual ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* writer);
    // Camera and Video Streaming
    virtual ::grpc::Status GetCameraInfo(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response);
    virtual ::grpc::Status StreamVideo(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest* request, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* writer);
    virtual ::grpc::Status ControlCamera(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response);
    // Localization and SLAM
    virtual ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response);
    virtual ::grpc::Status InitializeLocalization(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response);
    virtual ::grpc::Status ResetLocalization(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetMap() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::GetMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::MapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMap() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMap(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::SetMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::MapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMap() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMap(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::MapResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClearMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ClearMap() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ClearMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearMap(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPosition() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::PositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPosition() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPosition(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::PositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamPosition() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_StreamPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamPosition(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::StreamPositionRequest* request, ::grpc::ServerAsyncWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendVelocityCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendVelocityCommand() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SendVelocityCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVelocityCommand(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendVelocityCommand(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::VelocityCommand* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::VelocityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamVelocityCommands : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamVelocityCommands() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_StreamVelocityCommands() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVelocityCommands(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamVelocityCommands(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopMovement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StopMovement() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_StopMovement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMovement(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMovement(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::VelocityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendGoal() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SendGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendGoal(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::NavigationGoal* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::NavigationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SendTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SendTrajectory() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SendTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrajectory(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTrajectory(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::NavigationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelGoal() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_CancelGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelGoal(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::NavigationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNavigationStatus() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_GetNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNavigationStatus(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamNavigationStatus() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_StreamNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamNavigationStatus(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request, ::grpc::ServerAsyncWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCameraInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCameraInfo() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_GetCameraInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraInfo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraInfo(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::CameraInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamVideo() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamVideo(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::StreamVideoRequest* request, ::grpc::ServerAsyncWriter< ::agricultural::robot::navigation::v1::VideoFrame>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ControlCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ControlCamera() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_ControlCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlCamera(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlCamera(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::CameraControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLocalizationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLocalizationStatus() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_GetLocalizationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocalizationStatus(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InitializeLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InitializeLocalization() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_InitializeLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitializeLocalization(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::LocalizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetLocalization() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_ResetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetLocalization(::grpc::ServerContext* context, ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::agricultural::robot::navigation::v1::LocalizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetMap<WithAsyncMethod_SetMap<WithAsyncMethod_UpdateMap<WithAsyncMethod_ClearMap<WithAsyncMethod_GetPosition<WithAsyncMethod_SetPosition<WithAsyncMethod_StreamPosition<WithAsyncMethod_SendVelocityCommand<WithAsyncMethod_StreamVelocityCommands<WithAsyncMethod_StopMovement<WithAsyncMethod_SendGoal<WithAsyncMethod_SendTrajectory<WithAsyncMethod_CancelGoal<WithAsyncMethod_GetNavigationStatus<WithAsyncMethod_StreamNavigationStatus<WithAsyncMethod_GetCameraInfo<WithAsyncMethod_StreamVideo<WithAsyncMethod_ControlCamera<WithAsyncMethod_GetLocalizationStatus<WithAsyncMethod_InitializeLocalization<WithAsyncMethod_ResetLocalization<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response) { return this->GetMap(context, request, response); }));}
    void SetMessageAllocatorFor_GetMap(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMap() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response) { return this->SetMap(context, request, response); }));}
    void SetMessageAllocatorFor_SetMap(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateMap() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response) { return this->UpdateMap(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMap(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMap(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ClearMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ClearMap() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response) { return this->ClearMap(context, request, response); }));}
    void SetMessageAllocatorFor_ClearMap(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ClearMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearMap(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response) { return this->GetPosition(context, request, response); }));}
    void SetMessageAllocatorFor_GetPosition(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPosition() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response) { return this->SetPosition(context, request, response); }));}
    void SetMessageAllocatorFor_SetPosition(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamPosition() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::agricultural::robot::navigation::v1::StreamPositionRequest, ::agricultural::robot::navigation::v1::PositionUpdate>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest* request) { return this->StreamPosition(context, request); }));
    }
    ~WithCallbackMethod_StreamPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::agricultural::robot::navigation::v1::PositionUpdate>* StreamPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendVelocityCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendVelocityCommand() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response) { return this->SendVelocityCommand(context, request, response); }));}
    void SetMessageAllocatorFor_SendVelocityCommand(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendVelocityCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVelocityCommand(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendVelocityCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamVelocityCommands : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamVelocityCommands() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamVelocityCommands(context); }));
    }
    ~WithCallbackMethod_StreamVelocityCommands() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVelocityCommands(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* StreamVelocityCommands(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StopMovement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StopMovement() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response) { return this->StopMovement(context, request, response); }));}
    void SetMessageAllocatorFor_StopMovement(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StopMovement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMovement(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopMovement(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendGoal() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response) { return this->SendGoal(context, request, response); }));}
    void SetMessageAllocatorFor_SendGoal(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendGoal(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SendTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SendTrajectory() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response) { return this->SendTrajectory(context, request, response); }));}
    void SetMessageAllocatorFor_SendTrajectory(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SendTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrajectory(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTrajectory(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelGoal() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response) { return this->CancelGoal(context, request, response); }));}
    void SetMessageAllocatorFor_CancelGoal(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelGoal(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNavigationStatus() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response) { return this->GetNavigationStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetNavigationStatus(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNavigationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamNavigationStatus() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusUpdate>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request) { return this->StreamNavigationStatus(context, request); }));
    }
    ~WithCallbackMethod_StreamNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* StreamNavigationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCameraInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCameraInfo() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response) { return this->GetCameraInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetCameraInfo(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCameraInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraInfo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamVideo() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackServerStreamingHandler< ::agricultural::robot::navigation::v1::StreamVideoRequest, ::agricultural::robot::navigation::v1::VideoFrame>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest* request) { return this->StreamVideo(context, request); }));
    }
    ~WithCallbackMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::agricultural::robot::navigation::v1::VideoFrame>* StreamVideo(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ControlCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ControlCamera() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response) { return this->ControlCamera(context, request, response); }));}
    void SetMessageAllocatorFor_ControlCamera(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ControlCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlCamera(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ControlCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLocalizationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLocalizationStatus() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response) { return this->GetLocalizationStatus(context, request, response); }));}
    void SetMessageAllocatorFor_GetLocalizationStatus(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLocalizationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocalizationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InitializeLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InitializeLocalization() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) { return this->InitializeLocalization(context, request, response); }));}
    void SetMessageAllocatorFor_InitializeLocalization(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InitializeLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitializeLocalization(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetLocalization() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) { return this->ResetLocalization(context, request, response); }));}
    void SetMessageAllocatorFor_ResetLocalization(
        ::grpc::MessageAllocator< ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetLocalization(
      ::grpc::CallbackServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetMap<WithCallbackMethod_SetMap<WithCallbackMethod_UpdateMap<WithCallbackMethod_ClearMap<WithCallbackMethod_GetPosition<WithCallbackMethod_SetPosition<WithCallbackMethod_StreamPosition<WithCallbackMethod_SendVelocityCommand<WithCallbackMethod_StreamVelocityCommands<WithCallbackMethod_StopMovement<WithCallbackMethod_SendGoal<WithCallbackMethod_SendTrajectory<WithCallbackMethod_CancelGoal<WithCallbackMethod_GetNavigationStatus<WithCallbackMethod_StreamNavigationStatus<WithCallbackMethod_GetCameraInfo<WithCallbackMethod_StreamVideo<WithCallbackMethod_ControlCamera<WithCallbackMethod_GetLocalizationStatus<WithCallbackMethod_InitializeLocalization<WithCallbackMethod_ResetLocalization<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetMap() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMap() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMap() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClearMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ClearMap() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ClearMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPosition() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPosition() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamPosition() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_StreamPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendVelocityCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendVelocityCommand() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SendVelocityCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVelocityCommand(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamVelocityCommands : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamVelocityCommands() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_StreamVelocityCommands() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVelocityCommands(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopMovement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StopMovement() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_StopMovement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMovement(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendGoal() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SendGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SendTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SendTrajectory() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SendTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrajectory(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelGoal() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_CancelGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNavigationStatus() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_GetNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamNavigationStatus() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_StreamNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCameraInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCameraInfo() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_GetCameraInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraInfo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamVideo() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ControlCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ControlCamera() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_ControlCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlCamera(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLocalizationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLocalizationStatus() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_GetLocalizationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InitializeLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InitializeLocalization() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_InitializeLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetLocalization() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_ResetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetMap() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMap() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMap() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ClearMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ClearMap() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ClearMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClearMap(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPosition() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPosition() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamPosition() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_StreamPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendVelocityCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendVelocityCommand() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SendVelocityCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVelocityCommand(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendVelocityCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamVelocityCommands : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamVelocityCommands() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_StreamVelocityCommands() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVelocityCommands(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamVelocityCommands(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(8, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopMovement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StopMovement() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_StopMovement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMovement(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopMovement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendGoal() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SendGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendGoal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SendTrajectory() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SendTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrajectory(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendTrajectory(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelGoal() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_CancelGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelGoal(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNavigationStatus() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_GetNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNavigationStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamNavigationStatus() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_StreamNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamNavigationStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(14, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCameraInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCameraInfo() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_GetCameraInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraInfo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCameraInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamVideo() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamVideo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(16, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ControlCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ControlCamera() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_ControlCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlCamera(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControlCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLocalizationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLocalizationStatus() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_GetLocalizationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLocalizationStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InitializeLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InitializeLocalization() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_InitializeLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInitializeLocalization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetLocalization() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_ResetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetLocalization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetMap() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMap() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateMap() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ClearMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ClearMap() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ClearMap(context, request, response); }));
    }
    ~WithRawCallbackMethod_ClearMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClearMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ClearMap(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPosition() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamPosition() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamPosition(context, request); }));
    }
    ~WithRawCallbackMethod_StreamPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendVelocityCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendVelocityCommand() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendVelocityCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendVelocityCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendVelocityCommand(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendVelocityCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamVelocityCommands : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamVelocityCommands() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->StreamVelocityCommands(context); }));
    }
    ~WithRawCallbackMethod_StreamVelocityCommands() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVelocityCommands(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StreamVelocityCommands(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StopMovement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StopMovement() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StopMovement(context, request, response); }));
    }
    ~WithRawCallbackMethod_StopMovement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopMovement(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StopMovement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendGoal() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendGoal(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendGoal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SendTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SendTrajectory() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SendTrajectory(context, request, response); }));
    }
    ~WithRawCallbackMethod_SendTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendTrajectory(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SendTrajectory(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelGoal() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelGoal(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelGoal(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNavigationStatus() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNavigationStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNavigationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamNavigationStatus() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamNavigationStatus(context, request); }));
    }
    ~WithRawCallbackMethod_StreamNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamNavigationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCameraInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCameraInfo() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCameraInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCameraInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCameraInfo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCameraInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamVideo() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamVideo(context, request); }));
    }
    ~WithRawCallbackMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamVideo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ControlCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ControlCamera() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ControlCamera(context, request, response); }));
    }
    ~WithRawCallbackMethod_ControlCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ControlCamera(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ControlCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLocalizationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLocalizationStatus() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLocalizationStatus(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLocalizationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLocalizationStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InitializeLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InitializeLocalization() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InitializeLocalization(context, request, response); }));
    }
    ~WithRawCallbackMethod_InitializeLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InitializeLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InitializeLocalization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetLocalization() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetLocalization(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetLocalization(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetMap() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>* streamer) {
                       return this->StreamedGetMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::GetMapRequest,::agricultural::robot::navigation::v1::MapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMap() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse>* streamer) {
                       return this->StreamedSetMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::SetMapRequest,::agricultural::robot::navigation::v1::MapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMap() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse>* streamer) {
                       return this->StreamedUpdateMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::UpdateMapRequest* /*request*/, ::agricultural::robot::navigation::v1::MapResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::UpdateMapRequest,::agricultural::robot::navigation::v1::MapResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClearMap : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ClearMap() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedClearMap(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ClearMap() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClearMap(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ClearMapRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClearMap(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::ClearMapRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPosition() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>* streamer) {
                       return this->StreamedGetPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::GetPositionRequest,::agricultural::robot::navigation::v1::PositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPosition() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse>* streamer) {
                       return this->StreamedSetPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::SetPositionRequest* /*request*/, ::agricultural::robot::navigation::v1::PositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::SetPositionRequest,::agricultural::robot::navigation::v1::PositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendVelocityCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendVelocityCommand() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* streamer) {
                       return this->StreamedSendVelocityCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendVelocityCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendVelocityCommand(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::VelocityCommand* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendVelocityCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::VelocityCommand,::agricultural::robot::navigation::v1::VelocityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopMovement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StopMovement() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse>* streamer) {
                       return this->StreamedStopMovement(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StopMovement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopMovement(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StopMovementRequest* /*request*/, ::agricultural::robot::navigation::v1::VelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopMovement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::StopMovementRequest,::agricultural::robot::navigation::v1::VelocityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendGoal() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse>* streamer) {
                       return this->StreamedSendGoal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::NavigationGoal* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendGoal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::NavigationGoal,::agricultural::robot::navigation::v1::NavigationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendTrajectory : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SendTrajectory() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse>* streamer) {
                       return this->StreamedSendTrajectory(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SendTrajectory() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendTrajectory(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::TrajectoryCommand* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendTrajectory(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::TrajectoryCommand,::agricultural::robot::navigation::v1::NavigationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelGoal : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelGoal() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse>* streamer) {
                       return this->StreamedCancelGoal(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelGoal() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelGoal(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CancelGoalRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelGoal(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::CancelGoalRequest,::agricultural::robot::navigation::v1::NavigationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNavigationStatus() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse>* streamer) {
                       return this->StreamedGetNavigationStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::NavigationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNavigationStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest,::agricultural::robot::navigation::v1::NavigationStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCameraInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCameraInfo() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse>* streamer) {
                       return this->StreamedGetCameraInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCameraInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCameraInfo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCameraInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::GetCameraInfoRequest,::agricultural::robot::navigation::v1::CameraInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ControlCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ControlCamera() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse>* streamer) {
                       return this->StreamedControlCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ControlCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ControlCamera(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::CameraControlRequest* /*request*/, ::agricultural::robot::navigation::v1::CameraControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControlCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::CameraControlRequest,::agricultural::robot::navigation::v1::CameraControlResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLocalizationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLocalizationStatus() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* streamer) {
                       return this->StreamedGetLocalizationStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLocalizationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLocalizationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLocalizationStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest,::agricultural::robot::navigation::v1::LocalizationStatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InitializeLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InitializeLocalization() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>* streamer) {
                       return this->StreamedInitializeLocalization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InitializeLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InitializeLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInitializeLocalization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest,::agricultural::robot::navigation::v1::LocalizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetLocalization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetLocalization() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse>* streamer) {
                       return this->StreamedResetLocalization(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetLocalization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetLocalization(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* /*request*/, ::agricultural::robot::navigation::v1::LocalizationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetLocalization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agricultural::robot::navigation::v1::ResetLocalizationRequest,::agricultural::robot::navigation::v1::LocalizationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetMap<WithStreamedUnaryMethod_SetMap<WithStreamedUnaryMethod_UpdateMap<WithStreamedUnaryMethod_ClearMap<WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_SetPosition<WithStreamedUnaryMethod_SendVelocityCommand<WithStreamedUnaryMethod_StopMovement<WithStreamedUnaryMethod_SendGoal<WithStreamedUnaryMethod_SendTrajectory<WithStreamedUnaryMethod_CancelGoal<WithStreamedUnaryMethod_GetNavigationStatus<WithStreamedUnaryMethod_GetCameraInfo<WithStreamedUnaryMethod_ControlCamera<WithStreamedUnaryMethod_GetLocalizationStatus<WithStreamedUnaryMethod_InitializeLocalization<WithStreamedUnaryMethod_ResetLocalization<Service > > > > > > > > > > > > > > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamPosition() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::agricultural::robot::navigation::v1::StreamPositionRequest, ::agricultural::robot::navigation::v1::PositionUpdate>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::agricultural::robot::navigation::v1::StreamPositionRequest, ::agricultural::robot::navigation::v1::PositionUpdate>* streamer) {
                       return this->StreamedStreamPosition(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamPosition(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamPositionRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamPosition(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::agricultural::robot::navigation::v1::StreamPositionRequest,::agricultural::robot::navigation::v1::PositionUpdate>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamNavigationStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamNavigationStatus() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusUpdate>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* streamer) {
                       return this->StreamedStreamNavigationStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamNavigationStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamNavigationStatus(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamNavigationStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest,::agricultural::robot::navigation::v1::NavigationStatusUpdate>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamVideo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamVideo() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::agricultural::robot::navigation::v1::StreamVideoRequest, ::agricultural::robot::navigation::v1::VideoFrame>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::agricultural::robot::navigation::v1::StreamVideoRequest, ::agricultural::robot::navigation::v1::VideoFrame>* streamer) {
                       return this->StreamedStreamVideo(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamVideo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamVideo(::grpc::ServerContext* /*context*/, const ::agricultural::robot::navigation::v1::StreamVideoRequest* /*request*/, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamVideo(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::agricultural::robot::navigation::v1::StreamVideoRequest,::agricultural::robot::navigation::v1::VideoFrame>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamPosition<WithSplitStreamingMethod_StreamNavigationStatus<WithSplitStreamingMethod_StreamVideo<Service > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetMap<WithStreamedUnaryMethod_SetMap<WithStreamedUnaryMethod_UpdateMap<WithStreamedUnaryMethod_ClearMap<WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_SetPosition<WithSplitStreamingMethod_StreamPosition<WithStreamedUnaryMethod_SendVelocityCommand<WithStreamedUnaryMethod_StopMovement<WithStreamedUnaryMethod_SendGoal<WithStreamedUnaryMethod_SendTrajectory<WithStreamedUnaryMethod_CancelGoal<WithStreamedUnaryMethod_GetNavigationStatus<WithSplitStreamingMethod_StreamNavigationStatus<WithStreamedUnaryMethod_GetCameraInfo<WithSplitStreamingMethod_StreamVideo<WithStreamedUnaryMethod_ControlCamera<WithStreamedUnaryMethod_GetLocalizationStatus<WithStreamedUnaryMethod_InitializeLocalization<WithStreamedUnaryMethod_ResetLocalization<Service > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace navigation
}  // namespace robot
}  // namespace agricultural


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_proto_2frobot_2fnavigation_2frobot_2dnavigation_2eproto__INCLUDED
