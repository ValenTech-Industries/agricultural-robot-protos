// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: proto/robot/navigation/robot-navigation.proto

#include "proto/robot/navigation/robot-navigation.pb.h"
#include "proto/robot/navigation/robot-navigation.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>
namespace agricultural {
namespace robot {
namespace navigation {
namespace v1 {

static const char* RobotNavigationService_method_names[] = {
  "/agricultural.robot.navigation.v1.RobotNavigationService/GetMap",
  "/agricultural.robot.navigation.v1.RobotNavigationService/SetMap",
  "/agricultural.robot.navigation.v1.RobotNavigationService/UpdateMap",
  "/agricultural.robot.navigation.v1.RobotNavigationService/ClearMap",
  "/agricultural.robot.navigation.v1.RobotNavigationService/GetPosition",
  "/agricultural.robot.navigation.v1.RobotNavigationService/SetPosition",
  "/agricultural.robot.navigation.v1.RobotNavigationService/StreamPosition",
  "/agricultural.robot.navigation.v1.RobotNavigationService/SendVelocityCommand",
  "/agricultural.robot.navigation.v1.RobotNavigationService/StreamVelocityCommands",
  "/agricultural.robot.navigation.v1.RobotNavigationService/StopMovement",
  "/agricultural.robot.navigation.v1.RobotNavigationService/SendGoal",
  "/agricultural.robot.navigation.v1.RobotNavigationService/SendTrajectory",
  "/agricultural.robot.navigation.v1.RobotNavigationService/CancelGoal",
  "/agricultural.robot.navigation.v1.RobotNavigationService/GetNavigationStatus",
  "/agricultural.robot.navigation.v1.RobotNavigationService/StreamNavigationStatus",
  "/agricultural.robot.navigation.v1.RobotNavigationService/GetCameraInfo",
  "/agricultural.robot.navigation.v1.RobotNavigationService/StreamVideo",
  "/agricultural.robot.navigation.v1.RobotNavigationService/ControlCamera",
  "/agricultural.robot.navigation.v1.RobotNavigationService/GetLocalizationStatus",
  "/agricultural.robot.navigation.v1.RobotNavigationService/InitializeLocalization",
  "/agricultural.robot.navigation.v1.RobotNavigationService/ResetLocalization",
};

std::unique_ptr< RobotNavigationService::Stub> RobotNavigationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RobotNavigationService::Stub> stub(new RobotNavigationService::Stub(channel, options));
  return stub;
}

RobotNavigationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetMap_(RobotNavigationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMap_(RobotNavigationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMap_(RobotNavigationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClearMap_(RobotNavigationService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPosition_(RobotNavigationService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetPosition_(RobotNavigationService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamPosition_(RobotNavigationService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SendVelocityCommand_(RobotNavigationService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamVelocityCommands_(RobotNavigationService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_StopMovement_(RobotNavigationService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendGoal_(RobotNavigationService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendTrajectory_(RobotNavigationService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelGoal_(RobotNavigationService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNavigationStatus_(RobotNavigationService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamNavigationStatus_(RobotNavigationService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetCameraInfo_(RobotNavigationService_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamVideo_(RobotNavigationService_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ControlCamera_(RobotNavigationService_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLocalizationStatus_(RobotNavigationService_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InitializeLocalization_(RobotNavigationService_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResetLocalization_(RobotNavigationService_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RobotNavigationService::Stub::GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMap_, context, request, response);
}

void RobotNavigationService::Stub::async::GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::GetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* RobotNavigationService::Stub::PrepareAsyncGetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::MapResponse, ::agricultural::robot::navigation::v1::GetMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* RobotNavigationService::Stub::AsyncGetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMap_, context, request, response);
}

void RobotNavigationService::Stub::async::SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMap_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::SetMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* RobotNavigationService::Stub::PrepareAsyncSetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::MapResponse, ::agricultural::robot::navigation::v1::SetMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* RobotNavigationService::Stub::AsyncSetMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::agricultural::robot::navigation::v1::MapResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMap_, context, request, response);
}

void RobotNavigationService::Stub::async::UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMap_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::UpdateMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* RobotNavigationService::Stub::PrepareAsyncUpdateMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::MapResponse, ::agricultural::robot::navigation::v1::UpdateMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::MapResponse>* RobotNavigationService::Stub::AsyncUpdateMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ClearMap_, context, request, response);
}

void RobotNavigationService::Stub::async::ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearMap_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::ClearMap(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ClearMap_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RobotNavigationService::Stub::PrepareAsyncClearMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::agricultural::robot::navigation::v1::ClearMapRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ClearMap_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* RobotNavigationService::Stub::AsyncClearMapRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearMapRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::agricultural::robot::navigation::v1::PositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPosition_, context, request, response);
}

void RobotNavigationService::Stub::async::GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::GetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* RobotNavigationService::Stub::PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::PositionResponse, ::agricultural::robot::navigation::v1::GetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* RobotNavigationService::Stub::AsyncGetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::agricultural::robot::navigation::v1::PositionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetPosition_, context, request, response);
}

void RobotNavigationService::Stub::async::SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPosition_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::SetPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetPosition_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* RobotNavigationService::Stub::PrepareAsyncSetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::PositionResponse, ::agricultural::robot::navigation::v1::SetPositionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetPosition_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::PositionResponse>* RobotNavigationService::Stub::AsyncSetPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetPositionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::agricultural::robot::navigation::v1::PositionUpdate>* RobotNavigationService::Stub::StreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::agricultural::robot::navigation::v1::PositionUpdate>::Create(channel_.get(), rpcmethod_StreamPosition_, context, request);
}

void RobotNavigationService::Stub::async::StreamPosition(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::PositionUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::agricultural::robot::navigation::v1::PositionUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamPosition_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>* RobotNavigationService::Stub::AsyncStreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agricultural::robot::navigation::v1::PositionUpdate>::Create(channel_.get(), cq, rpcmethod_StreamPosition_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::PositionUpdate>* RobotNavigationService::Stub::PrepareAsyncStreamPositionRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agricultural::robot::navigation::v1::PositionUpdate>::Create(channel_.get(), cq, rpcmethod_StreamPosition_, context, request, false, nullptr);
}

::grpc::Status RobotNavigationService::Stub::SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::agricultural::robot::navigation::v1::VelocityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendVelocityCommand_, context, request, response);
}

void RobotNavigationService::Stub::async::SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendVelocityCommand_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::SendVelocityCommand(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendVelocityCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::PrepareAsyncSendVelocityCommandRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendVelocityCommand_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::AsyncSendVelocityCommandRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendVelocityCommandRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::StreamVelocityCommandsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>::Create(channel_.get(), rpcmethod_StreamVelocityCommands_, context);
}

void RobotNavigationService::Stub::async::StreamVelocityCommands(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::agricultural::robot::navigation::v1::VelocityCommand,::agricultural::robot::navigation::v1::VelocityResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::agricultural::robot::navigation::v1::VelocityCommand,::agricultural::robot::navigation::v1::VelocityResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamVelocityCommands_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::AsyncStreamVelocityCommandsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>::Create(channel_.get(), cq, rpcmethod_StreamVelocityCommands_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::PrepareAsyncStreamVelocityCommandsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>::Create(channel_.get(), cq, rpcmethod_StreamVelocityCommands_, context, false, nullptr);
}

::grpc::Status RobotNavigationService::Stub::StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::agricultural::robot::navigation::v1::VelocityResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StopMovement_, context, request, response);
}

void RobotNavigationService::Stub::async::StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMovement_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::StopMovement(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StopMovement_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::PrepareAsyncStopMovementRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::StopMovementRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StopMovement_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::VelocityResponse>* RobotNavigationService::Stub::AsyncStopMovementRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStopMovementRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendGoal_, context, request, response);
}

void RobotNavigationService::Stub::async::SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendGoal_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::SendGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendGoal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* RobotNavigationService::Stub::PrepareAsyncSendGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::NavigationResponse, ::agricultural::robot::navigation::v1::NavigationGoal, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendGoal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* RobotNavigationService::Stub::AsyncSendGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendGoalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendTrajectory_, context, request, response);
}

void RobotNavigationService::Stub::async::SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTrajectory_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::SendTrajectory(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendTrajectory_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* RobotNavigationService::Stub::PrepareAsyncSendTrajectoryRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::NavigationResponse, ::agricultural::robot::navigation::v1::TrajectoryCommand, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendTrajectory_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* RobotNavigationService::Stub::AsyncSendTrajectoryRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendTrajectoryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::agricultural::robot::navigation::v1::NavigationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelGoal_, context, request, response);
}

void RobotNavigationService::Stub::async::CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelGoal_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::CancelGoal(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelGoal_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* RobotNavigationService::Stub::PrepareAsyncCancelGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::NavigationResponse, ::agricultural::robot::navigation::v1::CancelGoalRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelGoal_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationResponse>* RobotNavigationService::Stub::AsyncCancelGoalRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelGoalRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNavigationStatus_, context, request, response);
}

void RobotNavigationService::Stub::async::GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNavigationStatus_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::GetNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNavigationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* RobotNavigationService::Stub::PrepareAsyncGetNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::NavigationStatusResponse, ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNavigationStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::NavigationStatusResponse>* RobotNavigationService::Stub::AsyncGetNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNavigationStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* RobotNavigationService::Stub::StreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>::Create(channel_.get(), rpcmethod_StreamNavigationStatus_, context, request);
}

void RobotNavigationService::Stub::async::StreamNavigationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamNavigationStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* RobotNavigationService::Stub::AsyncStreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>::Create(channel_.get(), cq, rpcmethod_StreamNavigationStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* RobotNavigationService::Stub::PrepareAsyncStreamNavigationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>::Create(channel_.get(), cq, rpcmethod_StreamNavigationStatus_, context, request, false, nullptr);
}

::grpc::Status RobotNavigationService::Stub::GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCameraInfo_, context, request, response);
}

void RobotNavigationService::Stub::async::GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraInfo_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::GetCameraInfo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCameraInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>* RobotNavigationService::Stub::PrepareAsyncGetCameraInfoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::CameraInfoResponse, ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCameraInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraInfoResponse>* RobotNavigationService::Stub::AsyncGetCameraInfoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCameraInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::agricultural::robot::navigation::v1::VideoFrame>* RobotNavigationService::Stub::StreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::agricultural::robot::navigation::v1::VideoFrame>::Create(channel_.get(), rpcmethod_StreamVideo_, context, request);
}

void RobotNavigationService::Stub::async::StreamVideo(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest* request, ::grpc::ClientReadReactor< ::agricultural::robot::navigation::v1::VideoFrame>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::agricultural::robot::navigation::v1::VideoFrame>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamVideo_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>* RobotNavigationService::Stub::AsyncStreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agricultural::robot::navigation::v1::VideoFrame>::Create(channel_.get(), cq, rpcmethod_StreamVideo_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::agricultural::robot::navigation::v1::VideoFrame>* RobotNavigationService::Stub::PrepareAsyncStreamVideoRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agricultural::robot::navigation::v1::VideoFrame>::Create(channel_.get(), cq, rpcmethod_StreamVideo_, context, request, false, nullptr);
}

::grpc::Status RobotNavigationService::Stub::ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::agricultural::robot::navigation::v1::CameraControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ControlCamera_, context, request, response);
}

void RobotNavigationService::Stub::async::ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlCamera_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::ControlCamera(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ControlCamera_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>* RobotNavigationService::Stub::PrepareAsyncControlCameraRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::CameraControlResponse, ::agricultural::robot::navigation::v1::CameraControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ControlCamera_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::CameraControlResponse>* RobotNavigationService::Stub::AsyncControlCameraRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncControlCameraRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLocalizationStatus_, context, request, response);
}

void RobotNavigationService::Stub::async::GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLocalizationStatus_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::GetLocalizationStatus(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLocalizationStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* RobotNavigationService::Stub::PrepareAsyncGetLocalizationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::LocalizationStatusResponse, ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLocalizationStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationStatusResponse>* RobotNavigationService::Stub::AsyncGetLocalizationStatusRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLocalizationStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InitializeLocalization_, context, request, response);
}

void RobotNavigationService::Stub::async::InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitializeLocalization_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::InitializeLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InitializeLocalization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* RobotNavigationService::Stub::PrepareAsyncInitializeLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::LocalizationResponse, ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InitializeLocalization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* RobotNavigationService::Stub::AsyncInitializeLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInitializeLocalizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RobotNavigationService::Stub::ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ResetLocalization_, context, request, response);
}

void RobotNavigationService::Stub::async::ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetLocalization_, context, request, response, std::move(f));
}

void RobotNavigationService::Stub::async::ResetLocalization(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ResetLocalization_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* RobotNavigationService::Stub::PrepareAsyncResetLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agricultural::robot::navigation::v1::LocalizationResponse, ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ResetLocalization_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agricultural::robot::navigation::v1::LocalizationResponse>* RobotNavigationService::Stub::AsyncResetLocalizationRaw(::grpc::ClientContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncResetLocalizationRaw(context, request, cq);
  result->StartCall();
  return result;
}

RobotNavigationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::GetMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::GetMapRequest* req,
             ::agricultural::robot::navigation::v1::MapResponse* resp) {
               return service->GetMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::SetMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::SetMapRequest* req,
             ::agricultural::robot::navigation::v1::MapResponse* resp) {
               return service->SetMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::UpdateMapRequest, ::agricultural::robot::navigation::v1::MapResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::UpdateMapRequest* req,
             ::agricultural::robot::navigation::v1::MapResponse* resp) {
               return service->UpdateMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::ClearMapRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::ClearMapRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->ClearMap(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::GetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::GetPositionRequest* req,
             ::agricultural::robot::navigation::v1::PositionResponse* resp) {
               return service->GetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::SetPositionRequest, ::agricultural::robot::navigation::v1::PositionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::SetPositionRequest* req,
             ::agricultural::robot::navigation::v1::PositionResponse* resp) {
               return service->SetPosition(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::StreamPositionRequest, ::agricultural::robot::navigation::v1::PositionUpdate>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::StreamPositionRequest* req,
             ::grpc::ServerWriter<::agricultural::robot::navigation::v1::PositionUpdate>* writer) {
               return service->StreamPosition(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::VelocityCommand* req,
             ::agricultural::robot::navigation::v1::VelocityResponse* resp) {
               return service->SendVelocityCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[8],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::VelocityCommand, ::agricultural::robot::navigation::v1::VelocityResponse>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::agricultural::robot::navigation::v1::VelocityResponse,
             ::agricultural::robot::navigation::v1::VelocityCommand>* stream) {
               return service->StreamVelocityCommands(ctx, stream);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::StopMovementRequest, ::agricultural::robot::navigation::v1::VelocityResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::StopMovementRequest* req,
             ::agricultural::robot::navigation::v1::VelocityResponse* resp) {
               return service->StopMovement(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::NavigationGoal, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::NavigationGoal* req,
             ::agricultural::robot::navigation::v1::NavigationResponse* resp) {
               return service->SendGoal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::TrajectoryCommand, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::TrajectoryCommand* req,
             ::agricultural::robot::navigation::v1::NavigationResponse* resp) {
               return service->SendTrajectory(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::CancelGoalRequest, ::agricultural::robot::navigation::v1::NavigationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::CancelGoalRequest* req,
             ::agricultural::robot::navigation::v1::NavigationResponse* resp) {
               return service->CancelGoal(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::GetNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* req,
             ::agricultural::robot::navigation::v1::NavigationStatusResponse* resp) {
               return service->GetNavigationStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[14],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest, ::agricultural::robot::navigation::v1::NavigationStatusUpdate>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* req,
             ::grpc::ServerWriter<::agricultural::robot::navigation::v1::NavigationStatusUpdate>* writer) {
               return service->StreamNavigationStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::GetCameraInfoRequest, ::agricultural::robot::navigation::v1::CameraInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* req,
             ::agricultural::robot::navigation::v1::CameraInfoResponse* resp) {
               return service->GetCameraInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[16],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::StreamVideoRequest, ::agricultural::robot::navigation::v1::VideoFrame>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::StreamVideoRequest* req,
             ::grpc::ServerWriter<::agricultural::robot::navigation::v1::VideoFrame>* writer) {
               return service->StreamVideo(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::CameraControlRequest, ::agricultural::robot::navigation::v1::CameraControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::CameraControlRequest* req,
             ::agricultural::robot::navigation::v1::CameraControlResponse* resp) {
               return service->ControlCamera(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest, ::agricultural::robot::navigation::v1::LocalizationStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* req,
             ::agricultural::robot::navigation::v1::LocalizationStatusResponse* resp) {
               return service->GetLocalizationStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::InitializeLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* req,
             ::agricultural::robot::navigation::v1::LocalizationResponse* resp) {
               return service->InitializeLocalization(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RobotNavigationService_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RobotNavigationService::Service, ::agricultural::robot::navigation::v1::ResetLocalizationRequest, ::agricultural::robot::navigation::v1::LocalizationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RobotNavigationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* req,
             ::agricultural::robot::navigation::v1::LocalizationResponse* resp) {
               return service->ResetLocalization(ctx, req, resp);
             }, this)));
}

RobotNavigationService::Service::~Service() {
}

::grpc::Status RobotNavigationService::Service::GetMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::SetMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::SetMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::UpdateMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::UpdateMapRequest* request, ::agricultural::robot::navigation::v1::MapResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::ClearMap(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::ClearMapRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::GetPosition(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::SetPosition(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::SetPositionRequest* request, ::agricultural::robot::navigation::v1::PositionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::StreamPosition(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StreamPositionRequest* request, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::PositionUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::SendVelocityCommand(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::VelocityCommand* request, ::agricultural::robot::navigation::v1::VelocityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::StreamVelocityCommands(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::agricultural::robot::navigation::v1::VelocityResponse, ::agricultural::robot::navigation::v1::VelocityCommand>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::StopMovement(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StopMovementRequest* request, ::agricultural::robot::navigation::v1::VelocityResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::SendGoal(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::NavigationGoal* request, ::agricultural::robot::navigation::v1::NavigationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::SendTrajectory(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::TrajectoryCommand* request, ::agricultural::robot::navigation::v1::NavigationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::CancelGoal(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::CancelGoalRequest* request, ::agricultural::robot::navigation::v1::NavigationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::GetNavigationStatus(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetNavigationStatusRequest* request, ::agricultural::robot::navigation::v1::NavigationStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::StreamNavigationStatus(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StreamNavigationStatusRequest* request, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::NavigationStatusUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::GetCameraInfo(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetCameraInfoRequest* request, ::agricultural::robot::navigation::v1::CameraInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::StreamVideo(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::StreamVideoRequest* request, ::grpc::ServerWriter< ::agricultural::robot::navigation::v1::VideoFrame>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::ControlCamera(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::CameraControlRequest* request, ::agricultural::robot::navigation::v1::CameraControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::GetLocalizationStatus(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::GetLocalizationStatusRequest* request, ::agricultural::robot::navigation::v1::LocalizationStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::InitializeLocalization(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::InitializeLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RobotNavigationService::Service::ResetLocalization(::grpc::ServerContext* context, const ::agricultural::robot::navigation::v1::ResetLocalizationRequest* request, ::agricultural::robot::navigation::v1::LocalizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agricultural
}  // namespace robot
}  // namespace navigation
}  // namespace v1
#include <grpcpp/ports_undef.inc>

